
QFrameworkApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f0  080039f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f8  080039f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000011e4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200011f4  200011f4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df6c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f94  00000000  00000000  0002dfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  00030f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b40  00000000  00000000  00031bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208b5  00000000  00000000  00032710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb4e  00000000  00000000  00052fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca58b  00000000  00000000  00061b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c09e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000312c  00000000  00000000  0012c0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003944 	.word	0x08003944

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003944 	.word	0x08003944

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <actorA_ctor>:
QEvt * ev;
/* hierarchical state machine ... */
static QState actorA_initial(actorA_t * const me, QEvt const * const e);
static QState actorA_S00(actorA_t * const me, QEvt const * const e);

void actorA_ctor(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	actorA_t * const me = &l_actorA;
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <actorA_ctor+0x3c>)
 80004d4:	607b      	str	r3, [r7, #4]
	QActive_ctor(&me->super, Q_STATE_CAST(&actorA_initial));
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	490c      	ldr	r1, [pc, #48]	; (800050c <actorA_ctor+0x40>)
 80004da:	4618      	mov	r0, r3
 80004dc:	f001 fa34 	bl	8001948 <QActive_ctor>
	QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f103 0020 	add.w	r0, r3, #32
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	2300      	movs	r3, #0
 80004ea:	2207      	movs	r2, #7
 80004ec:	f001 faf0 	bl	8001ad0 <QTimeEvt_ctorX>
	QTimeEvt_ctorX(&me->timeEvt1, &me->super, TIMEOUT_SIG1, 0U);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	2300      	movs	r3, #0
 80004fa:	2208      	movs	r2, #8
 80004fc:	f001 fae8 	bl	8001ad0 <QTimeEvt_ctorX>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000030 	.word	0x20000030
 800050c:	08000511 	.word	0x08000511

08000510 <actorA_initial>:

QState actorA_initial(actorA_t * const me, QEvt const * const e) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
    (void)e; /* avoid compiler warning about unused parameter */

    /* arm the time event to expire in half a second and every half second */
    QTimeEvt_armX(&me->timeEvt, BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3320      	adds	r3, #32
 800051e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000522:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000526:	4618      	mov	r0, r3
 8000528:	f001 fb02 	bl	8001b30 <QTimeEvt_armX>
    QTimeEvt_armX(&me->timeEvt1, BSP_TICKS_PER_SEC/500U, BSP_TICKS_PER_SEC/500U);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3334      	adds	r3, #52	; 0x34
 8000530:	2202      	movs	r2, #2
 8000532:	2102      	movs	r1, #2
 8000534:	4618      	mov	r0, r3
 8000536:	f001 fafb 	bl	8001b30 <QTimeEvt_armX>
    me->time_sec = 0;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	649a      	str	r2, [r3, #72]	; 0x48
    me->cnt = 0;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	64da      	str	r2, [r3, #76]	; 0x4c
    return Q_TRAN(&actorA_S00);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a03      	ldr	r2, [pc, #12]	; (8000558 <actorA_initial+0x48>)
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	2308      	movs	r3, #8
}
 800054e:	4618      	mov	r0, r3
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	0800055d 	.word	0x0800055d

0800055c <actorA_S00>:

QState actorA_S00(actorA_t * const me, QEvt const * const e) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	3b01      	subs	r3, #1
 800056c:	2b09      	cmp	r3, #9
 800056e:	f200 808b 	bhi.w	8000688 <actorA_S00+0x12c>
 8000572:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <actorA_S00+0x1c>)
 8000574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000578:	080005a1 	.word	0x080005a1
 800057c:	08000689 	.word	0x08000689
 8000580:	08000689 	.word	0x08000689
 8000584:	08000689 	.word	0x08000689
 8000588:	08000689 	.word	0x08000689
 800058c:	08000689 	.word	0x08000689
 8000590:	080005b3 	.word	0x080005b3
 8000594:	080005e1 	.word	0x080005e1
 8000598:	08000641 	.word	0x08000641
 800059c:	08000665 	.word	0x08000665
        case Q_ENTRY_SIG: {
        	Digit_Number(me->cnt);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 faf8 	bl	8000b9c <Digit_Number>
            status = Q_HANDLED();
 80005ac:	2303      	movs	r3, #3
 80005ae:	73fb      	strb	r3, [r7, #15]
            break;
 80005b0:	e070      	b.n	8000694 <actorA_S00+0x138>
        }
        case TIMEOUT_SIG: {
        	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005b2:	2101      	movs	r1, #1
 80005b4:	483a      	ldr	r0, [pc, #232]	; (80006a0 <actorA_S00+0x144>)
 80005b6:	f002 f81e 	bl	80025f6 <HAL_GPIO_TogglePin>
        	me->time_sec++;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	649a      	str	r2, [r3, #72]	; 0x48
        	if (me->time_sec % 2 ) {
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <actorA_S00+0x7a>
        		Buzz_On();
 80005d0:	f000 fb6c 	bl	8000cac <Buzz_On>
 80005d4:	e001      	b.n	80005da <actorA_S00+0x7e>
        	} else {
        		Buzz_Off();
 80005d6:	f000 fb73 	bl	8000cc0 <Buzz_Off>
        	}

            status = Q_HANDLED();
 80005da:	2303      	movs	r3, #3
 80005dc:	73fb      	strb	r3, [r7, #15]
            break;
 80005de:	e059      	b.n	8000694 <actorA_S00+0x138>
        }

        case TIMEOUT_SIG1: {
        	uint8_t rot = Rot_Read();
 80005e0:	f000 fb78 	bl	8000cd4 <Rot_Read>
 80005e4:	4603      	mov	r3, r0
 80005e6:	73bb      	strb	r3, [r7, #14]

        	if (rot == 2) {
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d111      	bne.n	8000612 <actorA_S00+0xb6>
        	    ev =  Q_NEW(QEvt, ROT_UP_SIG);
 80005ee:	2209      	movs	r2, #9
 80005f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005f4:	2004      	movs	r0, #4
 80005f6:	f000 ffcb 	bl	8001590 <QF_newX_>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a29      	ldr	r2, [pc, #164]	; (80006a4 <actorA_S00+0x148>)
 80005fe:	6013      	str	r3, [r2, #0]
        	    QActive_post_((QActive *)me, ev, QF_NO_MARGIN, NULL);
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <actorA_S00+0x148>)
 8000602:	6819      	ldr	r1, [r3, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 fe36 	bl	800127c <QActive_post_>
 8000610:	e013      	b.n	800063a <actorA_S00+0xde>
        	} else if (rot == 3) {
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d110      	bne.n	800063a <actorA_S00+0xde>
        	    ev =  Q_NEW(QEvt, ROT_DN_SIG);
 8000618:	220a      	movs	r2, #10
 800061a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800061e:	2004      	movs	r0, #4
 8000620:	f000 ffb6 	bl	8001590 <QF_newX_>
 8000624:	4603      	mov	r3, r0
 8000626:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <actorA_S00+0x148>)
 8000628:	6013      	str	r3, [r2, #0]
        	    QActive_post_((QActive *)me, ev, QF_NO_MARGIN, NULL);
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <actorA_S00+0x148>)
 800062c:	6819      	ldr	r1, [r3, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 fe21 	bl	800127c <QActive_post_>
        	}

            status = Q_HANDLED();
 800063a:	2303      	movs	r3, #3
 800063c:	73fb      	strb	r3, [r7, #15]
            break;
 800063e:	e029      	b.n	8000694 <actorA_S00+0x138>
        }

        case ROT_UP_SIG: {
        	if (me->cnt < 99) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000644:	2b62      	cmp	r3, #98	; 0x62
 8000646:	dc0a      	bgt.n	800065e <actorA_S00+0x102>
        		me->cnt++;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	64da      	str	r2, [r3, #76]	; 0x4c
        		Digit_Number(me->cnt);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	b29b      	uxth	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fa9f 	bl	8000b9c <Digit_Number>
        	}
            status = Q_HANDLED();
 800065e:	2303      	movs	r3, #3
 8000660:	73fb      	strb	r3, [r7, #15]
            break;
 8000662:	e017      	b.n	8000694 <actorA_S00+0x138>
        }

        case ROT_DN_SIG: {
        	if (me->cnt > 0) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000668:	2b00      	cmp	r3, #0
 800066a:	dd0a      	ble.n	8000682 <actorA_S00+0x126>
        		me->cnt--;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	64da      	str	r2, [r3, #76]	; 0x4c
        		Digit_Number(me->cnt);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	b29b      	uxth	r3, r3
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fa8d 	bl	8000b9c <Digit_Number>
        	}
            status = Q_HANDLED();
 8000682:	2303      	movs	r3, #3
 8000684:	73fb      	strb	r3, [r7, #15]
            break;
 8000686:	e005      	b.n	8000694 <actorA_S00+0x138>
        }

        default: {
            status = Q_SUPER(&QHsm_top);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <actorA_S00+0x14c>)
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]
            break;
 8000692:	bf00      	nop
        }
    }
    return status;
 8000694:	7bfb      	ldrb	r3, [r7, #15]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020000 	.word	0x40020000
 80006a4:	2000002c 	.word	0x2000002c
 80006a8:	08000de5 	.word	0x08000de5

080006ac <QF_onStartup>:
    * To avoid problems, a dummy definition for HAL_InitTick() is provided
    * in the file stm32l5xx_hal_msp.c. The SystTick is configured and
    * started later in QF_onStartup().
    */
}
void QF_onStartup(void) {
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
    /* assign all priority bits for preemption-prio. and none to sub-prio.
    * NOTE: this might have been changed by STM32Cube.
    */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <QV_onIdle>:
/*..........................................................................*/
void QF_onCleanup(void) {
}

/*..........................................................................*/
void QV_onIdle(void) { /* CATION: called with interrupts DISABLED, NOTE01 */
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
	QF_INT_ENABLE(); /* just enable interrupts */
 80006be:	2300      	movs	r3, #0
 80006c0:	f383 8811 	msr	BASEPRI, r3
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <Q_onAssert>:

/*..........................................................................*/
Q_NORETURN Q_onAssert(char const * const module, int_t const loc) {
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f001 fc5f 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f837 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 f8ed 	bl	80008d0 <MX_GPIO_Init>
  MX_TIM4_Init();
 80006f6:	f000 f891 	bl	800081c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  QF_init();
 80006fa:	f001 fb53 	bl	8001da4 <QF_init>
  QF_poolInit(_buff, 1024 * 4, 16);
 80006fe:	2210      	movs	r2, #16
 8000700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000704:	4812      	ldr	r0, [pc, #72]	; (8000750 <main+0x6c>)
 8000706:	f000 ff01 	bl	800150c <QF_poolInit>

  /* instantiate and start the active objects... */
  actorA_ctor();
 800070a:	f7ff fedf 	bl	80004cc <actorA_ctor>
  QACTIVE_START(AO_actorA,      /* AO pointer to start */
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <main+0x70>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d103      	bne.n	8000720 <main+0x3c>
 8000718:	2167      	movs	r1, #103	; 0x67
 800071a:	480f      	ldr	r0, [pc, #60]	; (8000758 <main+0x74>)
 800071c:	f7ff ffd7 	bl	80006ce <Q_onAssert>
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <main+0x70>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	689c      	ldr	r4, [r3, #8]
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <main+0x70>)
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	2300      	movs	r3, #0
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	2300      	movs	r3, #0
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	230a      	movs	r3, #10
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <main+0x78>)
 800073c:	2101      	movs	r1, #1
 800073e:	47a0      	blx	r4
                Q_DIM(l_blinkyQSto), /* lenght of the queue [entries] */
                (void *)0,      /* stack storage (not used in QK) */
                0U,             /* stack size [bytes] (not used in QK) */
                (QEvt *)0);     /* initial event (or 0) */

  return QF_run(); /* run the QF application */
 8000740:	f001 fb4e 	bl	8001de0 <QF_run>
 8000744:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000746:	4618      	mov	r0, r3
 8000748:	3704      	adds	r7, #4
 800074a:	46bd      	mov	sp, r7
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	bf00      	nop
 8000750:	200000f0 	.word	0x200000f0
 8000754:	0800395c 	.word	0x0800395c
 8000758:	08003960 	.word	0x08003960
 800075c:	200000c8 	.word	0x200000c8

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 f8e0 	bl	8003934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <SystemClock_Config+0xb4>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xb4>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xb4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <SystemClock_Config+0xb8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <SystemClock_Config+0xb8>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <SystemClock_Config+0xb8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2310      	movs	r3, #16
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 ff2b 	bl	800262c <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007dc:	f000 f914 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 f98e 	bl	8002b1c <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000806:	f000 f8ff 	bl	8000a08 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	; 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_TIM4_Init+0xac>)
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <MX_TIM4_Init+0xb0>)
 8000842:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_TIM4_Init+0xac>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_TIM4_Init+0xac>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_TIM4_Init+0xac>)
 8000852:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000856:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_TIM4_Init+0xac>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_TIM4_Init+0xac>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000864:	4818      	ldr	r0, [pc, #96]	; (80008c8 <MX_TIM4_Init+0xac>)
 8000866:	f002 fb05 	bl	8002e74 <HAL_TIM_PWM_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000870:	f000 f8ca 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4619      	mov	r1, r3
 8000882:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MX_TIM4_Init+0xac>)
 8000884:	f002 ffb6 	bl	80037f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800088e:	f000 f8bb 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000892:	2360      	movs	r3, #96	; 0x60
 8000894:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8000896:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800089a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2208      	movs	r2, #8
 80008a8:	4619      	mov	r1, r3
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <MX_TIM4_Init+0xac>)
 80008ac:	f002 fc6a 	bl	8003184 <HAL_TIM_PWM_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80008b6:	f000 f8a7 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008ba:	4803      	ldr	r0, [pc, #12]	; (80008c8 <MX_TIM4_Init+0xac>)
 80008bc:	f000 f8f4 	bl	8000aa8 <HAL_TIM_MspPostInit>

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000080 	.word	0x20000080
 80008cc:	40000800 	.word	0x40000800

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <MX_GPIO_Init+0x128>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a42      	ldr	r2, [pc, #264]	; (80009f8 <MX_GPIO_Init+0x128>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <MX_GPIO_Init+0x128>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b3c      	ldr	r3, [pc, #240]	; (80009f8 <MX_GPIO_Init+0x128>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a3b      	ldr	r2, [pc, #236]	; (80009f8 <MX_GPIO_Init+0x128>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <MX_GPIO_Init+0x128>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b35      	ldr	r3, [pc, #212]	; (80009f8 <MX_GPIO_Init+0x128>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a34      	ldr	r2, [pc, #208]	; (80009f8 <MX_GPIO_Init+0x128>)
 8000928:	f043 0310 	orr.w	r3, r3, #16
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b32      	ldr	r3, [pc, #200]	; (80009f8 <MX_GPIO_Init+0x128>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <MX_GPIO_Init+0x128>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a2d      	ldr	r2, [pc, #180]	; (80009f8 <MX_GPIO_Init+0x128>)
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <MX_GPIO_Init+0x128>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|SCK_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2121      	movs	r1, #33	; 0x21
 800095a:	4828      	ldr	r0, [pc, #160]	; (80009fc <MX_GPIO_Init+0x12c>)
 800095c:	f001 fe32 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2104      	movs	r1, #4
 8000964:	4826      	ldr	r0, [pc, #152]	; (8000a00 <MX_GPIO_Init+0x130>)
 8000966:	f001 fe2d 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000970:	4824      	ldr	r0, [pc, #144]	; (8000a04 <MX_GPIO_Init+0x134>)
 8000972:	f001 fe27 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	2120      	movs	r1, #32
 800097a:	4821      	ldr	r0, [pc, #132]	; (8000a00 <MX_GPIO_Init+0x130>)
 800097c:	f001 fe22 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin SCK_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SCK_Pin;
 8000980:	2321      	movs	r3, #33	; 0x21
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4819      	ldr	r0, [pc, #100]	; (80009fc <MX_GPIO_Init+0x12c>)
 8000998:	f001 fc60 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : K2_Pin K3_Pin */
  GPIO_InitStruct.Pin = K2_Pin|K3_Pin;
 800099c:	2303      	movs	r3, #3
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4814      	ldr	r0, [pc, #80]	; (8000a00 <MX_GPIO_Init+0x130>)
 80009b0:	f001 fc54 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin SDI_Pin */
  GPIO_InitStruct.Pin = CS_Pin|SDI_Pin;
 80009b4:	2324      	movs	r3, #36	; 0x24
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_GPIO_Init+0x130>)
 80009cc:	f001 fc46 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <MX_GPIO_Init+0x134>)
 80009ea:	f001 fc37 	bl	800225c <HAL_GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40021000 	.word	0x40021000

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10d      	bne.n	8000a92 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x40>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x40>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x40>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40000800 	.word	0x40000800
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <HAL_TIM_MspPostInit+0x68>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d11e      	bne.n	8000b08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_TIM_MspPostInit+0x6c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <HAL_TIM_MspPostInit+0x6c>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_TIM_MspPostInit+0x6c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ae6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_TIM_MspPostInit+0x70>)
 8000b04:	f001 fbaa 	bl	800225c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40000800 	.word	0x40000800
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020c00 	.word	0x40020c00

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	QTIMEEVT_TICK_X(0U, (void *)0);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f001 f83e 	bl	8001bec <QTimeEvt_tick_>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f001 fa6e 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Digit_Number>:

void Digit_Init(void) {
	Digit_Update(digit_state);
}

void Digit_Number(uint16_t number) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
	digit_state = ((uint16_t)digits[(number/10)%10]<<8) | digits[number % 10];
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <Digit_Number+0x70>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	08db      	lsrs	r3, r3, #3
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <Digit_Number+0x70>)
 8000bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8000bb8:	08d9      	lsrs	r1, r3, #3
 8000bba:	460b      	mov	r3, r1
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <Digit_Number+0x74>)
 8000bca:	5c9b      	ldrb	r3, [r3, r2]
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	b218      	sxth	r0, r3
 8000bd0:	88fa      	ldrh	r2, [r7, #6]
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <Digit_Number+0x70>)
 8000bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8000bd8:	08d9      	lsrs	r1, r3, #3
 8000bda:	460b      	mov	r3, r1
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	440b      	add	r3, r1
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <Digit_Number+0x74>)
 8000bea:	5c9b      	ldrb	r3, [r3, r2]
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	4303      	orrs	r3, r0
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <Digit_Number+0x78>)
 8000bf6:	801a      	strh	r2, [r3, #0]
	Digit_Update(digit_state);
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <Digit_Number+0x78>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f80b 	bl	8000c18 <Digit_Update>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	cccccccd 	.word	0xcccccccd
 8000c10:	08003984 	.word	0x08003984
 8000c14:	200010f0 	.word	0x200010f0

08000c18 <Digit_Update>:
			break;
	}
	Digit_Update(digit_state);
}

static void Digit_Update(uint16_t data) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
	uint32_t  j = 16;
 8000c22:	2310      	movs	r3, #16
 8000c24:	60fb      	str	r3, [r7, #12]

	// negative reset pulse
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2c:	481c      	ldr	r0, [pc, #112]	; (8000ca0 <Digit_Update+0x88>)
 8000c2e:	f001 fcc9 	bl	80025c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c38:	4819      	ldr	r0, [pc, #100]	; (8000ca0 <Digit_Update+0x88>)
 8000c3a:	f001 fcc3 	bl	80025c4 <HAL_GPIO_WritePin>

	while (j--) { // while(data) -- BAD!!!!
 8000c3e:	e01c      	b.n	8000c7a <Digit_Update+0x62>

		  // set data bit
		  if (data & 0x1) {
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d005      	beq.n	8000c56 <Digit_Update+0x3e>
			  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <Digit_Update+0x8c>)
 8000c50:	f001 fcb8 	bl	80025c4 <HAL_GPIO_WritePin>
 8000c54:	e004      	b.n	8000c60 <Digit_Update+0x48>
		  } else {
			  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2120      	movs	r1, #32
 8000c5a:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <Digit_Update+0x8c>)
 8000c5c:	f001 fcb2 	bl	80025c4 <HAL_GPIO_WritePin>
		  }

		  // clock pulse
		  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2120      	movs	r1, #32
 8000c64:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <Digit_Update+0x90>)
 8000c66:	f001 fcad 	bl	80025c4 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <Digit_Update+0x90>)
 8000c70:	f001 fca8 	bl	80025c4 <HAL_GPIO_WritePin>

		  data >>= 1;
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	085b      	lsrs	r3, r3, #1
 8000c78:	80fb      	strh	r3, [r7, #6]
	while (j--) { // while(data) -- BAD!!!!
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	1e5a      	subs	r2, r3, #1
 8000c7e:	60fa      	str	r2, [r7, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1dd      	bne.n	8000c40 <Digit_Update+0x28>
	}

	// positive update (write) pulse
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2104      	movs	r1, #4
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <Digit_Update+0x8c>)
 8000c8a:	f001 fc9b 	bl	80025c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2104      	movs	r1, #4
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <Digit_Update+0x8c>)
 8000c94:	f001 fc96 	bl	80025c4 <HAL_GPIO_WritePin>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40020000 	.word	0x40020000

08000cac <Buzz_On>:

void Buzz_On(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	4802      	ldr	r0, [pc, #8]	; (8000cbc <Buzz_On+0x10>)
 8000cb4:	f002 f92e 	bl	8002f14 <HAL_TIM_PWM_Start>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000080 	.word	0x20000080

08000cc0 <Buzz_Off>:

void Buzz_Off(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <Buzz_Off+0x10>)
 8000cc8:	f002 f9ec 	bl	80030a4 <HAL_TIM_PWM_Stop>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000080 	.word	0x20000080

08000cd4 <Rot_Read>:
void Buzz_SetFreq(uint32_t freq) {
	TIM4->ARR = freq;
	TIM4->CCR3 = freq;
}

uint8_t Rot_Read(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0

	uint8_t ret = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	71fb      	strb	r3, [r7, #7]

	timer_enc++;
 8000cde:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <Rot_Read+0xc0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <Rot_Read+0xc0>)
 8000ce6:	6013      	str	r3, [r2, #0]

	static uint8_t key2 = 1, key3 = 1, key2_prev = 1, key3_prev = 1;

	key2 = HAL_GPIO_ReadPin(K2_GPIO_Port, K2_Pin);
 8000ce8:	2101      	movs	r1, #1
 8000cea:	482b      	ldr	r0, [pc, #172]	; (8000d98 <Rot_Read+0xc4>)
 8000cec:	f001 fc52 	bl	8002594 <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <Rot_Read+0xc8>)
 8000cf6:	701a      	strb	r2, [r3, #0]
	key3 = HAL_GPIO_ReadPin(K3_GPIO_Port, K3_Pin);
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4827      	ldr	r0, [pc, #156]	; (8000d98 <Rot_Read+0xc4>)
 8000cfc:	f001 fc4a 	bl	8002594 <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <Rot_Read+0xcc>)
 8000d06:	701a      	strb	r2, [r3, #0]

	if(key2 ^ key2_prev) {
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <Rot_Read+0xc8>)
 8000d0a:	781a      	ldrb	r2, [r3, #0]
 8000d0c:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <Rot_Read+0xd0>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d004      	beq.n	8000d1e <Rot_Read+0x4a>
		timer_key2 = timer_enc;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <Rot_Read+0xc0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a23      	ldr	r2, [pc, #140]	; (8000da8 <Rot_Read+0xd4>)
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	e009      	b.n	8000d32 <Rot_Read+0x5e>
	} else if(key3 ^ key3_prev) {
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <Rot_Read+0xcc>)
 8000d20:	781a      	ldrb	r2, [r3, #0]
 8000d22:	4b22      	ldr	r3, [pc, #136]	; (8000dac <Rot_Read+0xd8>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d003      	beq.n	8000d32 <Rot_Read+0x5e>
		timer_key3 = timer_enc;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <Rot_Read+0xc0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <Rot_Read+0xdc>)
 8000d30:	6013      	str	r3, [r2, #0]
	}

	key2_prev = key2;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <Rot_Read+0xc8>)
 8000d34:	781a      	ldrb	r2, [r3, #0]
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <Rot_Read+0xd0>)
 8000d38:	701a      	strb	r2, [r3, #0]
	key3_prev = key3;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <Rot_Read+0xcc>)
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <Rot_Read+0xd8>)
 8000d40:	701a      	strb	r2, [r3, #0]

	if (timer_key2 != 0 && abs(timer_key3 - timer_key2) < 11) {
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <Rot_Read+0xd4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d01f      	beq.n	8000d8a <Rot_Read+0xb6>
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <Rot_Read+0xdc>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <Rot_Read+0xd4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	f113 0f0a 	cmn.w	r3, #10
 8000d58:	db17      	blt.n	8000d8a <Rot_Read+0xb6>
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <Rot_Read+0xdc>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <Rot_Read+0xd4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b0a      	cmp	r3, #10
 8000d66:	dc10      	bgt.n	8000d8a <Rot_Read+0xb6>
		// e.sig = (timer_key3 > timer_key2) + ROT_UP_SIG;

		if (timer_key3 > timer_key2) {
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <Rot_Read+0xdc>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <Rot_Read+0xd4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d902      	bls.n	8000d7a <Rot_Read+0xa6>
			// e.sig = ROT_UP_SIG;
			ret = 2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	e001      	b.n	8000d7e <Rot_Read+0xaa>
		} else {
			// e.sig = ROT_DN_SIG;
			ret = 3;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	71fb      	strb	r3, [r7, #7]
		}

		timer_key2 = 0;
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <Rot_Read+0xd4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
		timer_key3 = 0;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <Rot_Read+0xdc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
	}

	return ret;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]

}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200010fc 	.word	0x200010fc
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	20000005 	.word	0x20000005
 8000da4:	20000006 	.word	0x20000006
 8000da8:	200010f4 	.word	0x200010f4
 8000dac:	20000007 	.word	0x20000007
 8000db0:	200010f8 	.word	0x200010f8

08000db4 <QHsm_ctor>:
}

/*${QEP::QHsm::ctor} .......................................................*/
void QHsm_ctor(QHsm * const me,
    QStateHandler initial)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->vptr      = &vtable;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <QHsm_ctor+0x28>)
 8000dc2:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <QHsm_ctor+0x2c>)
 8000dc8:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	609a      	str	r2, [r3, #8]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	080039a8 	.word	0x080039a8
 8000de0:	08000de5 	.word	0x08000de5

08000de4 <QHsm_top>:

/*${QEP::QHsm::top} ........................................................*/
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; /* the top state ignores all events */
 8000dee:	2304      	movs	r3, #4
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <QHsm_init_>:

/*${QEP::QHsm::init_} ......................................................*/
void QHsm_init_(QHsm * const me,
    void const * const e,
    uint_fast8_t const qs_id)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	; 0x38
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    (void)qs_id; /* unused parameter */
    #endif

    QStateHandler t = me->state.fun;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <QHsm_init_+0x2a>
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <QHsm_init_+0x2a>
 8000e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e20:	4a33      	ldr	r2, [pc, #204]	; (8000ef0 <QHsm_init_+0xf4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d003      	beq.n	8000e2e <QHsm_init_+0x32>
 8000e26:	21c8      	movs	r1, #200	; 0xc8
 8000e28:	4832      	ldr	r0, [pc, #200]	; (8000ef4 <QHsm_init_+0xf8>)
 8000e2a:	f7ff fc50 	bl	80006ce <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	4798      	blx	r3
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
 8000e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d003      	beq.n	8000e4e <QHsm_init_+0x52>
 8000e46:	21d2      	movs	r1, #210	; 0xd2
 8000e48:	482a      	ldr	r0, [pc, #168]	; (8000ef4 <QHsm_init_+0xf8>)
 8000e4a:	f7ff fc40 	bl	80006ce <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30

        path[0] = me->temp.fun;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	617b      	str	r3, [r7, #20]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	4926      	ldr	r1, [pc, #152]	; (8000ef8 <QHsm_init_+0xfc>)
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	4798      	blx	r3
        while (me->temp.fun != t) {
 8000e62:	e016      	b.n	8000e92 <QHsm_init_+0x96>
            ++ip;
 8000e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e66:	3301      	adds	r3, #1
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 8000e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	dd03      	ble.n	8000e78 <QHsm_init_+0x7c>
 8000e70:	21dc      	movs	r1, #220	; 0xdc
 8000e72:	4820      	ldr	r0, [pc, #128]	; (8000ef4 <QHsm_init_+0xf8>)
 8000e74:	f7ff fc2b 	bl	80006ce <Q_onAssert>
            path[ip] = me->temp.fun;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	3338      	adds	r3, #56	; 0x38
 8000e82:	443b      	add	r3, r7
 8000e84:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	491a      	ldr	r1, [pc, #104]	; (8000ef8 <QHsm_init_+0xfc>)
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	4798      	blx	r3
        while (me->temp.fun != t) {
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d1e3      	bne.n	8000e64 <QHsm_init_+0x68>
        }
        me->temp.fun = path[0];
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8000ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	3338      	adds	r3, #56	; 0x38
 8000ea8:	443b      	add	r3, r7
 8000eaa:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000eae:	4913      	ldr	r1, [pc, #76]	; (8000efc <QHsm_init_+0x100>)
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	4798      	blx	r3
            --ip;
 8000eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
        } while (ip >= 0);
 8000eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	daf0      	bge.n	8000ea2 <QHsm_init_+0xa6>

        t = path[0]; /* current state becomes the new source */
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 8000ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec6:	490e      	ldr	r1, [pc, #56]	; (8000f00 <QHsm_init_+0x104>)
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	4798      	blx	r3
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

    } while (r == Q_RET_TRAN);
 8000ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ed6:	2b08      	cmp	r3, #8
 8000ed8:	d0b9      	beq.n	8000e4e <QHsm_init_+0x52>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ede:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ee4:	609a      	str	r2, [r3, #8]
}
 8000ee6:	bf00      	nop
 8000ee8:	3738      	adds	r7, #56	; 0x38
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	08000de5 	.word	0x08000de5
 8000ef4:	08003990 	.word	0x08003990
 8000ef8:	08003998 	.word	0x08003998
 8000efc:	0800399c 	.word	0x0800399c
 8000f00:	080039a4 	.word	0x080039a4

08000f04 <QHsm_dispatch_>:

/*${QEP::QHsm::dispatch_} ..................................................*/
void QHsm_dispatch_(QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	; 0x38
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* unused when Q_SPY undefined */

    QStateHandler t = me->state.fun;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
    QS_CRIT_STAT_

    /*! @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8000f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <QHsm_dispatch_+0x22>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d004      	beq.n	8000f30 <QHsm_dispatch_+0x2c>
 8000f26:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000f2a:	4852      	ldr	r0, [pc, #328]	; (8001074 <QHsm_dispatch_+0x170>)
 8000f2c:	f7ff fbcf 	bl	80006ce <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
        r = (*s)(me, e); /* invoke state handler s */
 8000f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	4798      	blx	r3
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (r == Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 8000f44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d106      	bne.n	8000f5a <QHsm_dispatch_+0x56>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 8000f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4e:	494a      	ldr	r1, [pc, #296]	; (8001078 <QHsm_dispatch_+0x174>)
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	4798      	blx	r3
 8000f54:	4603      	mov	r3, r0
 8000f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    } while (r == Q_RET_SUPER);
 8000f5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0e6      	beq.n	8000f30 <QHsm_dispatch_+0x2c>

    /* regular transition taken? */
    /*! @tr{RQP120E} */
    if (r >= Q_RET_TRAN) {
 8000f62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f66:	2b07      	cmp	r3, #7
 8000f68:	d97a      	bls.n	8001060 <QHsm_dispatch_+0x15c>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	613b      	str	r3, [r7, #16]
        path[1] = t;
 8000f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f72:	617b      	str	r3, [r7, #20]
        path[2] = s;
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	61bb      	str	r3, [r7, #24]

        /* exit current state to transition source s... */
        /*! @tr{RQP120C} */
        for (; t != s; t = me->temp.fun) {
 8000f78:	e00d      	b.n	8000f96 <QHsm_dispatch_+0x92>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7c:	493f      	ldr	r1, [pc, #252]	; (800107c <QHsm_dispatch_+0x178>)
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	4798      	blx	r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d103      	bne.n	8000f90 <QHsm_dispatch_+0x8c>
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                /* find superstate of t */
                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8000f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8a:	493b      	ldr	r1, [pc, #236]	; (8001078 <QHsm_dispatch_+0x174>)
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
 8000f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d1ed      	bne.n	8000f7a <QHsm_dispatch_+0x76>
            }
        }

        int_fast8_t ip = QHsm_tran_(me, path, qs_id); /* the HSM transition */
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 f86e 	bl	8001088 <QHsm_tran_>
 8000fac:	62f8      	str	r0, [r7, #44]	; 0x2c
        }
    #endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        /*! @tr{RQP120B} */
        for (; ip >= 0; --ip) {
 8000fae:	e00b      	b.n	8000fc8 <QHsm_dispatch_+0xc4>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 8000fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	3338      	adds	r3, #56	; 0x38
 8000fb6:	443b      	add	r3, r7
 8000fb8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000fbc:	4930      	ldr	r1, [pc, #192]	; (8001080 <QHsm_dispatch_+0x17c>)
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	daf0      	bge.n	8000fb0 <QHsm_dispatch_+0xac>
        }

        t = path[0];      /* stick the target into register */
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
        me->temp.fun = t; /* update the next state */
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fd6:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8000fd8:	e03b      	b.n	8001052 <QHsm_dispatch_+0x14e>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[0] = me->temp.fun;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	613b      	str	r3, [r7, #16]

            /* find superstate */
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	4923      	ldr	r1, [pc, #140]	; (8001078 <QHsm_dispatch_+0x174>)
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	4798      	blx	r3

            while (me->temp.fun != t) {
 8000fee:	e00f      	b.n	8001010 <QHsm_dispatch_+0x10c>
                ++ip;
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
                path[ip] = me->temp.fun;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	3338      	adds	r3, #56	; 0x38
 8001000:	443b      	add	r3, r7
 8001002:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	491b      	ldr	r1, [pc, #108]	; (8001078 <QHsm_dispatch_+0x174>)
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	4798      	blx	r3
            while (me->temp.fun != t) {
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001016:	429a      	cmp	r2, r3
 8001018:	d1ea      	bne.n	8000ff0 <QHsm_dispatch_+0xec>
            }
            me->temp.fun = path[0];
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8001020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001022:	2b05      	cmp	r3, #5
 8001024:	dd04      	ble.n	8001030 <QHsm_dispatch_+0x12c>
 8001026:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800102a:	4812      	ldr	r0, [pc, #72]	; (8001074 <QHsm_dispatch_+0x170>)
 800102c:	f7ff fb4f 	bl	80006ce <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	3338      	adds	r3, #56	; 0x38
 8001036:	443b      	add	r3, r7
 8001038:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800103c:	4910      	ldr	r1, [pc, #64]	; (8001080 <QHsm_dispatch_+0x17c>)
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	4798      	blx	r3
                --ip;
 8001042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001044:	3b01      	subs	r3, #1
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
            } while (ip >= 0);
 8001048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104a:	2b00      	cmp	r3, #0
 800104c:	daf0      	bge.n	8001030 <QHsm_dispatch_+0x12c>

            t = path[0]; /* current state becomes the new source */
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001054:	490b      	ldr	r1, [pc, #44]	; (8001084 <QHsm_dispatch_+0x180>)
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	4798      	blx	r3
 800105a:	4603      	mov	r3, r0
 800105c:	2b08      	cmp	r3, #8
 800105e:	d0bc      	beq.n	8000fda <QHsm_dispatch_+0xd6>
        QS_END_PRE_()

    }
    #endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001064:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800106a:	609a      	str	r2, [r3, #8]
}
 800106c:	bf00      	nop
 800106e:	3738      	adds	r7, #56	; 0x38
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	08003990 	.word	0x08003990
 8001078:	08003998 	.word	0x08003998
 800107c:	080039a0 	.word	0x080039a0
 8001080:	0800399c 	.word	0x0800399c
 8001084:	080039a4 	.word	0x080039a4

08001088 <QHsm_tran_>:

/*${QEP::QHsm::tran_} ......................................................*/
int_fast8_t QHsm_tran_(QHsm * const me,
    QStateHandler path[QHSM_MAX_NEST_DEPTH_],
    uint_fast8_t const qs_id)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); // unused when Q_SPY undefined

    int_fast8_t ip = -1; /* transition entry path index */
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	617b      	str	r3, [r7, #20]
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d106      	bne.n	80010bc <QHsm_tran_+0x34>
        QEP_EXIT_(s, qs_id); /* exit the source */
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	4964      	ldr	r1, [pc, #400]	; (8001244 <QHsm_tran_+0x1bc>)
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	4798      	blx	r3
        ip = 0; /* enter the target */
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ba:	e0be      	b.n	800123a <QHsm_tran_+0x1b2>
    }
    else {
        /* find superstate of target */
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	4962      	ldr	r1, [pc, #392]	; (8001248 <QHsm_tran_+0x1c0>)
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	4798      	blx	r3

        t = me->temp.fun;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	623b      	str	r3, [r7, #32]

        /* (b) check source==target->super... */
        if (s == t) {
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d102      	bne.n	80010d8 <QHsm_tran_+0x50>
            ip = 0; /* enter the target */
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
 80010d6:	e0b0      	b.n	800123a <QHsm_tran_+0x1b2>
        }
        else {
            /* find superstate of src */
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_);
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	495b      	ldr	r1, [pc, #364]	; (8001248 <QHsm_tran_+0x1c0>)
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	6a3a      	ldr	r2, [r7, #32]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d106      	bne.n	80010f8 <QHsm_tran_+0x70>
                QEP_EXIT_(s, qs_id); /* exit the source */
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	4955      	ldr	r1, [pc, #340]	; (8001244 <QHsm_tran_+0x1bc>)
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	4798      	blx	r3
                ip = 0; /* enter the target */
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
 80010f6:	e0a0      	b.n	800123a <QHsm_tran_+0x1b2>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d104      	bne.n	800110e <QHsm_tran_+0x86>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	494f      	ldr	r1, [pc, #316]	; (8001244 <QHsm_tran_+0x1bc>)
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	4798      	blx	r3
 800110c:	e095      	b.n	800123a <QHsm_tran_+0x1b2>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
                    ip = 1; /* enter target and its superstate */
 8001112:	2301      	movs	r3, #1
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      /* save the superstate of target */
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3304      	adds	r3, #4
 800111a:	6a3a      	ldr	r2, [r7, #32]
 800111c:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	623b      	str	r3, [r7, #32]

                    /* find target->super->super... */
                    QState r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	3304      	adds	r3, #4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4947      	ldr	r1, [pc, #284]	; (8001248 <QHsm_tran_+0x1c0>)
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	4798      	blx	r3
 8001130:	4603      	mov	r3, r0
 8001132:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8001134:	e025      	b.n	8001182 <QHsm_tran_+0xfa>
                        ++ip;
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	3301      	adds	r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; /* store the entry path */
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	4413      	add	r3, r2
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	6892      	ldr	r2, [r2, #8]
 8001148:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	d10f      	bne.n	8001174 <QHsm_tran_+0xec>
                            iq = 1; /* indicate that LCA found */
 8001154:	2301      	movs	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	2b05      	cmp	r3, #5
 800115c:	dd04      	ble.n	8001168 <QHsm_tran_+0xe0>
 800115e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001162:	483a      	ldr	r0, [pc, #232]	; (800124c <QHsm_tran_+0x1c4>)
 8001164:	f7ff fab3 	bl	80006ce <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	3b01      	subs	r3, #1
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; /* terminate loop */
 800116e:	2303      	movs	r3, #3
 8001170:	76fb      	strb	r3, [r7, #27]
 8001172:	e006      	b.n	8001182 <QHsm_tran_+0xfa>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4933      	ldr	r1, [pc, #204]	; (8001248 <QHsm_tran_+0x1c0>)
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	4798      	blx	r3
 800117e:	4603      	mov	r3, r0
 8001180:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8001182:	7efb      	ldrb	r3, [r7, #27]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0d6      	beq.n	8001136 <QHsm_tran_+0xae>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d155      	bne.n	800123a <QHsm_tran_+0x1b2>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	2b05      	cmp	r3, #5
 8001192:	dd04      	ble.n	800119e <QHsm_tran_+0x116>
 8001194:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001198:	482c      	ldr	r0, [pc, #176]	; (800124c <QHsm_tran_+0x1c4>)
 800119a:	f7ff fa98 	bl	80006ce <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	4928      	ldr	r1, [pc, #160]	; (8001244 <QHsm_tran_+0x1bc>)
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; /* LCA NOT found */
 80011aa:	2304      	movs	r3, #4
 80011ac:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	4413      	add	r3, r2
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6a3a      	ldr	r2, [r7, #32]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d108      	bne.n	80011d0 <QHsm_tran_+0x148>
                                r = Q_RET_HANDLED; /* LCA found */
 80011be:	2303      	movs	r3, #3
 80011c0:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; /* do not enter LCA */
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; /* cause termintion of the loop */
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e002      	b.n	80011d6 <QHsm_tran_+0x14e>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	dae8      	bge.n	80011ae <QHsm_tran_+0x126>

                        /* LCA not found? */
                        if (r != Q_RET_HANDLED) {
 80011dc:	7efb      	ldrb	r3, [r7, #27]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d02b      	beq.n	800123a <QHsm_tran_+0x1b2>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = Q_RET_IGNORED; /* keep looping */
 80011e2:	2304      	movs	r3, #4
 80011e4:	76fb      	strb	r3, [r7, #27]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	4916      	ldr	r1, [pc, #88]	; (8001244 <QHsm_tran_+0x1bc>)
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	4798      	blx	r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d103      	bne.n	80011fc <QHsm_tran_+0x174>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	4914      	ldr	r1, [pc, #80]	; (8001248 <QHsm_tran_+0x1c0>)
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	623b      	str	r3, [r7, #32]
                                iq = ip;
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	61fb      	str	r3, [r7, #28]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6a3a      	ldr	r2, [r7, #32]
 8001212:	429a      	cmp	r2, r3
 8001214:	d108      	bne.n	8001228 <QHsm_tran_+0x1a0>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b01      	subs	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1; /* break out of inner loop */
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	61fb      	str	r3, [r7, #28]
                                        /* break out of outer loop */
                                        r = Q_RET_HANDLED;
 8001222:	2303      	movs	r3, #3
 8001224:	76fb      	strb	r3, [r7, #27]
 8001226:	e002      	b.n	800122e <QHsm_tran_+0x1a6>
                                    }
                                    else {
                                        --iq;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	3b01      	subs	r3, #1
 800122c:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	2b00      	cmp	r3, #0
 8001232:	dae8      	bge.n	8001206 <QHsm_tran_+0x17e>
                            } while (r != Q_RET_HANDLED);
 8001234:	7efb      	ldrb	r3, [r7, #27]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d1d5      	bne.n	80011e6 <QHsm_tran_+0x15e>
                    }
                }
            }
        }
    }
    return ip;
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800123c:	4618      	mov	r0, r3
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	080039a0 	.word	0x080039a0
 8001248:	08003998 	.word	0x08003998
 800124c:	08003990 	.word	0x08003990

08001250 <QPSet_insert>:
}

/*! insert element `n` into the set (n = 1..::QF_MAX_ACTIVE) */
static inline void QPSet_insert(QPSet * const me,
    uint_fast8_t const n)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
        me->bits = (me->bits | (1U << (n - 1U)));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3b01      	subs	r3, #1
 8001262:	2101      	movs	r1, #1
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
        }
        else {
            me->bits[1] = (me->bits[1] | ((uint32_t)1U << (n - 33U)));
        }
    #endif
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <QActive_post_>:
/*${QF::QActive::post_} ....................................................*/
bool QActive_post_(QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	603b      	str	r3, [r7, #0]
    Q_UNUSED_PAR(sender); /* when Q_SPY undefined */

    /*! @pre event pointer must be valid */
    Q_REQUIRE_ID(100, e != (QEvt *)0);
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d103      	bne.n	8001298 <QActive_post_+0x1c>
 8001290:	2164      	movs	r1, #100	; 0x64
 8001292:	483d      	ldr	r0, [pc, #244]	; (8001388 <QActive_post_+0x10c>)
 8001294:	f7ff fa1b 	bl	80006ce <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001298:	233f      	movs	r3, #63	; 0x3f
 800129a:	b672      	cpsid	i
 800129c:	f383 8811 	msr	BASEPRI, r3
 80012a0:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	7ddb      	ldrb	r3, [r3, #23]
 80012a6:	75bb      	strb	r3, [r7, #22]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d10e      	bne.n	80012d0 <QActive_post_+0x54>
        if (nFree > 0U) {
 80012b2:	7dbb      	ldrb	r3, [r7, #22]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <QActive_post_+0x42>
            status = true; /* can post */
 80012b8:	2301      	movs	r3, #1
 80012ba:	75fb      	strb	r3, [r7, #23]
 80012bc:	e012      	b.n	80012e4 <QActive_post_+0x68>
        }
        else {
            status = false; /* cannot post */
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(110); /* must be able to post the event */
 80012c2:	2300      	movs	r3, #0
 80012c4:	f383 8811 	msr	BASEPRI, r3
 80012c8:	216e      	movs	r1, #110	; 0x6e
 80012ca:	482f      	ldr	r0, [pc, #188]	; (8001388 <QActive_post_+0x10c>)
 80012cc:	f7ff f9ff 	bl	80006ce <Q_onAssert>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	7dba      	ldrb	r2, [r7, #22]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d902      	bls.n	80012e0 <QActive_post_+0x64>
        status = true; /* can post */
 80012da:	2301      	movs	r3, #1
 80012dc:	75fb      	strb	r3, [r7, #23]
 80012de:	e001      	b.n	80012e4 <QActive_post_+0x68>
    }
    else {
        status = false; /* cannot post, but don't assert */
 80012e0:	2300      	movs	r3, #0
 80012e2:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	789b      	ldrb	r3, [r3, #2]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <QActive_post_+0x7e>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	78db      	ldrb	r3, [r3, #3]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	3301      	adds	r3, #1
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	70da      	strb	r2, [r3, #3]
    }

    if (status) { /* can post the event? */
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d038      	beq.n	8001372 <QActive_post_+0xf6>

        --nFree; /* one free entry just used up */
 8001300:	7dbb      	ldrb	r3, [r7, #22]
 8001302:	3b01      	subs	r3, #1
 8001304:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the volatile */
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	7dba      	ldrb	r2, [r7, #22]
 800130a:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	7e1b      	ldrb	r3, [r3, #24]
 8001310:	7dba      	ldrb	r2, [r7, #22]
 8001312:	429a      	cmp	r2, r3
 8001314:	d202      	bcs.n	800131c <QActive_post_+0xa0>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	7dba      	ldrb	r2, [r7, #22]
 800131a:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d109      	bne.n	8001338 <QActive_post_+0xbc>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	7f1b      	ldrb	r3, [r3, #28]
 800132e:	4619      	mov	r1, r3
 8001330:	4816      	ldr	r0, [pc, #88]	; (800138c <QActive_post_+0x110>)
 8001332:	f7ff ff8d 	bl	8001250 <QPSet_insert>
 8001336:	e018      	b.n	800136a <QActive_post_+0xee>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            me->eQueue.ring[me->eQueue.head] = e;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	7d5b      	ldrb	r3, [r3, #21]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	7d5b      	ldrb	r3, [r3, #21]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <QActive_post_+0xe0>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	7d1a      	ldrb	r2, [r3, #20]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	7d5b      	ldrb	r3, [r3, #21]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	3b01      	subs	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 800136a:	2300      	movs	r3, #0
 800136c:	f383 8811 	msr	BASEPRI, r3
 8001370:	e005      	b.n	800137e <QActive_post_+0x102>
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        QF_CRIT_X_();
 8001372:	2300      	movs	r3, #0
 8001374:	f383 8811 	msr	BASEPRI, r3

    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e); /* recycle the event to avoid a leak */
 8001378:	68b8      	ldr	r0, [r7, #8]
 800137a:	f000 f96d 	bl	8001658 <QF_gc>
    #endif
    }

    return status;
 800137e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	080039b0 	.word	0x080039b0
 800138c:	200011c4 	.word	0x200011c4

08001390 <QActive_postLIFO_>:
/*$define${QF::QActive::postLIFO_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::postLIFO_} ................................................*/
void QActive_postLIFO_(QActive * const me,
    QEvt const * const e)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT_
    QF_CRIT_E_();
 800139a:	233f      	movs	r3, #63	; 0x3f
 800139c:	b672      	cpsid	i
 800139e:	f383 8811 	msr	BASEPRI, r3
 80013a2:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7ddb      	ldrb	r3, [r3, #23]
 80013a8:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT_CRIT_(210, nFree != 0U);
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d106      	bne.n	80013be <QActive_postLIFO_+0x2e>
 80013b0:	2300      	movs	r3, #0
 80013b2:	f383 8811 	msr	BASEPRI, r3
 80013b6:	21d2      	movs	r1, #210	; 0xd2
 80013b8:	4826      	ldr	r0, [pc, #152]	; (8001454 <QActive_postLIFO_+0xc4>)
 80013ba:	f7ff f988 	bl	80006ce <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	789b      	ldrb	r3, [r3, #2]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <QActive_postLIFO_+0x44>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	78db      	ldrb	r3, [r3, #3]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	70da      	strb	r2, [r3, #3]
    }

    --nFree; /* one free entry just used up */
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the volatile */
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7e1b      	ldrb	r3, [r3, #24]
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d202      	bcs.n	80013f0 <QActive_postLIFO_+0x60>
        me->eQueue.nMin = nFree; /* update minimum so far */
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	761a      	strb	r2, [r3, #24]
            QS_onTestPost((QActive *)0, me, e, true);
        }
    #endif

    /* temporary to avoid UB for volatile access */
    QEvt const * const frontEvt  = me->eQueue.frontEvt;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <QActive_postLIFO_+0x80>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7f1b      	ldrb	r3, [r3, #28]
 8001406:	4619      	mov	r1, r3
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <QActive_postLIFO_+0xc8>)
 800140a:	f7ff ff21 	bl	8001250 <QPSet_insert>
 800140e:	e019      	b.n	8001444 <QActive_postLIFO_+0xb4>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7d9b      	ldrb	r3, [r3, #22]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	3301      	adds	r3, #1
 8001418:	b2da      	uxtb	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7d9b      	ldrb	r3, [r3, #22]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7d1b      	ldrb	r3, [r3, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	d102      	bne.n	8001432 <QActive_postLIFO_+0xa2>
            me->eQueue.tail = 0U; /* wrap around */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	759a      	strb	r2, [r3, #22]
        }

        me->eQueue.ring[me->eQueue.tail] = frontEvt;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7d9b      	ldrb	r3, [r3, #22]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 8001444:	2300      	movs	r3, #0
 8001446:	f383 8811 	msr	BASEPRI, r3
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	080039b0 	.word	0x080039b0
 8001458:	200011c4 	.word	0x200011c4

0800145c <QActive_get_>:
/*$enddef${QF::QActive::postLIFO_} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QF::QActive::get_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::get_} .....................................................*/
QEvt const * QActive_get_(QActive * const me) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001464:	233f      	movs	r3, #63	; 0x3f
 8001466:	b672      	cpsid	i
 8001468:	f383 8811 	msr	BASEPRI, r3
 800146c:	b662      	cpsie	i
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d103      	bne.n	800147e <QActive_get_+0x22>
 8001476:	2100      	movs	r1, #0
 8001478:	4823      	ldr	r0, [pc, #140]	; (8001508 <QActive_get_+0xac>)
 800147a:	f7ff f928 	bl	80006ce <Q_onAssert>

    /* always remove event from the front */
    QEvt const * const e = me->eQueue.frontEvt;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; /* volatile into tmp */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7ddb      	ldrb	r3, [r3, #23]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7afa      	ldrb	r2, [r7, #11]
 8001492:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7d1b      	ldrb	r3, [r3, #20]
 8001498:	7afa      	ldrb	r2, [r7, #11]
 800149a:	429a      	cmp	r2, r3
 800149c:	d81a      	bhi.n	80014d4 <QActive_get_+0x78>

        /* remove event from the tail */
        me->eQueue.frontEvt = me->eQueue.ring[me->eQueue.tail];
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7d9b      	ldrb	r3, [r3, #22]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7d9b      	ldrb	r3, [r3, #22]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d103      	bne.n	80014c4 <QActive_get_+0x68>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7d1a      	ldrb	r2, [r3, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7d9b      	ldrb	r3, [r3, #22]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	759a      	strb	r2, [r3, #22]
 80014d2:	e010      	b.n	80014f6 <QActive_get_+0x9a>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 80014da:	7afa      	ldrb	r2, [r7, #11]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7d1b      	ldrb	r3, [r3, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d007      	beq.n	80014f6 <QActive_get_+0x9a>
 80014e6:	2300      	movs	r3, #0
 80014e8:	f383 8811 	msr	BASEPRI, r3
 80014ec:	f44f 719b 	mov.w	r1, #310	; 0x136
 80014f0:	4805      	ldr	r0, [pc, #20]	; (8001508 <QActive_get_+0xac>)
 80014f2:	f7ff f8ec 	bl	80006ce <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 80014f6:	2300      	movs	r3, #0
 80014f8:	f383 8811 	msr	BASEPRI, r3
    return e;
 80014fc:	68fb      	ldr	r3, [r7, #12]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	080039b0 	.word	0x080039b0

0800150c <QF_poolInit>:
/*${QF::QF-dyn::poolInit} ..................................................*/
void QF_poolInit(
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const evtSize)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
    /*! @pre cannot exceed the number of available memory pools */
    Q_REQUIRE_ID(200, QF_maxPool_ < QF_MAX_EPOOL);
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <QF_poolInit+0x78>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d903      	bls.n	8001528 <QF_poolInit+0x1c>
 8001520:	21c8      	movs	r1, #200	; 0xc8
 8001522:	4819      	ldr	r0, [pc, #100]	; (8001588 <QF_poolInit+0x7c>)
 8001524:	f7ff f8d3 	bl	80006ce <Q_onAssert>

    /*! @pre please initialize event pools in ascending order of evtSize: */
    Q_REQUIRE_ID(201, (QF_maxPool_ == 0U)
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <QF_poolInit+0x78>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d012      	beq.n	8001556 <QF_poolInit+0x4a>
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <QF_poolInit+0x78>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	4915      	ldr	r1, [pc, #84]	; (800158c <QF_poolInit+0x80>)
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	330c      	adds	r3, #12
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4293      	cmp	r3, r2
 800154c:	d803      	bhi.n	8001556 <QF_poolInit+0x4a>
 800154e:	21c9      	movs	r1, #201	; 0xc9
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <QF_poolInit+0x7c>)
 8001552:	f7ff f8bc 	bl	80006ce <Q_onAssert>
        || (QF_EPOOL_EVENT_SIZE_(QF_ePool_[QF_maxPool_ - 1U])
            < evtSize));

    /* perform the platform-dependent initialization of the pool */
    QF_EPOOL_INIT_(QF_ePool_[QF_maxPool_], poolSto, poolSize, evtSize);
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <QF_poolInit+0x78>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <QF_poolInit+0x80>)
 8001564:	1898      	adds	r0, r3, r2
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	68f9      	ldr	r1, [r7, #12]
 800156c:	f000 f8b8 	bl	80016e0 <QMPool_init>
    ++QF_maxPool_; /* one more pool */
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <QF_poolInit+0x78>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	4a03      	ldr	r2, [pc, #12]	; (8001584 <QF_poolInit+0x78>)
 8001578:	6013      	str	r3, [r2, #0]
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)(((uint8_t)'0' + QF_maxPool_) & 0x7FU);
        QS_obj_dict_pre_(&QF_ePool_[QF_maxPool_ - 1U], (char const *)obj_name);
    }
    #endif /* Q_SPY*/
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20001100 	.word	0x20001100
 8001588:	080039b8 	.word	0x080039b8
 800158c:	20001104 	.word	0x20001104

08001590 <QF_newX_>:
/*${QF::QF-dyn::newX_} .....................................................*/
QEvt * QF_newX_(
    uint_fast16_t const evtSize,
    uint_fast16_t const margin,
    enum_t const sig)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
    uint_fast8_t idx;

    /* find the pool index that fits the requested event size ... */
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e00f      	b.n	80015c2 <QF_newX_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_ePool_[idx])) {
 80015a2:	492a      	ldr	r1, [pc, #168]	; (800164c <QF_newX_+0xbc>)
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	330c      	adds	r3, #12
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d908      	bls.n	80015ce <QF_newX_+0x3e>
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3301      	adds	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <QF_newX_+0xc0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3ea      	bcc.n	80015a2 <QF_newX_+0x12>
 80015cc:	e000      	b.n	80015d0 <QF_newX_+0x40>
            break;
 80015ce:	bf00      	nop
        }
    }
    /* cannot run out of registered pools */
    Q_ASSERT_ID(310, idx < QF_maxPool_);
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <QF_newX_+0xc0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d304      	bcc.n	80015e4 <QF_newX_+0x54>
 80015da:	f44f 719b 	mov.w	r1, #310	; 0x136
 80015de:	481d      	ldr	r0, [pc, #116]	; (8001654 <QF_newX_+0xc4>)
 80015e0:	f7ff f875 	bl	80006ce <Q_onAssert>
    #ifdef Q_SPY
    QF_EPOOL_GET_(QF_ePool_[idx], e,
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + idx + 1U);
    #else
    QF_EPOOL_GET_(QF_ePool_[idx], e,
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <QF_newX_+0xbc>)
 80015f0:	1898      	adds	r0, r3, r2
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d001      	beq.n	8001600 <QF_newX_+0x70>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	e000      	b.n	8001602 <QF_newX_+0x72>
 8001600:	2300      	movs	r3, #0
 8001602:	2200      	movs	r2, #0
 8001604:	4619      	mov	r1, r3
 8001606:	f000 f8dd 	bl	80017c4 <QMPool_get>
 800160a:	6138      	str	r0, [r7, #16]
                  ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
    #endif

    /* was e allocated correctly? */
    QS_CRIT_STAT_
    if (e != (QEvt *)0) {
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00d      	beq.n	800162e <QF_newX_+0x9e>
        e->sig = (QSignal)sig;     /* set signal for this event */
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	b29a      	uxth	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	801a      	strh	r2, [r3, #0]
        e->poolId_ = (uint8_t)(idx + 1U); /* store the pool ID */
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	3301      	adds	r3, #1
 8001620:	b2da      	uxtb	r2, r3
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	709a      	strb	r2, [r3, #2]
        e->refCtr_ = 0U; /* set the reference counter to 0 */
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	2200      	movs	r2, #0
 800162a:	70da      	strb	r2, [r3, #3]
 800162c:	e009      	b.n	8001642 <QF_newX_+0xb2>
    else {
        /* This assertion means that the event allocation failed,
         * and this failure cannot be tolerated. The most frequent
         * reason is an event leak in the application.
         */
        Q_ASSERT_ID(320, margin != QF_NO_MARGIN);
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001634:	4293      	cmp	r3, r2
 8001636:	d104      	bne.n	8001642 <QF_newX_+0xb2>
 8001638:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <QF_newX_+0xc4>)
 800163e:	f7ff f846 	bl	80006ce <Q_onAssert>
            QS_TIME_PRE_();        /* timestamp */
            QS_EVS_PRE_(evtSize);  /* the size of the event */
            QS_SIG_PRE_(sig);      /* the signal of the event */
        QS_END_PRE_()
    }
    return e; /* can't be NULL if we can't tolerate failed allocation */
 8001642:	693b      	ldr	r3, [r7, #16]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20001104 	.word	0x20001104
 8001650:	20001100 	.word	0x20001100
 8001654:	080039b8 	.word	0x080039b8

08001658 <QF_gc>:

/*${QF::QF-dyn::gc} ........................................................*/
void QF_gc(QEvt const * const e) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	789b      	ldrb	r3, [r3, #2]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d031      	beq.n	80016cc <QF_gc+0x74>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 8001668:	233f      	movs	r3, #63	; 0x3f
 800166a:	b672      	cpsid	i
 800166c:	f383 8811 	msr	BASEPRI, r3
 8001670:	b662      	cpsie	i

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	78db      	ldrb	r3, [r3, #3]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d90a      	bls.n	8001692 <QF_gc+0x3a>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QF_EVT_REF_CTR_DEC_(e); /* decrement the ref counter */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	78db      	ldrb	r3, [r3, #3]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	70da      	strb	r2, [r3, #3]

            QF_CRIT_X_();
 800168a:	2300      	movs	r3, #0
 800168c:	f383 8811 	msr	BASEPRI, r3
    #else
            QF_EPOOL_PUT_(QF_ePool_[idx], QF_CONST_CAST_(QEvt*, e), 0U);
    #endif
        }
    }
}
 8001690:	e01c      	b.n	80016cc <QF_gc+0x74>
            uint_fast8_t const idx = (uint_fast8_t)e->poolId_ - 1U;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	789b      	ldrb	r3, [r3, #2]
 8001696:	3b01      	subs	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 800169a:	2300      	movs	r3, #0
 800169c:	f383 8811 	msr	BASEPRI, r3
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <QF_gc+0x7c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d304      	bcc.n	80016b4 <QF_gc+0x5c>
 80016aa:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <QF_gc+0x80>)
 80016b0:	f7ff f80d 	bl	80006ce <Q_onAssert>
            QF_EPOOL_PUT_(QF_ePool_[idx], QF_CONST_CAST_(QEvt*, e), 0U);
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <QF_gc+0x84>)
 80016c0:	4413      	add	r3, r2
 80016c2:	2200      	movs	r2, #0
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f8e8 	bl	800189c <QMPool_put>
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20001100 	.word	0x20001100
 80016d8:	080039b8 	.word	0x080039b8
 80016dc:	20001104 	.word	0x20001104

080016e0 <QMPool_init>:
/*${QF::QMPool::init} ......................................................*/
void QMPool_init(QMPool * const me,
    void * const poolSto,
    uint_fast32_t poolSize,
    uint_fast16_t blockSize)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
    /*! @pre The memory block must be valid
    * and the poolSize must fit at least one free block
    * and the blockSize must not be too close to the top of the dynamic range
    */
    Q_REQUIRE_ID(100, (poolSto != (void *)0)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <QMPool_init+0x22>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d903      	bls.n	8001702 <QMPool_init+0x22>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f113 0f05 	cmn.w	r3, #5
 8001700:	d903      	bls.n	800170a <QMPool_init+0x2a>
 8001702:	2164      	movs	r1, #100	; 0x64
 8001704:	482e      	ldr	r0, [pc, #184]	; (80017c0 <QMPool_init+0xe0>)
 8001706:	f7fe ffe2 	bl	80006ce <Q_onAssert>
            && (poolSize >= (uint_fast32_t)sizeof(QFreeBlock))
            && ((uint_fast16_t)(blockSize + sizeof(QFreeBlock)) > blockSize));

    me->free_head = poolSto;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	609a      	str	r2, [r3, #8]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2204      	movs	r2, #4
 8001714:	819a      	strh	r2, [r3, #12]

    /* #free blocks that fit in one memory block */
    uint_fast16_t nblocks = 1U;
 8001716:	2301      	movs	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 800171a:	e008      	b.n	800172e <QMPool_init+0x4e>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	899b      	ldrh	r3, [r3, #12]
 8001720:	3304      	adds	r3, #4
 8001722:	b29a      	uxth	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	899a      	ldrh	r2, [r3, #12]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	429a      	cmp	r2, r3
 8001738:	d3f0      	bcc.n	800171c <QMPool_init+0x3c>
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	899b      	ldrh	r3, [r3, #12]
 800173e:	603b      	str	r3, [r7, #0]

    /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT_ID(110, poolSize >= blockSize);
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d203      	bcs.n	8001750 <QMPool_init+0x70>
 8001748:	216e      	movs	r1, #110	; 0x6e
 800174a:	481d      	ldr	r0, [pc, #116]	; (80017c0 <QMPool_init+0xe0>)
 800174c:	f7fe ffbf 	bl	80006ce <Q_onAssert>

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	607b      	str	r3, [r7, #4]
    me->nTot  = 1U; /* the last block already in the pool */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	81da      	strh	r2, [r3, #14]

    /* start at the head of the free list */
    QFreeBlock *fb = (QFreeBlock *)me->free_head;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	613b      	str	r3, [r7, #16]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
 8001764:	e012      	b.n	800178c <QMPool_init+0xac>
        fb->next = &fb[nblocks]; /* point next link to next block */
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	441a      	add	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	613b      	str	r3, [r7, #16]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	607b      	str	r3, [r7, #4]
        ++me->nTot;              /* increment the number of blocks so far */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	89db      	ldrh	r3, [r3, #14]
 8001784:	3301      	adds	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	81da      	strh	r2, [r3, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d2e8      	bcs.n	8001766 <QMPool_init+0x86>
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	89da      	ldrh	r2, [r3, #14]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	821a      	strh	r2, [r3, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	89da      	ldrh	r2, [r3, #14]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	825a      	strh	r2, [r3, #18]
    me->start = poolSto;         /* the original start this pool buffer */
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	601a      	str	r2, [r3, #0]
    me->end   = fb;              /* the last block in this pool */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	605a      	str	r2, [r3, #4]
}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	080039c0 	.word	0x080039c0

080017c4 <QMPool_get>:

/*${QF::QMPool::get} .......................................................*/
void * QMPool_get(QMPool * const me,
    uint_fast16_t const margin,
    uint_fast8_t const qs_id)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* when Q_SPY undefined */

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80017d0:	233f      	movs	r3, #63	; 0x3f
 80017d2:	b672      	cpsid	i
 80017d4:	f383 8811 	msr	BASEPRI, r3
 80017d8:	b662      	cpsie	i

    /* have more free blocks than the requested margin? */
    QFreeBlock *fb;
    if (me->nFree > (QMPoolCtr)margin) {
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8a1b      	ldrh	r3, [r3, #16]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d94d      	bls.n	8001884 <QMPool_get+0xc0>
        void *fb_next;
        fb = (QFreeBlock *)me->free_head; /* get a free block */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	617b      	str	r3, [r7, #20]

        /* the pool has some free blocks, so a free block must be available */
        Q_ASSERT_CRIT_(310, fb != (QFreeBlock *)0);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <QMPool_get+0x40>
 80017f4:	2300      	movs	r3, #0
 80017f6:	f383 8811 	msr	BASEPRI, r3
 80017fa:	f44f 719b 	mov.w	r1, #310	; 0x136
 80017fe:	4826      	ldr	r0, [pc, #152]	; (8001898 <QMPool_get+0xd4>)
 8001800:	f7fe ff65 	bl	80006ce <Q_onAssert>

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	613b      	str	r3, [r7, #16]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8a1b      	ldrh	r3, [r3, #16]
 800180e:	b29b      	uxth	r3, r3
 8001810:	3b01      	subs	r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	821a      	strh	r2, [r3, #16]
        if (me->nFree == 0U) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8a1b      	ldrh	r3, [r3, #16]
 800181c:	b29b      	uxth	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10e      	bne.n	8001840 <QMPool_get+0x7c>
            /* pool is becoming empty, so the next free block must be NULL */
            Q_ASSERT_CRIT_(320, fb_next == (QFreeBlock *)0);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d007      	beq.n	8001838 <QMPool_get+0x74>
 8001828:	2300      	movs	r3, #0
 800182a:	f383 8811 	msr	BASEPRI, r3
 800182e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001832:	4819      	ldr	r0, [pc, #100]	; (8001898 <QMPool_get+0xd4>)
 8001834:	f7fe ff4b 	bl	80006ce <Q_onAssert>

            me->nMin = 0U; /* remember that the pool got empty */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	825a      	strh	r2, [r3, #18]
 800183e:	e01d      	b.n	800187c <QMPool_get+0xb8>
            *
            * NOTE: the next free block pointer can fall out of range
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */
            Q_ASSERT_CRIT_(330, QF_PTR_RANGE_(fb_next, me->start, me->end));
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	429a      	cmp	r2, r3
 8001848:	d304      	bcc.n	8001854 <QMPool_get+0x90>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d907      	bls.n	8001864 <QMPool_get+0xa0>
 8001854:	2300      	movs	r3, #0
 8001856:	f383 8811 	msr	BASEPRI, r3
 800185a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800185e:	480e      	ldr	r0, [pc, #56]	; (8001898 <QMPool_get+0xd4>)
 8001860:	f7fe ff35 	bl	80006ce <Q_onAssert>

            /* is the number of free blocks the new minimum so far? */
            if (me->nMin > me->nFree) {
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8a5a      	ldrh	r2, [r3, #18]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8a1b      	ldrh	r3, [r3, #16]
 800186c:	b29b      	uxth	r3, r3
 800186e:	429a      	cmp	r2, r3
 8001870:	d904      	bls.n	800187c <QMPool_get+0xb8>
                me->nMin = me->nFree; /* remember the new minimum */
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8a1b      	ldrh	r3, [r3, #16]
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	825a      	strh	r2, [r3, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	e001      	b.n	8001888 <QMPool_get+0xc4>
            QS_MPC_PRE_(me->nMin);  /* min # free blocks ever in the pool */
        QS_END_NOCRIT_PRE_()
    }
    /* don't have enough free blocks at this point */
    else {
        fb = (QFreeBlock *)0;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
            QS_OBJ_PRE_(me);        /* this memory pool */
            QS_MPC_PRE_(me->nFree); /* # of free blocks in the pool */
            QS_MPC_PRE_(margin);    /* the requested margin */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 8001888:	2300      	movs	r3, #0
 800188a:	f383 8811 	msr	BASEPRI, r3

    return fb;  /* return the block or NULL pointer to the caller */
 800188e:	697b      	ldr	r3, [r7, #20]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	080039c0 	.word	0x080039c0

0800189c <QMPool_put>:

/*${QF::QMPool::put} .......................................................*/
void QMPool_put(QMPool * const me,
    void * const b,
    uint_fast8_t const qs_id)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* when Q_SPY undefined */

    /*! @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8a1b      	ldrh	r3, [r3, #16]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	89db      	ldrh	r3, [r3, #14]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d209      	bcs.n	80018ca <QMPool_put+0x2e>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d304      	bcc.n	80018ca <QMPool_put+0x2e>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d903      	bls.n	80018d2 <QMPool_put+0x36>
 80018ca:	21c8      	movs	r1, #200	; 0xc8
 80018cc:	480e      	ldr	r0, [pc, #56]	; (8001908 <QMPool_put+0x6c>)
 80018ce:	f7fe fefe 	bl	80006ce <Q_onAssert>
                      && QF_PTR_RANGE_(b, me->start, me->end));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80018d2:	233f      	movs	r3, #63	; 0x3f
 80018d4:	b672      	cpsid	i
 80018d6:	f383 8811 	msr	BASEPRI, r3
 80018da:	b662      	cpsie	i
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	609a      	str	r2, [r3, #8]
    ++me->nFree;            /* one more free block in this pool */
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8a1b      	ldrh	r3, [r3, #16]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 80018f8:	2300      	movs	r3, #0
 80018fa:	f383 8811 	msr	BASEPRI, r3
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	080039c0 	.word	0x080039c0

0800190c <QF_bzero>:

/*${QF::QF-pkg::bzero} .....................................................*/
void QF_bzero(
    void * const start,
    uint_fast16_t const len)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	e008      	b.n	8001932 <QF_bzero+0x26>
        *ptr = 0U;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
        ++ptr;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3301      	adds	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	3b01      	subs	r3, #1
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f3      	bne.n	8001920 <QF_bzero+0x14>
    }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <QActive_ctor>:
/*$define${QF::QActive::ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::ctor} .....................................................*/
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
    };
    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 8001952:	2120      	movs	r1, #32
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffd9 	bl	800190c <QF_bzero>

    QHsm_ctor(&me->super, initial); /* explicitly call superclass' ctor */
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6839      	ldr	r1, [r7, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fa28 	bl	8000db4 <QHsm_ctor>
    me->super.vptr = &vtable.super; /* hook the vptr to QActive vtable */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a03      	ldr	r2, [pc, #12]	; (8001974 <QActive_ctor+0x2c>)
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	080039d0 	.word	0x080039d0

08001978 <QActive_register_>:
/*$enddef${QF::QActive::ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QF::QActive::register_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::register_} ................................................*/
void QActive_register_(QActive * const me) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    if (me->pthre == 0U) { /* preemption-threshold not defined? */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7f5b      	ldrb	r3, [r3, #29]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d103      	bne.n	8001990 <QActive_register_+0x18>
        me->pthre = me->prio; /* apply the default */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7f1a      	ldrb	r2, [r3, #28]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	775a      	strb	r2, [r3, #29]
    /*! @pre
    * 1. the "QF-priority" of the AO must be in range
    * 2. the "QF-priority" must not be already in use (unique priority)
    * 3. the "QF-priority" must not exceed the "preemption-threshold"
    */
    Q_REQUIRE_ID(100, (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7f1b      	ldrb	r3, [r3, #28]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d011      	beq.n	80019bc <QActive_register_+0x44>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7f1b      	ldrb	r3, [r3, #28]
 800199c:	2b20      	cmp	r3, #32
 800199e:	d80d      	bhi.n	80019bc <QActive_register_+0x44>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7f1b      	ldrb	r3, [r3, #28]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <QActive_register_+0xfc>)
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <QActive_register_+0x44>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7f1a      	ldrb	r2, [r3, #28]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7f5b      	ldrb	r3, [r3, #29]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d903      	bls.n	80019c4 <QActive_register_+0x4c>
 80019bc:	2164      	movs	r1, #100	; 0x64
 80019be:	482e      	ldr	r0, [pc, #184]	; (8001a78 <QActive_register_+0x100>)
 80019c0:	f7fe fe85 	bl	80006ce <Q_onAssert>
                      && (QActive_registry_[me->prio] == (QActive *)0)
                      && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7f5b      	ldrb	r3, [r3, #29]
 80019c8:	73fb      	strb	r3, [r7, #15]
    uint8_t next_thre = me->pthre;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7f5b      	ldrb	r3, [r3, #29]
 80019ce:	73bb      	strb	r3, [r7, #14]
    uint_fast8_t p;

    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7f1b      	ldrb	r3, [r3, #28]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	e00f      	b.n	80019fa <QActive_register_+0x82>
        if (QActive_registry_[p] != (QActive *)0) {
 80019da:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <QActive_register_+0xfc>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <QActive_register_+0x7c>
            prev_thre = QActive_registry_[p]->pthre;
 80019e6:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <QActive_register_+0xfc>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ee:	7f5b      	ldrb	r3, [r3, #29]
 80019f0:	73fb      	strb	r3, [r7, #15]
            break;
 80019f2:	e005      	b.n	8001a00 <QActive_register_+0x88>
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ec      	bne.n	80019da <QActive_register_+0x62>
        }
    }
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7f1b      	ldrb	r3, [r3, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	e00f      	b.n	8001a2a <QActive_register_+0xb2>
        if (QActive_registry_[p] != (QActive *)0) {
 8001a0a:	4a1a      	ldr	r2, [pc, #104]	; (8001a74 <QActive_register_+0xfc>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <QActive_register_+0xac>
            next_thre = QActive_registry_[p]->pthre;
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <QActive_register_+0xfc>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	7f5b      	ldrb	r3, [r3, #29]
 8001a20:	73bb      	strb	r3, [r7, #14]
            break;
 8001a22:	e005      	b.n	8001a30 <QActive_register_+0xb8>
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d9ec      	bls.n	8001a0a <QActive_register_+0x92>

    /*! @post
    * 1. the preceding pre-thre must not exceed the preemption-threshold
    * 2. the preemption-threshold must not exceed the next pre-thre
    */
    Q_ENSURE_ID(101, (prev_thre <= me->pthre) && (me->pthre <= next_thre));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7f5b      	ldrb	r3, [r3, #29]
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d804      	bhi.n	8001a44 <QActive_register_+0xcc>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7f5b      	ldrb	r3, [r3, #29]
 8001a3e:	7bba      	ldrb	r2, [r7, #14]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d203      	bcs.n	8001a4c <QActive_register_+0xd4>
 8001a44:	2165      	movs	r1, #101	; 0x65
 8001a46:	480c      	ldr	r0, [pc, #48]	; (8001a78 <QActive_register_+0x100>)
 8001a48:	f7fe fe41 	bl	80006ce <Q_onAssert>

    #endif // Q_NASSERT

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001a4c:	233f      	movs	r3, #63	; 0x3f
 8001a4e:	b672      	cpsid	i
 8001a50:	f383 8811 	msr	BASEPRI, r3
 8001a54:	b662      	cpsie	i
    /* register the AO at the "QF-priority" */
    QActive_registry_[me->prio] = me;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7f1b      	ldrb	r3, [r3, #28]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <QActive_register_+0xfc>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    QF_CRIT_X_();
 8001a64:	2300      	movs	r3, #0
 8001a66:	f383 8811 	msr	BASEPRI, r3
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20001140 	.word	0x20001140
 8001a78:	080039c8 	.word	0x080039c8

08001a7c <QEQueue_init>:

/*${QF::QEQueue::init} .....................................................*/
void QEQueue_init(QEQueue * const me,
    QEvt const * qSto[],
    uint_fast16_t const qLen)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <QEQueue_init+0x32>
        me->head = 0U;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	7adb      	ldrb	r3, [r3, #11]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	731a      	strb	r2, [r3, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <QTimeEvt_ctorX>:
/*${QF::QTimeEvt::ctorX} ...................................................*/
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
    /*! @pre The signal must be valid and the tick rate in range */
    Q_REQUIRE_ID(300, (sig != 0)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <QTimeEvt_ctorX+0x1a>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d904      	bls.n	8001af4 <QTimeEvt_ctorX+0x24>
 8001aea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001aee:	480f      	ldr	r0, [pc, #60]	; (8001b2c <QTimeEvt_ctorX+0x5c>)
 8001af0:	f7fe fded 	bl	80006ce <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
    me->interval  = 0U;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
    me->super.sig = (QSignal)sig;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with QTimeEvt_ctor(), the active object
    * pointer can be uninitialized (NULL) and is NOT validated in the
    * precondition. The active object pointer is validated in preconditions
    * to QTimeEvt_arm_() and QTimeEvt_rearm().
    */
    me->act       = act;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	70da      	strb	r2, [r3, #3]
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	080039e4 	.word	0x080039e4

08001b30 <QTimeEvt_armX>:

/*${QF::QTimeEvt::armX} ....................................................*/
void QTimeEvt_armX(QTimeEvt * const me,
    QTimeEvtCtr const nTicks,
    QTimeEvtCtr const interval)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	78db      	ldrb	r3, [r3, #3]
 8001b40:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	617b      	str	r3, [r7, #20]
    QTimeEvtCtr const ctr = me->ctr;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	613b      	str	r3, [r7, #16]
    #endif

    /*! @pre the host AO must be valid, time evnet must be disarmed,
    * number of clock ticks cannot be zero, and the signal must be valid.
    */
    Q_REQUIRE_ID(400, (me->act != (void *)0)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00c      	beq.n	8001b70 <QTimeEvt_armX+0x40>
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <QTimeEvt_armX+0x40>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d006      	beq.n	8001b70 <QTimeEvt_armX+0x40>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d803      	bhi.n	8001b70 <QTimeEvt_armX+0x40>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d804      	bhi.n	8001b7a <QTimeEvt_armX+0x4a>
 8001b70:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001b74:	481b      	ldr	r0, [pc, #108]	; (8001be4 <QTimeEvt_armX+0xb4>)
 8001b76:	f7fe fdaa 	bl	80006ce <Q_onAssert>
    #ifdef Q_NASSERT
    (void)ctr; /* avoid compiler warning about unused variable */
    #endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001b7a:	233f      	movs	r3, #63	; 0x3f
 8001b7c:	b672      	cpsid	i
 8001b7e:	f383 8811 	msr	BASEPRI, r3
 8001b82:	b662      	cpsie	i
    me->ctr = nTicks;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	60da      	str	r2, [r3, #12]
    me->interval = interval;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	611a      	str	r2, [r3, #16]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in QTimeEvt_tick_().
    */
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	78db      	ldrb	r3, [r3, #3]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db1c      	blt.n	8001bd6 <QTimeEvt_armX+0xa6>
        me->super.refCtr_ |= QTE_IS_LINKED; /* mark as linked */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	78db      	ldrb	r3, [r3, #3]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QTimeEvt_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QTimeEvt_tick_()
        * function.
        */
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8001bac:	490e      	ldr	r1, [pc, #56]	; (8001be8 <QTimeEvt_armX+0xb8>)
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	3308      	adds	r3, #8
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 8001bc2:	4909      	ldr	r1, [pc, #36]	; (8001be8 <QTimeEvt_armX+0xb8>)
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3308      	adds	r3, #8
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f383 8811 	msr	BASEPRI, r3
}
 8001bdc:	bf00      	nop
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	080039e4 	.word	0x080039e4
 8001be8:	200011c8 	.word	0x200011c8

08001bec <QTimeEvt_tick_>:

/*${QF::QTimeEvt::tick_} ...................................................*/
void QTimeEvt_tick_(
    uint_fast8_t const tickRate,
    void const * const sender)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(sender); /* when Q_SPY undefined */

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4a4a      	ldr	r2, [pc, #296]	; (8001d2c <QTimeEvt_tick_+0x140>)
 8001c02:	4413      	add	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001c06:	233f      	movs	r3, #63	; 0x3f
 8001c08:	b672      	cpsid	i
 8001c0a:	f383 8811 	msr	BASEPRI, r3
 8001c0e:	b662      	cpsie	i
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d12c      	bne.n	8001c76 <QTimeEvt_tick_+0x8a>

            /* any new time events armed since the last QTimeEvt_tick_()? */
            if (QTimeEvt_timeEvtHead_[tickRate].act != (void *)0) {
 8001c1c:	4943      	ldr	r1, [pc, #268]	; (8001d2c <QTimeEvt_tick_+0x140>)
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d074      	beq.n	8001d1c <QTimeEvt_tick_+0x130>

                /* sanity check */
                Q_ASSERT_CRIT_(110, prev != (QTimeEvt *)0);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d106      	bne.n	8001c46 <QTimeEvt_tick_+0x5a>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f383 8811 	msr	BASEPRI, r3
 8001c3e:	216e      	movs	r1, #110	; 0x6e
 8001c40:	483b      	ldr	r0, [pc, #236]	; (8001d30 <QTimeEvt_tick_+0x144>)
 8001c42:	f7fe fd44 	bl	80006ce <Q_onAssert>
                prev->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8001c46:	4939      	ldr	r1, [pc, #228]	; (8001d2c <QTimeEvt_tick_+0x140>)
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	3308      	adds	r3, #8
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	605a      	str	r2, [r3, #4]
                QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 8001c5c:	4933      	ldr	r1, [pc, #204]	; (8001d2c <QTimeEvt_tick_+0x140>)
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	613b      	str	r3, [r7, #16]
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d111      	bne.n	8001ca2 <QTimeEvt_tick_+0xb6>
            prev->next = t->next;
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	78db      	ldrb	r3, [r3, #3]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	70da      	strb	r2, [r3, #3]
            /* do NOT advance the prev pointer */
            QF_CRIT_X_(); /* exit crit. section to reduce latency */
 8001c96:	2300      	movs	r3, #0
 8001c98:	f383 8811 	msr	BASEPRI, r3

            /* prevent merging critical sections, see NOTE1 below  */
            QF_CRIT_EXIT_NOP();
 8001c9c:	f3bf 8f6f 	isb	sy
 8001ca0:	e036      	b.n	8001d10 <QTimeEvt_tick_+0x124>
        }
        else {
            --t->ctr;
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	1e5a      	subs	r2, r3, #1
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	60da      	str	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == 0U) {
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d126      	bne.n	8001d02 <QTimeEvt_tick_+0x116>
                /* temporary for volatile */
                QActive * const act = (QActive *)t->act;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	60fb      	str	r3, [r7, #12]

                /* periodic time evt? */
                if (t->interval != 0U) {
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <QTimeEvt_tick_+0xe4>
                    t->ctr = t->interval; /* rearm the time event */
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	60da      	str	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e00b      	b.n	8001ce8 <QTimeEvt_tick_+0xfc>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	78db      	ldrb	r3, [r3, #3]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	70da      	strb	r2, [r3, #3]
                    QS_SIG_PRE_(t->super.sig); /* signal of this time event */
                    QS_OBJ_PRE_(act);          /* the target AO */
                    QS_U8_PRE_(tickRate);      /* tick rate */
                QS_END_NOCRIT_PRE_()

                QF_CRIT_X_(); /* exit critical section before posting */
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f383 8811 	msr	BASEPRI, r3

                /* QACTIVE_POST() asserts internally if the queue overflows */
                QACTIVE_POST(act, &t->super, sender);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68dc      	ldr	r4, [r3, #12]
 8001cf4:	6939      	ldr	r1, [r7, #16]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	47a0      	blx	r4
 8001d00:	e006      	b.n	8001d10 <QTimeEvt_tick_+0x124>
            }
            else {
                prev = t;         /* advance to this time event */
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	617b      	str	r3, [r7, #20]
                QF_CRIT_X_();  /* exit crit. section to reduce latency */
 8001d06:	2300      	movs	r3, #0
 8001d08:	f383 8811 	msr	BASEPRI, r3
                * two adjacent critical sections would be merged. The
                * QF_CRIT_EXIT_NOP() macro contains minimal code required
                * to prevent such merging of critical sections in QF ports,
                * in which it can occur.
                */
                QF_CRIT_EXIT_NOP();
 8001d0c:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_E_(); /* re-enter crit. section to continue */
 8001d10:	233f      	movs	r3, #63	; 0x3f
 8001d12:	b672      	cpsid	i
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	b662      	cpsie	i
    for (;;) {
 8001d1a:	e779      	b.n	8001c10 <QTimeEvt_tick_+0x24>
                break; /* all currently armed time evts. processed */
 8001d1c:	bf00      	nop
    }
    QF_CRIT_X_();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f383 8811 	msr	BASEPRI, r3
}
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd90      	pop	{r4, r7, pc}
 8001d2c:	200011c8 	.word	0x200011c8
 8001d30:	080039e4 	.word	0x080039e4

08001d34 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet const * const me) {
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
        return (me->bits != 0U);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf14      	ite	ne
 8001d44:	2301      	movne	r3, #1
 8001d46:	2300      	moveq	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <QPSet_remove>:

/*! Remove element `n` from the set (n = 1U..::QF_MAX_ACTIVE) */
static inline void QPSet_remove(QPSet * const me,
    uint_fast8_t const n)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
        me->bits = (me->bits &
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
            (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43db      	mvns	r3, r3
        me->bits = (me->bits &
 8001d70:	401a      	ands	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
        }
        else {
            (me->bits[1] = (me->bits[1] & ~((uint32_t)1U << (n - 33U))));
        }
    #endif
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <QPSet_findMax>:

/*! Find the maximum element in the set, returns zero if the set is empty */
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
    #if (QF_MAX_ACTIVE <= 32)
        return QF_LOG2(me->bits);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	f1c3 0320 	rsb	r3, r3, #32
    #else
        return (me->bits[1] != 0U)
            ? (QF_LOG2(me->bits[1]) + 32U)
            : (QF_LOG2(me->bits[0]));
    #endif
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <QF_init>:
/*$define${QV::QV-base} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*$enddef${QV::QV-base} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QV::QF-cust} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QV::QF-cust::init} .....................................................*/
void QF_init(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
    #if (QF_MAX_EPOOL > 0U)
    QF_maxPool_ = 0U;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <QF_init+0x2c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
    #endif

    QF_bzero(&QTimeEvt_timeEvtHead_[0], sizeof(QTimeEvt_timeEvtHead_));
 8001dae:	2128      	movs	r1, #40	; 0x28
 8001db0:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <QF_init+0x30>)
 8001db2:	f7ff fdab 	bl	800190c <QF_bzero>
    QF_bzero(&QActive_registry_[0],     sizeof(QActive_registry_));
 8001db6:	2184      	movs	r1, #132	; 0x84
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <QF_init+0x34>)
 8001dba:	f7ff fda7 	bl	800190c <QF_bzero>
    QF_bzero(&QF_readySet_,             sizeof(QF_readySet_));
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <QF_init+0x38>)
 8001dc2:	f7ff fda3 	bl	800190c <QF_bzero>

    #ifdef QV_INIT
    QV_INIT(); /* port-specific initialization of the QV kernel */
 8001dc6:	f000 f8b3 	bl	8001f30 <QV_init>
    #endif
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20001100 	.word	0x20001100
 8001dd4:	200011c8 	.word	0x200011c8
 8001dd8:	20001140 	.word	0x20001140
 8001ddc:	200011c4 	.word	0x200011c4

08001de0 <QF_run>:
    QF_onCleanup(); /* application-specific cleanup callback */
    /* nothing else to do for the cooperative QV kernel */
}

/*${QV::QF-cust::run} ......................................................*/
int_t QF_run(void) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
    #ifdef Q_SPY
    uint_fast8_t pprev = 0U; /* previously used priority */
    #endif

    QF_onStartup(); /* application-specific startup callback */
 8001de6:	f7fe fc61 	bl	80006ac <QF_onStartup>

    /* the combined event-loop and background-loop of the QV kernel... */
    QF_INT_DISABLE();
 8001dea:	233f      	movs	r3, #63	; 0x3f
 8001dec:	b672      	cpsid	i
 8001dee:	f383 8811 	msr	BASEPRI, r3
 8001df2:	b662      	cpsie	i
    QS_BEGIN_NOCRIT_PRE_(QS_QF_RUN, 0U)
    QS_END_NOCRIT_PRE_()

    for (;;) {
        /* find the maximum priority AO ready to run */
        if (QPSet_notEmpty(&QF_readySet_)) {
 8001df4:	481a      	ldr	r0, [pc, #104]	; (8001e60 <QF_run+0x80>)
 8001df6:	f7ff ff9d 	bl	8001d34 <QPSet_notEmpty>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d027      	beq.n	8001e50 <QF_run+0x70>
            uint_fast8_t const p = QPSet_findMax(&QF_readySet_);
 8001e00:	4817      	ldr	r0, [pc, #92]	; (8001e60 <QF_run+0x80>)
 8001e02:	f7ff ffbe 	bl	8001d82 <QPSet_findMax>
 8001e06:	60f8      	str	r0, [r7, #12]
            QActive * const a = QActive_registry_[p];
 8001e08:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <QF_run+0x84>)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	60bb      	str	r3, [r7, #8]
            QS_END_NOCRIT_PRE_()

            pprev = p; /* update previous priority */
    #endif /* Q_SPY */

            QF_INT_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	f383 8811 	msr	BASEPRI, r3
            * 1. retrieve the event from the AO's event queue, which by this
            *    time must be non-empty and The "Vanialla" kernel asserts it.
            * 2. dispatch the event to the AO's state machine.
            * 3. determine if event is garbage and collect it if so
            */
            QEvt const * const e = QActive_get_(a);
 8001e18:	68b8      	ldr	r0, [r7, #8]
 8001e1a:	f7ff fb1f 	bl	800145c <QActive_get_>
 8001e1e:	6078      	str	r0, [r7, #4]
            QHSM_DISPATCH(&a->super, e, a->prio);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	68b8      	ldr	r0, [r7, #8]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4798      	blx	r3
    #if (QF_MAX_EPOOL > 0U)
            QF_gc(e);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fc12 	bl	8001658 <QF_gc>
    #endif
            QF_INT_DISABLE();
 8001e34:	233f      	movs	r3, #63	; 0x3f
 8001e36:	b672      	cpsid	i
 8001e38:	f383 8811 	msr	BASEPRI, r3
 8001e3c:	b662      	cpsie	i

            if (a->eQueue.frontEvt == (QEvt *)0) { /* empty queue? */
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1d6      	bne.n	8001df4 <QF_run+0x14>
                QPSet_remove(&QF_readySet_, p);
 8001e46:	68f9      	ldr	r1, [r7, #12]
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <QF_run+0x80>)
 8001e4a:	f7ff ff84 	bl	8001d56 <QPSet_remove>
 8001e4e:	e7d1      	b.n	8001df4 <QF_run+0x14>
            * queues) can change at any time by an interrupt posting events
            * to a queue. QV_onIdle() MUST enable interrupts internally,
            * perhaps at the same time as putting the CPU into a power-saving
            * mode.
            */
            QV_onIdle();
 8001e50:	f7fe fc33 	bl	80006ba <QV_onIdle>

            QF_INT_DISABLE();
 8001e54:	233f      	movs	r3, #63	; 0x3f
 8001e56:	b672      	cpsid	i
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	b662      	cpsie	i
        if (QPSet_notEmpty(&QF_readySet_)) {
 8001e5e:	e7c9      	b.n	8001df4 <QF_run+0x14>
 8001e60:	200011c4 	.word	0x200011c4
 8001e64:	20001140 	.word	0x20001140

08001e68 <QActive_start_>:
    QEvt const * * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	460b      	mov	r3, r1
 8001e76:	817b      	strh	r3, [r7, #10]
    Q_UNUSED_PAR(stkSize); /* not needed in QV */

    /*! @pre Stack storage must not be provided because the QV kernel
    * does not need per-AO stacks.
    */
    Q_REQUIRE_ID(500, stkSto == (void *)0);
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <QActive_start_+0x20>
 8001e7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e82:	4815      	ldr	r0, [pc, #84]	; (8001ed8 <QActive_start_+0x70>)
 8001e84:	f7fe fc23 	bl	80006ce <Q_onAssert>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); /* QF-priority of the AO */
 8001e88:	897b      	ldrh	r3, [r7, #10]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	771a      	strb	r2, [r3, #28]
    me->pthre = (uint8_t)(prioSpec >> 8U);   /* preemption-threshold */
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	775a      	strb	r2, [r3, #29]
    QActive_register_(me); /* make QF aware of this active object */
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7ff fd6b 	bl	8001978 <QActive_register_>

    QEQueue_init(&me->eQueue, qSto, qLen); /* init the built-in queue */
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fde6 	bl	8001a7c <QEQueue_init>

    QHSM_INIT(&me->super, par, me->prio); /* top-most initial tran. */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <QActive_start_+0x58>
 8001eb8:	21c7      	movs	r1, #199	; 0xc7
 8001eba:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <QActive_start_+0x70>)
 8001ebc:	f7fe fc07 	bl	80006ce <Q_onAssert>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6a39      	ldr	r1, [r7, #32]
 8001ecc:	4798      	blx	r3
    QS_FLUSH(); /* flush the trace buffer to the host */
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	080039ec 	.word	0x080039ec

08001edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ee2:	490e      	ldr	r1, [pc, #56]	; (8001f1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee8:	e002      	b.n	8001ef0 <LoopCopyDataInit>

08001eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eee:	3304      	adds	r3, #4

08001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef4:	d3f9      	bcc.n	8001eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef8:	4c0b      	ldr	r4, [pc, #44]	; (8001f28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001efc:	e001      	b.n	8001f02 <LoopFillZerobss>

08001efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f00:	3204      	adds	r2, #4

08001f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f04:	d3fb      	bcc.n	8001efe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f06:	f7fe fe37 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f001 fcef 	bl	80038ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0e:	f7fe fbe9 	bl	80006e4 <main>
  bx  lr    
 8001f12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f20:	08003a00 	.word	0x08003a00
  ldr r2, =_sbss
 8001f24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f28:	200011f4 	.word	0x200011f4

08001f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC_IRQHandler>
	...

08001f30 <QV_init>:
* "kernel aware" interrupts.
*
* The interrupt priorities established in QV_init() can be later
* changed by the application-level code.
*/
void QV_init(void) {
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
    uint32_t n;

    /* set exception priorities to QF_BASEPRI...
    * SCB_SYSPRI1: Usage-fault, Bus-fault, Memory-fault
    */
    SCB_SYSPRI[1] = (SCB_SYSPRI[1]
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <QV_init+0x6c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <QV_init+0x6c>)
        | (QF_BASEPRI << 16) | (QF_BASEPRI << 8) | QF_BASEPRI);
 8001f3c:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
 8001f40:	f443 537c 	orr.w	r3, r3, #16128	; 0x3f00
    SCB_SYSPRI[1] = (SCB_SYSPRI[1]
 8001f44:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI2: SVCall */
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (QF_BASEPRI << 24));
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <QV_init+0x70>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <QV_init+0x70>)
 8001f4c:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8001f50:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI3:  SysTick, PendSV, Debug */
    SCB_SYSPRI[3] = (SCB_SYSPRI[3]
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <QV_init+0x74>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <QV_init+0x74>)
        | (QF_BASEPRI << 24) | (QF_BASEPRI << 16) | QF_BASEPRI);
 8001f58:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8001f5c:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
    SCB_SYSPRI[3] = (SCB_SYSPRI[3]
 8001f60:	6013      	str	r3, [r2, #0]

    /* set all implemented IRQ priories to QF_BASEPRI... */
    n = 8U + ((*SCnSCB_ICTR & 0x7U) << 3); /* (# NVIC_PRIO registers)/4 */
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <QV_init+0x78>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	607b      	str	r3, [r7, #4]
    do {
        --n;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	607b      	str	r3, [r7, #4]
        NVIC_IP[n] = (QF_BASEPRI << 24) | (QF_BASEPRI << 16)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001f7e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001f82:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 8001f86:	601a      	str	r2, [r3, #0]
                     | (QF_BASEPRI << 8) | QF_BASEPRI;
    } while (n != 0);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <QV_init+0x40>
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed18 	.word	0xe000ed18
 8001fa0:	e000ed1c 	.word	0xe000ed1c
 8001fa4:	e000ed20 	.word	0xe000ed20
 8001fa8:	e000e004 	.word	0xe000e004

08001fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <HAL_Init+0x40>)
 8001fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_Init+0x40>)
 8001fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_Init+0x40>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f000 f90d 	bl	80021f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fda:	200f      	movs	r0, #15
 8001fdc:	f000 f808 	bl	8001ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe0:	f7fe fd18 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023c00 	.word	0x40023c00

08001ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x54>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_InitTick+0x58>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	fbb3 f3f1 	udiv	r3, r3, r1
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f917 	bl	8002242 <HAL_SYSTICK_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00e      	b.n	800203c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d80a      	bhi.n	800203a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002024:	2200      	movs	r2, #0
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f000 f8ed 	bl	800220a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <HAL_InitTick+0x5c>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000000 	.word	0x20000000
 8002048:	2000000c 	.word	0x2000000c
 800204c:	20000008 	.word	0x20000008

08002050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_IncTick+0x20>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_IncTick+0x24>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <HAL_IncTick+0x24>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	2000000c 	.word	0x2000000c
 8002074:	200011f0 	.word	0x200011f0

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_GetTick+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	200011f0 	.word	0x200011f0

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db0a      	blt.n	800211e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	490c      	ldr	r1, [pc, #48]	; (8002140 <__NVIC_SetPriority+0x4c>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	440b      	add	r3, r1
 8002118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800211c:	e00a      	b.n	8002134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4908      	ldr	r1, [pc, #32]	; (8002144 <__NVIC_SetPriority+0x50>)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3b04      	subs	r3, #4
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	440b      	add	r3, r1
 8002132:	761a      	strb	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f1c3 0307 	rsb	r3, r3, #7
 8002162:	2b04      	cmp	r3, #4
 8002164:	bf28      	it	cs
 8002166:	2304      	movcs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3304      	adds	r3, #4
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <NVIC_EncodePriority+0x30>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3b03      	subs	r3, #3
 8002176:	e000      	b.n	800217a <NVIC_EncodePriority+0x32>
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	401a      	ands	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43d9      	mvns	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	4313      	orrs	r3, r2
         );
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	; 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c0:	d301      	bcc.n	80021c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00f      	b.n	80021e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <SysTick_Config+0x40>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ce:	210f      	movs	r1, #15
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f7ff ff8e 	bl	80020f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <SysTick_Config+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <SysTick_Config+0x40>)
 80021e0:	2207      	movs	r2, #7
 80021e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	e000e010 	.word	0xe000e010

080021f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff47 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800221c:	f7ff ff5c 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 8002220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f7ff ff8e 	bl	8002148 <NVIC_EncodePriority>
 800222c:	4602      	mov	r2, r0
 800222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff5d 	bl	80020f4 <__NVIC_SetPriority>
}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ffb0 	bl	80021b0 <SysTick_Config>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e16b      	b.n	8002550 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 815a 	bne.w	800254a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d005      	beq.n	80022ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d130      	bne.n	8002310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 0201 	and.w	r2, r3, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b03      	cmp	r3, #3
 800231a:	d017      	beq.n	800234c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d123      	bne.n	80023a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80b4 	beq.w	800254a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b60      	ldr	r3, [pc, #384]	; (8002568 <HAL_GPIO_Init+0x30c>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4a5f      	ldr	r2, [pc, #380]	; (8002568 <HAL_GPIO_Init+0x30c>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	; 0x44
 80023f2:	4b5d      	ldr	r3, [pc, #372]	; (8002568 <HAL_GPIO_Init+0x30c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fe:	4a5b      	ldr	r2, [pc, #364]	; (800256c <HAL_GPIO_Init+0x310>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a52      	ldr	r2, [pc, #328]	; (8002570 <HAL_GPIO_Init+0x314>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d02b      	beq.n	8002482 <HAL_GPIO_Init+0x226>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a51      	ldr	r2, [pc, #324]	; (8002574 <HAL_GPIO_Init+0x318>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d025      	beq.n	800247e <HAL_GPIO_Init+0x222>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a50      	ldr	r2, [pc, #320]	; (8002578 <HAL_GPIO_Init+0x31c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01f      	beq.n	800247a <HAL_GPIO_Init+0x21e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4f      	ldr	r2, [pc, #316]	; (800257c <HAL_GPIO_Init+0x320>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_GPIO_Init+0x21a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4e      	ldr	r2, [pc, #312]	; (8002580 <HAL_GPIO_Init+0x324>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0x216>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4d      	ldr	r2, [pc, #308]	; (8002584 <HAL_GPIO_Init+0x328>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_Init+0x212>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4c      	ldr	r2, [pc, #304]	; (8002588 <HAL_GPIO_Init+0x32c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x20e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4b      	ldr	r2, [pc, #300]	; (800258c <HAL_GPIO_Init+0x330>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_GPIO_Init+0x20a>
 8002462:	2307      	movs	r3, #7
 8002464:	e00e      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002466:	2308      	movs	r3, #8
 8002468:	e00c      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800246a:	2306      	movs	r3, #6
 800246c:	e00a      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800246e:	2305      	movs	r3, #5
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002472:	2304      	movs	r3, #4
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002482:	2300      	movs	r3, #0
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002494:	4935      	ldr	r1, [pc, #212]	; (800256c <HAL_GPIO_Init+0x310>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c6:	4a32      	ldr	r2, [pc, #200]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f0:	4a27      	ldr	r2, [pc, #156]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_GPIO_Init+0x334>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_GPIO_Init+0x334>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002544:	4a12      	ldr	r2, [pc, #72]	; (8002590 <HAL_GPIO_Init+0x334>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f67f ae90 	bls.w	8002278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40013800 	.word	0x40013800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400
 8002578:	40020800 	.word	0x40020800
 800257c:	40020c00 	.word	0x40020c00
 8002580:	40021000 	.word	0x40021000
 8002584:	40021400 	.word	0x40021400
 8002588:	40021800 	.word	0x40021800
 800258c:	40021c00 	.word	0x40021c00
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e001      	b.n	80025b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002608:	887a      	ldrh	r2, [r7, #2]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	041a      	lsls	r2, r3, #16
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43d9      	mvns	r1, r3
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	400b      	ands	r3, r1
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e267      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d075      	beq.n	8002736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	4b88      	ldr	r3, [pc, #544]	; (800286c <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	d00c      	beq.n	8002670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002656:	4b85      	ldr	r3, [pc, #532]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265e:	2b08      	cmp	r3, #8
 8002660:	d112      	bne.n	8002688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002662:	4b82      	ldr	r3, [pc, #520]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266e:	d10b      	bne.n	8002688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	4b7e      	ldr	r3, [pc, #504]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d05b      	beq.n	8002734 <HAL_RCC_OscConfig+0x108>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d157      	bne.n	8002734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e242      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_OscConfig+0x74>
 8002692:	4b76      	ldr	r3, [pc, #472]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a75      	ldr	r2, [pc, #468]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e01d      	b.n	80026dc <HAL_RCC_OscConfig+0xb0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x98>
 80026aa:	4b70      	ldr	r3, [pc, #448]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6f      	ldr	r2, [pc, #444]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a6c      	ldr	r2, [pc, #432]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0xb0>
 80026c4:	4b69      	ldr	r3, [pc, #420]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a68      	ldr	r2, [pc, #416]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b66      	ldr	r3, [pc, #408]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a65      	ldr	r2, [pc, #404]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7ff fcc8 	bl	8002078 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ec:	f7ff fcc4 	bl	8002078 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e207      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b5b      	ldr	r3, [pc, #364]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0xc0>
 800270a:	e014      	b.n	8002736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7ff fcb4 	bl	8002078 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002714:	f7ff fcb0 	bl	8002078 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e1f3      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	4b51      	ldr	r3, [pc, #324]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0xe8>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d063      	beq.n	800280a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	4b4a      	ldr	r3, [pc, #296]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002756:	2b08      	cmp	r3, #8
 8002758:	d11c      	bne.n	8002794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275a:	4b44      	ldr	r3, [pc, #272]	; (800286c <HAL_RCC_OscConfig+0x240>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d116      	bne.n	8002794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	4b41      	ldr	r3, [pc, #260]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_RCC_OscConfig+0x152>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e1c7      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4937      	ldr	r1, [pc, #220]	; (800286c <HAL_RCC_OscConfig+0x240>)
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	e03a      	b.n	800280a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279c:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_RCC_OscConfig+0x244>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7ff fc69 	bl	8002078 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027aa:	f7ff fc65 	bl	8002078 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e1a8      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	4b2b      	ldr	r3, [pc, #172]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4925      	ldr	r1, [pc, #148]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCC_OscConfig+0x244>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7ff fc48 	bl	8002078 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ec:	f7ff fc44 	bl	8002078 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e187      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d036      	beq.n	8002884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_RCC_OscConfig+0x248>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7ff fc28 	bl	8002078 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282c:	f7ff fc24 	bl	8002078 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e167      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x200>
 800284a:	e01b      	b.n	8002884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_OscConfig+0x248>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002852:	f7ff fc11 	bl	8002078 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	e00e      	b.n	8002878 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285a:	f7ff fc0d 	bl	8002078 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d907      	bls.n	8002878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e150      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
 800286c:	40023800 	.word	0x40023800
 8002870:	42470000 	.word	0x42470000
 8002874:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002878:	4b88      	ldr	r3, [pc, #544]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800287a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ea      	bne.n	800285a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8097 	beq.w	80029c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002896:	4b81      	ldr	r3, [pc, #516]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10f      	bne.n	80028c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b7d      	ldr	r3, [pc, #500]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a7c      	ldr	r2, [pc, #496]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b7a      	ldr	r3, [pc, #488]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b77      	ldr	r3, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ce:	4b74      	ldr	r3, [pc, #464]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a73      	ldr	r2, [pc, #460]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028da:	f7ff fbcd 	bl	8002078 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7ff fbc9 	bl	8002078 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e10c      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x2ea>
 8002908:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	4a63      	ldr	r2, [pc, #396]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6713      	str	r3, [r2, #112]	; 0x70
 8002914:	e01c      	b.n	8002950 <HAL_RCC_OscConfig+0x324>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b05      	cmp	r3, #5
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x30c>
 800291e:	4b5f      	ldr	r3, [pc, #380]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	4a5e      	ldr	r2, [pc, #376]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	6713      	str	r3, [r2, #112]	; 0x70
 800292a:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	4a5b      	ldr	r2, [pc, #364]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6713      	str	r3, [r2, #112]	; 0x70
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0x324>
 8002938:	4b58      	ldr	r3, [pc, #352]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	4a57      	ldr	r2, [pc, #348]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	6713      	str	r3, [r2, #112]	; 0x70
 8002944:	4b55      	ldr	r3, [pc, #340]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800294a:	f023 0304 	bic.w	r3, r3, #4
 800294e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d015      	beq.n	8002984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7ff fb8e 	bl	8002078 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7ff fb8a 	bl	8002078 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0cb      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002976:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0ee      	beq.n	8002960 <HAL_RCC_OscConfig+0x334>
 8002982:	e014      	b.n	80029ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7ff fb78 	bl	8002078 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7ff fb74 	bl	8002078 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e0b5      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a2:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ee      	bne.n	800298c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b4:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	4a38      	ldr	r2, [pc, #224]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80a1 	beq.w	8002b0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ca:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d05c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d141      	bne.n	8002a62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <HAL_RCC_OscConfig+0x478>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff fb48 	bl	8002078 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ec:	f7ff fb44 	bl	8002078 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e087      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	019b      	lsls	r3, r3, #6
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	3b01      	subs	r3, #1
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	491b      	ldr	r1, [pc, #108]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_RCC_OscConfig+0x478>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7ff fb1d 	bl	8002078 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a42:	f7ff fb19 	bl	8002078 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e05c      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x416>
 8002a60:	e054      	b.n	8002b0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <HAL_RCC_OscConfig+0x478>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7ff fb06 	bl	8002078 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a70:	f7ff fb02 	bl	8002078 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e045      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x444>
 8002a8e:	e03d      	b.n	8002b0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e038      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x4ec>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d028      	beq.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d121      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d11a      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d111      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	3b01      	subs	r3, #1
 8002af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800

08002b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0cc      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b68      	ldr	r3, [pc, #416]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d90c      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b8      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d044      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d119      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d003      	beq.n	8002bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e067      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4934      	ldr	r1, [pc, #208]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7ff fa34 	bl	8002078 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7ff fa30 	bl	8002078 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e04f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d20c      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e032      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4916      	ldr	r1, [pc, #88]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ca2:	f000 f821 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	490a      	ldr	r1, [pc, #40]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff f994 	bl	8001ff0 <HAL_InitTick>

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023c00 	.word	0x40023c00
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	08003974 	.word	0x08003974
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	20000008 	.word	0x20000008

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cec:	b090      	sub	sp, #64	; 0x40
 8002cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d00:	4b59      	ldr	r3, [pc, #356]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d00d      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x40>
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	f200 80a1 	bhi.w	8002e54 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x34>
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d003      	beq.n	8002d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d1a:	e09b      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d20:	e09b      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d22:	4b53      	ldr	r3, [pc, #332]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d26:	e098      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d28:	4b4f      	ldr	r3, [pc, #316]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d32:	4b4d      	ldr	r3, [pc, #308]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d028      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	099b      	lsrs	r3, r3, #6
 8002d44:	2200      	movs	r2, #0
 8002d46:	623b      	str	r3, [r7, #32]
 8002d48:	627a      	str	r2, [r7, #36]	; 0x24
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d50:	2100      	movs	r1, #0
 8002d52:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d54:	fb03 f201 	mul.w	r2, r3, r1
 8002d58:	2300      	movs	r3, #0
 8002d5a:	fb00 f303 	mul.w	r3, r0, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a43      	ldr	r2, [pc, #268]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d62:	fba0 1202 	umull	r1, r2, r0, r2
 8002d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d68:	460a      	mov	r2, r1
 8002d6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d6e:	4413      	add	r3, r2
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d74:	2200      	movs	r2, #0
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	61fa      	str	r2, [r7, #28]
 8002d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d82:	f7fd fa21 	bl	80001c8 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d8e:	e053      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d90:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	2200      	movs	r2, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	617a      	str	r2, [r7, #20]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002da2:	f04f 0b00 	mov.w	fp, #0
 8002da6:	4652      	mov	r2, sl
 8002da8:	465b      	mov	r3, fp
 8002daa:	f04f 0000 	mov.w	r0, #0
 8002dae:	f04f 0100 	mov.w	r1, #0
 8002db2:	0159      	lsls	r1, r3, #5
 8002db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db8:	0150      	lsls	r0, r2, #5
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	ebb2 080a 	subs.w	r8, r2, sl
 8002dc2:	eb63 090b 	sbc.w	r9, r3, fp
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dda:	ebb2 0408 	subs.w	r4, r2, r8
 8002dde:	eb63 0509 	sbc.w	r5, r3, r9
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	00eb      	lsls	r3, r5, #3
 8002dec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df0:	00e2      	lsls	r2, r4, #3
 8002df2:	4614      	mov	r4, r2
 8002df4:	461d      	mov	r5, r3
 8002df6:	eb14 030a 	adds.w	r3, r4, sl
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	eb45 030b 	adc.w	r3, r5, fp
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	028b      	lsls	r3, r1, #10
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e18:	4621      	mov	r1, r4
 8002e1a:	028a      	lsls	r2, r1, #10
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	2200      	movs	r2, #0
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	60fa      	str	r2, [r7, #12]
 8002e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e2c:	f7fd f9cc 	bl	80001c8 <__aeabi_uldivmod>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4613      	mov	r3, r2
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	3301      	adds	r3, #1
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e52:	e002      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3740      	adds	r7, #64	; 0x40
 8002e60:	46bd      	mov	sp, r7
 8002e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	00f42400 	.word	0x00f42400
 8002e70:	017d7840 	.word	0x017d7840

08002e74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e041      	b.n	8002f0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fde2 	bl	8000a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f000 fa28 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_TIM_PWM_Start+0x24>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e022      	b.n	8002f7e <HAL_TIM_PWM_Start+0x6a>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d109      	bne.n	8002f52 <HAL_TIM_PWM_Start+0x3e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e015      	b.n	8002f7e <HAL_TIM_PWM_Start+0x6a>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d109      	bne.n	8002f6c <HAL_TIM_PWM_Start+0x58>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e008      	b.n	8002f7e <HAL_TIM_PWM_Start+0x6a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e07c      	b.n	8003080 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_PWM_Start+0x82>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f94:	e013      	b.n	8002fbe <HAL_TIM_PWM_Start+0xaa>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_PWM_Start+0x92>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa4:	e00b      	b.n	8002fbe <HAL_TIM_PWM_Start+0xaa>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_PWM_Start+0xa2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb4:	e003      	b.n	8002fbe <HAL_TIM_PWM_Start+0xaa>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	6839      	ldr	r1, [r7, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fbee 	bl	80037a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	; (8003088 <HAL_TIM_PWM_Start+0x174>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0xcc>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2c      	ldr	r2, [pc, #176]	; (800308c <HAL_TIM_PWM_Start+0x178>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_TIM_PWM_Start+0xd0>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_TIM_PWM_Start+0xd2>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a22      	ldr	r2, [pc, #136]	; (8003088 <HAL_TIM_PWM_Start+0x174>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d01d      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <HAL_TIM_PWM_Start+0x17c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <HAL_TIM_PWM_Start+0x180>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_TIM_PWM_Start+0x184>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a16      	ldr	r2, [pc, #88]	; (800308c <HAL_TIM_PWM_Start+0x178>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a18      	ldr	r2, [pc, #96]	; (800309c <HAL_TIM_PWM_Start+0x188>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <HAL_TIM_PWM_Start+0x18c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d111      	bne.n	800306e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b06      	cmp	r3, #6
 800305a:	d010      	beq.n	800307e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306c:	e007      	b.n	800307e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40010000 	.word	0x40010000
 800308c:	40010400 	.word	0x40010400
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40014000 	.word	0x40014000
 80030a0:	40001800 	.word	0x40001800

080030a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2200      	movs	r2, #0
 80030b4:	6839      	ldr	r1, [r7, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fb76 	bl	80037a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2e      	ldr	r2, [pc, #184]	; (800317c <HAL_TIM_PWM_Stop+0xd8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <HAL_TIM_PWM_Stop+0x2c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2d      	ldr	r2, [pc, #180]	; (8003180 <HAL_TIM_PWM_Stop+0xdc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <HAL_TIM_PWM_Stop+0x30>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <HAL_TIM_PWM_Stop+0x32>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d017      	beq.n	800310a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6a1a      	ldr	r2, [r3, #32]
 80030e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10f      	bne.n	800310a <HAL_TIM_PWM_Stop+0x66>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	f240 4344 	movw	r3, #1092	; 0x444
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d107      	bne.n	800310a <HAL_TIM_PWM_Stop+0x66>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6a1a      	ldr	r2, [r3, #32]
 8003110:	f241 1311 	movw	r3, #4369	; 0x1111
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <HAL_TIM_PWM_Stop+0x96>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a1a      	ldr	r2, [r3, #32]
 8003120:	f240 4344 	movw	r3, #1092	; 0x444
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <HAL_TIM_PWM_Stop+0x96>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <HAL_TIM_PWM_Stop+0xa6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003148:	e013      	b.n	8003172 <HAL_TIM_PWM_Stop+0xce>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d104      	bne.n	800315a <HAL_TIM_PWM_Stop+0xb6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003158:	e00b      	b.n	8003172 <HAL_TIM_PWM_Stop+0xce>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d104      	bne.n	800316a <HAL_TIM_PWM_Stop+0xc6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003168:	e003      	b.n	8003172 <HAL_TIM_PWM_Stop+0xce>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40010000 	.word	0x40010000
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800319e:	2302      	movs	r3, #2
 80031a0:	e0ae      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	f200 809f 	bhi.w	80032f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031b2:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b8:	080031ed 	.word	0x080031ed
 80031bc:	080032f1 	.word	0x080032f1
 80031c0:	080032f1 	.word	0x080032f1
 80031c4:	080032f1 	.word	0x080032f1
 80031c8:	0800322d 	.word	0x0800322d
 80031cc:	080032f1 	.word	0x080032f1
 80031d0:	080032f1 	.word	0x080032f1
 80031d4:	080032f1 	.word	0x080032f1
 80031d8:	0800326f 	.word	0x0800326f
 80031dc:	080032f1 	.word	0x080032f1
 80031e0:	080032f1 	.word	0x080032f1
 80031e4:	080032f1 	.word	0x080032f1
 80031e8:	080032af 	.word	0x080032af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f928 	bl	8003448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0208 	orr.w	r2, r2, #8
 8003206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0204 	bic.w	r2, r2, #4
 8003216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6999      	ldr	r1, [r3, #24]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	619a      	str	r2, [r3, #24]
      break;
 800322a:	e064      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f978 	bl	8003528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6999      	ldr	r1, [r3, #24]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	021a      	lsls	r2, r3, #8
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	619a      	str	r2, [r3, #24]
      break;
 800326c:	e043      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f9cd 	bl	8003614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0208 	orr.w	r2, r2, #8
 8003288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0204 	bic.w	r2, r2, #4
 8003298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69d9      	ldr	r1, [r3, #28]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	61da      	str	r2, [r3, #28]
      break;
 80032ac:	e023      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fa21 	bl	80036fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69d9      	ldr	r1, [r3, #28]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	021a      	lsls	r2, r3, #8
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	61da      	str	r2, [r3, #28]
      break;
 80032ee:	e002      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	75fb      	strb	r3, [r7, #23]
      break;
 80032f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a40      	ldr	r2, [pc, #256]	; (800341c <TIM_Base_SetConfig+0x114>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d00f      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a3d      	ldr	r2, [pc, #244]	; (8003420 <TIM_Base_SetConfig+0x118>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00b      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a3c      	ldr	r2, [pc, #240]	; (8003424 <TIM_Base_SetConfig+0x11c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <TIM_Base_SetConfig+0x120>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a3a      	ldr	r2, [pc, #232]	; (800342c <TIM_Base_SetConfig+0x124>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d108      	bne.n	800335a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2f      	ldr	r2, [pc, #188]	; (800341c <TIM_Base_SetConfig+0x114>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d02b      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d027      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2c      	ldr	r2, [pc, #176]	; (8003420 <TIM_Base_SetConfig+0x118>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d023      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2b      	ldr	r2, [pc, #172]	; (8003424 <TIM_Base_SetConfig+0x11c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01f      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a2a      	ldr	r2, [pc, #168]	; (8003428 <TIM_Base_SetConfig+0x120>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01b      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a29      	ldr	r2, [pc, #164]	; (800342c <TIM_Base_SetConfig+0x124>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d017      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a28      	ldr	r2, [pc, #160]	; (8003430 <TIM_Base_SetConfig+0x128>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a27      	ldr	r2, [pc, #156]	; (8003434 <TIM_Base_SetConfig+0x12c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00f      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a26      	ldr	r2, [pc, #152]	; (8003438 <TIM_Base_SetConfig+0x130>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00b      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a25      	ldr	r2, [pc, #148]	; (800343c <TIM_Base_SetConfig+0x134>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a24      	ldr	r2, [pc, #144]	; (8003440 <TIM_Base_SetConfig+0x138>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d003      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a23      	ldr	r2, [pc, #140]	; (8003444 <TIM_Base_SetConfig+0x13c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <TIM_Base_SetConfig+0x114>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_Base_SetConfig+0xf8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a0c      	ldr	r2, [pc, #48]	; (800342c <TIM_Base_SetConfig+0x124>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d103      	bne.n	8003408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	615a      	str	r2, [r3, #20]
}
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40010000 	.word	0x40010000
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800
 8003428:	40000c00 	.word	0x40000c00
 800342c:	40010400 	.word	0x40010400
 8003430:	40014000 	.word	0x40014000
 8003434:	40014400 	.word	0x40014400
 8003438:	40014800 	.word	0x40014800
 800343c:	40001800 	.word	0x40001800
 8003440:	40001c00 	.word	0x40001c00
 8003444:	40002000 	.word	0x40002000

08003448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f023 0201 	bic.w	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f023 0302 	bic.w	r3, r3, #2
 8003490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a20      	ldr	r2, [pc, #128]	; (8003520 <TIM_OC1_SetConfig+0xd8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_OC1_SetConfig+0x64>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a1f      	ldr	r2, [pc, #124]	; (8003524 <TIM_OC1_SetConfig+0xdc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d10c      	bne.n	80034c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 0308 	bic.w	r3, r3, #8
 80034b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f023 0304 	bic.w	r3, r3, #4
 80034c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a15      	ldr	r2, [pc, #84]	; (8003520 <TIM_OC1_SetConfig+0xd8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d003      	beq.n	80034d6 <TIM_OC1_SetConfig+0x8e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a14      	ldr	r2, [pc, #80]	; (8003524 <TIM_OC1_SetConfig+0xdc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d111      	bne.n	80034fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40010000 	.word	0x40010000
 8003524:	40010400 	.word	0x40010400

08003528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f023 0210 	bic.w	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 0320 	bic.w	r3, r3, #32
 8003572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a22      	ldr	r2, [pc, #136]	; (800360c <TIM_OC2_SetConfig+0xe4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_OC2_SetConfig+0x68>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <TIM_OC2_SetConfig+0xe8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10d      	bne.n	80035ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <TIM_OC2_SetConfig+0xe4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_OC2_SetConfig+0x94>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a16      	ldr	r2, [pc, #88]	; (8003610 <TIM_OC2_SetConfig+0xe8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d113      	bne.n	80035e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	40010400 	.word	0x40010400

08003614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800365c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <TIM_OC3_SetConfig+0xe0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_OC3_SetConfig+0x66>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <TIM_OC3_SetConfig+0xe4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10d      	bne.n	8003696 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <TIM_OC3_SetConfig+0xe0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_OC3_SetConfig+0x92>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <TIM_OC3_SetConfig+0xe4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d113      	bne.n	80036ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	621a      	str	r2, [r3, #32]
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40010400 	.word	0x40010400

080036fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	031b      	lsls	r3, r3, #12
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <TIM_OC4_SetConfig+0xa4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_OC4_SetConfig+0x68>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <TIM_OC4_SetConfig+0xa8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d109      	bne.n	8003778 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800376a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	019b      	lsls	r3, r3, #6
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40010400 	.word	0x40010400

080037a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	2201      	movs	r2, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a1a      	ldr	r2, [r3, #32]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	43db      	mvns	r3, r3
 80037ca:	401a      	ands	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a1a      	ldr	r2, [r3, #32]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	431a      	orrs	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003808:	2302      	movs	r3, #2
 800380a:	e05a      	b.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003858:	d01d      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d018      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1b      	ldr	r2, [pc, #108]	; (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1a      	ldr	r2, [pc, #104]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00e      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10c      	bne.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40001800 	.word	0x40001800

080038ec <__libc_init_array>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	4d0d      	ldr	r5, [pc, #52]	; (8003924 <__libc_init_array+0x38>)
 80038f0:	4c0d      	ldr	r4, [pc, #52]	; (8003928 <__libc_init_array+0x3c>)
 80038f2:	1b64      	subs	r4, r4, r5
 80038f4:	10a4      	asrs	r4, r4, #2
 80038f6:	2600      	movs	r6, #0
 80038f8:	42a6      	cmp	r6, r4
 80038fa:	d109      	bne.n	8003910 <__libc_init_array+0x24>
 80038fc:	4d0b      	ldr	r5, [pc, #44]	; (800392c <__libc_init_array+0x40>)
 80038fe:	4c0c      	ldr	r4, [pc, #48]	; (8003930 <__libc_init_array+0x44>)
 8003900:	f000 f820 	bl	8003944 <_init>
 8003904:	1b64      	subs	r4, r4, r5
 8003906:	10a4      	asrs	r4, r4, #2
 8003908:	2600      	movs	r6, #0
 800390a:	42a6      	cmp	r6, r4
 800390c:	d105      	bne.n	800391a <__libc_init_array+0x2e>
 800390e:	bd70      	pop	{r4, r5, r6, pc}
 8003910:	f855 3b04 	ldr.w	r3, [r5], #4
 8003914:	4798      	blx	r3
 8003916:	3601      	adds	r6, #1
 8003918:	e7ee      	b.n	80038f8 <__libc_init_array+0xc>
 800391a:	f855 3b04 	ldr.w	r3, [r5], #4
 800391e:	4798      	blx	r3
 8003920:	3601      	adds	r6, #1
 8003922:	e7f2      	b.n	800390a <__libc_init_array+0x1e>
 8003924:	080039f8 	.word	0x080039f8
 8003928:	080039f8 	.word	0x080039f8
 800392c:	080039f8 	.word	0x080039f8
 8003930:	080039fc 	.word	0x080039fc

08003934 <memset>:
 8003934:	4402      	add	r2, r0
 8003936:	4603      	mov	r3, r0
 8003938:	4293      	cmp	r3, r2
 800393a:	d100      	bne.n	800393e <memset+0xa>
 800393c:	4770      	bx	lr
 800393e:	f803 1b01 	strb.w	r1, [r3], #1
 8003942:	e7f9      	b.n	8003938 <memset+0x4>

08003944 <_init>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	bf00      	nop
 8003948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394a:	bc08      	pop	{r3}
 800394c:	469e      	mov	lr, r3
 800394e:	4770      	bx	lr

08003950 <_fini>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr
