
QFrameworkApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005288  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054ac  080054ac  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054b4  080054b4  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080054bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          00001240  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001290  20001290  00020050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 14 .debug_info   000107b4  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033ad  00000000  00000000  00030877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f50  00000000  00000000  00033c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bda  00000000  00000000  00034b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020ef9  00000000  00000000  00035752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013497  00000000  00000000  0005664b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd123  00000000  00000000  00069ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f34  00000000  00000000  00136c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0013ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053f8 	.word	0x080053f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	080053f8 	.word	0x080053f8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b970 	b.w	8000cac <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	460d      	mov	r5, r1
 80009ec:	4604      	mov	r4, r0
 80009ee:	460f      	mov	r7, r1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d14a      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4694      	mov	ip, r2
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0xe2>
 80009fa:	fab2 f382 	clz	r3, r2
 80009fe:	b143      	cbz	r3, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a04:	f1c3 0220 	rsb	r2, r3, #32
 8000a08:	409f      	lsls	r7, r3
 8000a0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a0e:	4317      	orrs	r7, r2
 8000a10:	409c      	lsls	r4, r3
 8000a12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a16:	fa1f f58c 	uxth.w	r5, ip
 8000a1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a1e:	0c22      	lsrs	r2, r4, #16
 8000a20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a28:	fb01 f005 	mul.w	r0, r1, r5
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	d90a      	bls.n	8000a46 <__udivmoddi4+0x62>
 8000a30:	eb1c 0202 	adds.w	r2, ip, r2
 8000a34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a38:	f080 811c 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	f240 8119 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a42:	3902      	subs	r1, #2
 8000a44:	4462      	add	r2, ip
 8000a46:	1a12      	subs	r2, r2, r0
 8000a48:	b2a4      	uxth	r4, r4
 8000a4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a56:	fb00 f505 	mul.w	r5, r0, r5
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x90>
 8000a5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a66:	f080 8107 	bcs.w	8000c78 <__udivmoddi4+0x294>
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	f240 8104 	bls.w	8000c78 <__udivmoddi4+0x294>
 8000a70:	4464      	add	r4, ip
 8000a72:	3802      	subs	r0, #2
 8000a74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a78:	1b64      	subs	r4, r4, r5
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	b11e      	cbz	r6, 8000a86 <__udivmoddi4+0xa2>
 8000a7e:	40dc      	lsrs	r4, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	e9c6 4300 	strd	r4, r3, [r6]
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0xbc>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80ed 	beq.w	8000c6e <__udivmoddi4+0x28a>
 8000a94:	2100      	movs	r1, #0
 8000a96:	e9c6 0500 	strd	r0, r5, [r6]
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa0:	fab3 f183 	clz	r1, r3
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d149      	bne.n	8000b3c <__udivmoddi4+0x158>
 8000aa8:	42ab      	cmp	r3, r5
 8000aaa:	d302      	bcc.n	8000ab2 <__udivmoddi4+0xce>
 8000aac:	4282      	cmp	r2, r0
 8000aae:	f200 80f8 	bhi.w	8000ca2 <__udivmoddi4+0x2be>
 8000ab2:	1a84      	subs	r4, r0, r2
 8000ab4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4617      	mov	r7, r2
 8000abc:	2e00      	cmp	r6, #0
 8000abe:	d0e2      	beq.n	8000a86 <__udivmoddi4+0xa2>
 8000ac0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ac4:	e7df      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000ac6:	b902      	cbnz	r2, 8000aca <__udivmoddi4+0xe6>
 8000ac8:	deff      	udf	#255	; 0xff
 8000aca:	fab2 f382 	clz	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8090 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad4:	1a8a      	subs	r2, r1, r2
 8000ad6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ada:	fa1f fe8c 	uxth.w	lr, ip
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ae4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ae8:	0c22      	lsrs	r2, r4, #16
 8000aea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aee:	fb0e f005 	mul.w	r0, lr, r5
 8000af2:	4290      	cmp	r0, r2
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af6:	eb1c 0202 	adds.w	r2, ip, r2
 8000afa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4290      	cmp	r0, r2
 8000b02:	f200 80cb 	bhi.w	8000c9c <__udivmoddi4+0x2b8>
 8000b06:	4645      	mov	r5, r8
 8000b08:	1a12      	subs	r2, r2, r0
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b10:	fb07 2210 	mls	r2, r7, r0, r2
 8000b14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b18:	fb0e fe00 	mul.w	lr, lr, r0
 8000b1c:	45a6      	cmp	lr, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x14e>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b28:	d202      	bcs.n	8000b30 <__udivmoddi4+0x14c>
 8000b2a:	45a6      	cmp	lr, r4
 8000b2c:	f200 80bb 	bhi.w	8000ca6 <__udivmoddi4+0x2c2>
 8000b30:	4610      	mov	r0, r2
 8000b32:	eba4 040e 	sub.w	r4, r4, lr
 8000b36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b3a:	e79f      	b.n	8000a7c <__udivmoddi4+0x98>
 8000b3c:	f1c1 0720 	rsb	r7, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b52:	40fd      	lsrs	r5, r7
 8000b54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b5e:	fa1f fe8c 	uxth.w	lr, ip
 8000b62:	fb09 5518 	mls	r5, r9, r8, r5
 8000b66:	0c1c      	lsrs	r4, r3, #16
 8000b68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b70:	42a5      	cmp	r5, r4
 8000b72:	fa02 f201 	lsl.w	r2, r2, r1
 8000b76:	fa00 f001 	lsl.w	r0, r0, r1
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b84:	f080 8088 	bcs.w	8000c98 <__udivmoddi4+0x2b4>
 8000b88:	42a5      	cmp	r5, r4
 8000b8a:	f240 8085 	bls.w	8000c98 <__udivmoddi4+0x2b4>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	4464      	add	r4, ip
 8000b94:	1b64      	subs	r4, r4, r5
 8000b96:	b29d      	uxth	r5, r3
 8000b98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ba4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bb4:	d26c      	bcs.n	8000c90 <__udivmoddi4+0x2ac>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	d96a      	bls.n	8000c90 <__udivmoddi4+0x2ac>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	4464      	add	r4, ip
 8000bbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bc6:	eba4 040e 	sub.w	r4, r4, lr
 8000bca:	42ac      	cmp	r4, r5
 8000bcc:	46c8      	mov	r8, r9
 8000bce:	46ae      	mov	lr, r5
 8000bd0:	d356      	bcc.n	8000c80 <__udivmoddi4+0x29c>
 8000bd2:	d053      	beq.n	8000c7c <__udivmoddi4+0x298>
 8000bd4:	b156      	cbz	r6, 8000bec <__udivmoddi4+0x208>
 8000bd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bda:	eb64 040e 	sbc.w	r4, r4, lr
 8000bde:	fa04 f707 	lsl.w	r7, r4, r7
 8000be2:	40ca      	lsrs	r2, r1
 8000be4:	40cc      	lsrs	r4, r1
 8000be6:	4317      	orrs	r7, r2
 8000be8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	f1c3 0120 	rsb	r1, r3, #32
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000c00:	fa25 f101 	lsr.w	r1, r5, r1
 8000c04:	409d      	lsls	r5, r3
 8000c06:	432a      	orrs	r2, r5
 8000c08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c14:	fb07 1510 	mls	r5, r7, r0, r1
 8000c18:	0c11      	lsrs	r1, r2, #16
 8000c1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c22:	428d      	cmp	r5, r1
 8000c24:	fa04 f403 	lsl.w	r4, r4, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x258>
 8000c2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c32:	d22f      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c34:	428d      	cmp	r5, r1
 8000c36:	d92d      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1b49      	subs	r1, r1, r5
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c44:	fb07 1115 	mls	r1, r7, r5, r1
 8000c48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c50:	4291      	cmp	r1, r2
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x282>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c5c:	d216      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000c5e:	4291      	cmp	r1, r2
 8000c60:	d914      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000c62:	3d02      	subs	r5, #2
 8000c64:	4462      	add	r2, ip
 8000c66:	1a52      	subs	r2, r2, r1
 8000c68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c6c:	e738      	b.n	8000ae0 <__udivmoddi4+0xfc>
 8000c6e:	4631      	mov	r1, r6
 8000c70:	4630      	mov	r0, r6
 8000c72:	e708      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000c74:	4639      	mov	r1, r7
 8000c76:	e6e6      	b.n	8000a46 <__udivmoddi4+0x62>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	e6fb      	b.n	8000a74 <__udivmoddi4+0x90>
 8000c7c:	4548      	cmp	r0, r9
 8000c7e:	d2a9      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c80:	ebb9 0802 	subs.w	r8, r9, r2
 8000c84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	e7a3      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8c:	4645      	mov	r5, r8
 8000c8e:	e7ea      	b.n	8000c66 <__udivmoddi4+0x282>
 8000c90:	462b      	mov	r3, r5
 8000c92:	e794      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c94:	4640      	mov	r0, r8
 8000c96:	e7d1      	b.n	8000c3c <__udivmoddi4+0x258>
 8000c98:	46d0      	mov	r8, sl
 8000c9a:	e77b      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9c:	3d02      	subs	r5, #2
 8000c9e:	4462      	add	r2, ip
 8000ca0:	e732      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e70a      	b.n	8000abc <__udivmoddi4+0xd8>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	e742      	b.n	8000b32 <__udivmoddi4+0x14e>

08000cac <__aeabi_idiv0>:
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <actorA_ctor>:
QEvt * ev;
/* hierarchical state machine ... */
static QState actorA_initial(actorA_t * const me, QEvt const * const e);
static QState actorA_S00(actorA_t * const me, QEvt const * const e);

void actorA_ctor(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
	actorA_t * const me = &l_actorA;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <actorA_ctor+0x3c>)
 8000cb8:	607b      	str	r3, [r7, #4]
	QActive_ctor(&me->super, Q_STATE_CAST(&actorA_initial));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <actorA_ctor+0x40>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 fbe6 	bl	8002490 <QActive_ctor>
	QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f103 0020 	add.w	r0, r3, #32
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	2300      	movs	r3, #0
 8000cce:	2207      	movs	r2, #7
 8000cd0:	f001 fca2 	bl	8002618 <QTimeEvt_ctorX>
	QTimeEvt_ctorX(&me->timeEvt1, &me->super, TIMEOUT_SIG1, 0U);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	2208      	movs	r2, #8
 8000ce0:	f001 fc9a 	bl	8002618 <QTimeEvt_ctorX>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000070 	.word	0x20000070
 8000cf0:	08000cf5 	.word	0x08000cf5

08000cf4 <actorA_initial>:

QState actorA_initial(actorA_t * const me, QEvt const * const e) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
    (void)e; /* avoid compiler warning about unused parameter */

    /* arm the time event to expire in half a second and every half second */
    QTimeEvt_armX(&me->timeEvt, BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3320      	adds	r3, #32
 8000d02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d06:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fcb4 	bl	8002678 <QTimeEvt_armX>
    QTimeEvt_armX(&me->timeEvt1, BSP_TICKS_PER_SEC/500U, BSP_TICKS_PER_SEC/500U);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3334      	adds	r3, #52	; 0x34
 8000d14:	2202      	movs	r2, #2
 8000d16:	2102      	movs	r1, #2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fcad 	bl	8002678 <QTimeEvt_armX>
    me->time_sec = 0;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	649a      	str	r2, [r3, #72]	; 0x48
    me->cnt = 0;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	64da      	str	r2, [r3, #76]	; 0x4c
    return Q_TRAN(&actorA_S00);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a03      	ldr	r2, [pc, #12]	; (8000d3c <actorA_initial+0x48>)
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	2308      	movs	r3, #8
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08000d41 	.word	0x08000d41

08000d40 <actorA_S00>:
};


uint16_t * mtrx_buff = mtrx_buffA;

QState actorA_S00(actorA_t * const me, QEvt const * const e) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	2b0a      	cmp	r3, #10
 8000d52:	f200 811c 	bhi.w	8000f8e <actorA_S00+0x24e>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <actorA_S00+0x1c>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000d89 	.word	0x08000d89
 8000d60:	08000f8f 	.word	0x08000f8f
 8000d64:	08000f8f 	.word	0x08000f8f
 8000d68:	08000f8f 	.word	0x08000f8f
 8000d6c:	08000f8f 	.word	0x08000f8f
 8000d70:	08000f8f 	.word	0x08000f8f
 8000d74:	08000d9b 	.word	0x08000d9b
 8000d78:	08000e17 	.word	0x08000e17
 8000d7c:	08000f5f 	.word	0x08000f5f
 8000d80:	08000f77 	.word	0x08000f77
 8000d84:	08000f35 	.word	0x08000f35
        case Q_ENTRY_SIG: {
        	Digit_Number(me->cnt);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fc54 	bl	800163c <Digit_Number>
            status = Q_HANDLED();
 8000d94:	2303      	movs	r3, #3
 8000d96:	77fb      	strb	r3, [r7, #31]

            // HAL_GPIO_WritePin(MTRX_CRST_GPIO_Port, MTRX_CRST_Pin, SET);
            // HAL_GPIO_WritePin(MTRX_CRST_GPIO_Port, MTRX_CRST_Pin, RESET);

            break;
 8000d98:	e0ff      	b.n	8000f9a <actorA_S00+0x25a>
        }
        case TIMEOUT_SIG: {
        	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4884      	ldr	r0, [pc, #528]	; (8000fb0 <actorA_S00+0x270>)
 8000d9e:	f002 f9ce 	bl	800313e <HAL_GPIO_TogglePin>

        	// MPU MPU-9250 addr 1101000 = 68 hex
        	// read X accel
        	uint8_t tx_data[8];
        	uint8_t rx_data[8];
        	tx_data[0] = '\x41';
 8000da2:	2341      	movs	r3, #65	; 0x41
 8000da4:	743b      	strb	r3, [r7, #16]

        	HAL_I2C_Master_Transmit(&hi2c2, 0x68 << 1, tx_data , 1, 10);
 8000da6:	f107 0210 	add.w	r2, r7, #16
 8000daa:	230a      	movs	r3, #10
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2301      	movs	r3, #1
 8000db0:	21d0      	movs	r1, #208	; 0xd0
 8000db2:	4880      	ldr	r0, [pc, #512]	; (8000fb4 <actorA_S00+0x274>)
 8000db4:	f002 fb22 	bl	80033fc <HAL_I2C_Master_Transmit>
        	HAL_I2C_Master_Receive(&hi2c2, 0x68 << 1, rx_data , 2, 10);
 8000db8:	f107 0208 	add.w	r2, r7, #8
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	21d0      	movs	r1, #208	; 0xd0
 8000dc4:	487b      	ldr	r0, [pc, #492]	; (8000fb4 <actorA_S00+0x274>)
 8000dc6:	f002 fc17 	bl	80035f8 <HAL_I2C_Master_Receive>

        	int temperature = (rx_data[1] | (((int)rx_data[0]) << 8))/321. + 21;
 8000dca:	7a7b      	ldrb	r3, [r7, #9]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	7a3b      	ldrb	r3, [r7, #8]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fb49 	bl	800046c <__aeabi_i2d>
 8000dda:	a373      	add	r3, pc, #460	; (adr r3, 8000fa8 <actorA_S00+0x268>)
 8000ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de0:	f7ff fcd8 	bl	8000794 <__aeabi_ddiv>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	4b71      	ldr	r3, [pc, #452]	; (8000fb8 <actorA_S00+0x278>)
 8000df2:	f7ff f9ef 	bl	80001d4 <__adddf3>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f7ff fdb1 	bl	8000964 <__aeabi_d2iz>
 8000e02:	4603      	mov	r3, r0
 8000e04:	61bb      	str	r3, [r7, #24]

        	Digit_Number(temperature);
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fc16 	bl	800163c <Digit_Number>

        	// TBD : value 0...255 printed on digits 0 ... 99 !

            status = Q_HANDLED();
 8000e10:	2303      	movs	r3, #3
 8000e12:	77fb      	strb	r3, [r7, #31]
            break;
 8000e14:	e0c1      	b.n	8000f9a <actorA_S00+0x25a>
        }

        case TIMEOUT_SIG1: {
        	uint8_t rot = Rot_Read();
 8000e16:	f000 fd01 	bl	800181c <Rot_Read>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	77bb      	strb	r3, [r7, #30]

        	static uint8_t mtrx_cntr = 0, mtrx_idx = 0;
        	static uint8_t btn_prev, btn;
        	btn = HAL_GPIO_ReadPin(ROTB_GPIO_Port, ROTB_Pin);
 8000e1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e22:	4866      	ldr	r0, [pc, #408]	; (8000fbc <actorA_S00+0x27c>)
 8000e24:	f002 f95a 	bl	80030dc <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b64      	ldr	r3, [pc, #400]	; (8000fc0 <actorA_S00+0x280>)
 8000e2e:	701a      	strb	r2, [r3, #0]

        	if (btn ^ btn_prev) {
 8000e30:	4b63      	ldr	r3, [pc, #396]	; (8000fc0 <actorA_S00+0x280>)
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	4b63      	ldr	r3, [pc, #396]	; (8000fc4 <actorA_S00+0x284>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d010      	beq.n	8000e5e <actorA_S00+0x11e>
        	    ev =  Q_NEW(QEvt, ROT_BTN_SIG);
 8000e3c:	220b      	movs	r2, #11
 8000e3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e42:	2004      	movs	r0, #4
 8000e44:	f001 f948 	bl	80020d8 <QF_newX_>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a5f      	ldr	r2, [pc, #380]	; (8000fc8 <actorA_S00+0x288>)
 8000e4c:	6013      	str	r3, [r2, #0]
        	    QActive_post_((QActive *)me, ev, QF_NO_MARGIN, NULL);
 8000e4e:	4b5e      	ldr	r3, [pc, #376]	; (8000fc8 <actorA_S00+0x288>)
 8000e50:	6819      	ldr	r1, [r3, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 ffb3 	bl	8001dc4 <QActive_post_>
        	}

        	btn_prev = btn;
 8000e5e:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <actorA_S00+0x280>)
 8000e60:	781a      	ldrb	r2, [r3, #0]
 8000e62:	4b58      	ldr	r3, [pc, #352]	; (8000fc4 <actorA_S00+0x284>)
 8000e64:	701a      	strb	r2, [r3, #0]

        	if (rot == 2) {
 8000e66:	7fbb      	ldrb	r3, [r7, #30]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d111      	bne.n	8000e90 <actorA_S00+0x150>
        	    ev =  Q_NEW(QEvt, ROT_UP_SIG);
 8000e6c:	2209      	movs	r2, #9
 8000e6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e72:	2004      	movs	r0, #4
 8000e74:	f001 f930 	bl	80020d8 <QF_newX_>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a53      	ldr	r2, [pc, #332]	; (8000fc8 <actorA_S00+0x288>)
 8000e7c:	6013      	str	r3, [r2, #0]
        	    QActive_post_((QActive *)me, ev, QF_NO_MARGIN, NULL);
 8000e7e:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <actorA_S00+0x288>)
 8000e80:	6819      	ldr	r1, [r3, #0]
 8000e82:	2300      	movs	r3, #0
 8000e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 ff9b 	bl	8001dc4 <QActive_post_>
 8000e8e:	e013      	b.n	8000eb8 <actorA_S00+0x178>
        	} else if (rot == 3) {
 8000e90:	7fbb      	ldrb	r3, [r7, #30]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d110      	bne.n	8000eb8 <actorA_S00+0x178>
        	    ev =  Q_NEW(QEvt, ROT_DN_SIG);
 8000e96:	220a      	movs	r2, #10
 8000e98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e9c:	2004      	movs	r0, #4
 8000e9e:	f001 f91b 	bl	80020d8 <QF_newX_>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a48      	ldr	r2, [pc, #288]	; (8000fc8 <actorA_S00+0x288>)
 8000ea6:	6013      	str	r3, [r2, #0]
        	    QActive_post_((QActive *)me, ev, QF_NO_MARGIN, NULL);
 8000ea8:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <actorA_S00+0x288>)
 8000eaa:	6819      	ldr	r1, [r3, #0]
 8000eac:	2300      	movs	r3, #0
 8000eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 ff86 	bl	8001dc4 <QActive_post_>
        	}

        	mtrx_cntr ++;
 8000eb8:	4b44      	ldr	r3, [pc, #272]	; (8000fcc <actorA_S00+0x28c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <actorA_S00+0x28c>)
 8000ec2:	701a      	strb	r2, [r3, #0]
        	if (mtrx_cntr == 200) {
 8000ec4:	4b41      	ldr	r3, [pc, #260]	; (8000fcc <actorA_S00+0x28c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2bc8      	cmp	r3, #200	; 0xc8
 8000eca:	d10f      	bne.n	8000eec <actorA_S00+0x1ac>
        		mtrx_cntr = 0;
 8000ecc:	4b3f      	ldr	r3, [pc, #252]	; (8000fcc <actorA_S00+0x28c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
        		mtrx_idx = 0;
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <actorA_S00+0x290>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
        		mtrx_buff = (mtrx_buff == mtrx_buffC) ? mtrx_buffD : mtrx_buffC;
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <actorA_S00+0x294>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a3e      	ldr	r2, [pc, #248]	; (8000fd8 <actorA_S00+0x298>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <actorA_S00+0x1a6>
 8000ee2:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <actorA_S00+0x29c>)
 8000ee4:	e000      	b.n	8000ee8 <actorA_S00+0x1a8>
 8000ee6:	4b3c      	ldr	r3, [pc, #240]	; (8000fd8 <actorA_S00+0x298>)
 8000ee8:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <actorA_S00+0x294>)
 8000eea:	6013      	str	r3, [r2, #0]
        	}

       		Matrix_Update(mtrx_buff[(mtrx_idx)%10]);
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <actorA_S00+0x294>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	4b37      	ldr	r3, [pc, #220]	; (8000fd0 <actorA_S00+0x290>)
 8000ef2:	781a      	ldrb	r2, [r3, #0]
 8000ef4:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <actorA_S00+0x2a0>)
 8000ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8000efa:	08d9      	lsrs	r1, r3, #3
 8000efc:	460b      	mov	r3, r1
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4403      	add	r3, r0
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fc1c 	bl	800174c <Matrix_Update>

        	mtrx_idx ++;
 8000f14:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <actorA_S00+0x290>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <actorA_S00+0x290>)
 8000f1e:	701a      	strb	r2, [r3, #0]
        	if (mtrx_idx == 10) {
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <actorA_S00+0x290>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b0a      	cmp	r3, #10
 8000f26:	d102      	bne.n	8000f2e <actorA_S00+0x1ee>
        		mtrx_idx = 0;
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <actorA_S00+0x290>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
        	}


        	status = Q_HANDLED();
 8000f2e:	2303      	movs	r3, #3
 8000f30:	77fb      	strb	r3, [r7, #31]
            break;
 8000f32:	e032      	b.n	8000f9a <actorA_S00+0x25a>
        }

        case ROT_BTN_SIG: {
        	static uint8_t x = 0;
        	x++;
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <actorA_S00+0x2a4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <actorA_S00+0x2a4>)
 8000f3e:	701a      	strb	r2, [r3, #0]
        	if (x % 2) {
 8000f40:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <actorA_S00+0x2a4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <actorA_S00+0x214>
        		Buzz_On();
 8000f4e:	f000 fc51 	bl	80017f4 <Buzz_On>
 8000f52:	e001      	b.n	8000f58 <actorA_S00+0x218>
        	} else {
        		Buzz_Off();
 8000f54:	f000 fc58 	bl	8001808 <Buzz_Off>
        	}
            status = Q_HANDLED();
 8000f58:	2303      	movs	r3, #3
 8000f5a:	77fb      	strb	r3, [r7, #31]
            break;
 8000f5c:	e01d      	b.n	8000f9a <actorA_S00+0x25a>
        }

        case ROT_UP_SIG: {
        	if (me->cnt < 99) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	2b62      	cmp	r3, #98	; 0x62
 8000f64:	dc04      	bgt.n	8000f70 <actorA_S00+0x230>
        		me->cnt++;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	64da      	str	r2, [r3, #76]	; 0x4c
        		// Digit_Number(me->cnt);

        	}
            status = Q_HANDLED();
 8000f70:	2303      	movs	r3, #3
 8000f72:	77fb      	strb	r3, [r7, #31]
            break;
 8000f74:	e011      	b.n	8000f9a <actorA_S00+0x25a>
        }

        case ROT_DN_SIG: {
        	if (me->cnt > 0) {
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	dd04      	ble.n	8000f88 <actorA_S00+0x248>
        		me->cnt--;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	64da      	str	r2, [r3, #76]	; 0x4c
        		// Digit_Number(me->cnt);

        	}
            status = Q_HANDLED();
 8000f88:	2303      	movs	r3, #3
 8000f8a:	77fb      	strb	r3, [r7, #31]
            break;
 8000f8c:	e005      	b.n	8000f9a <actorA_S00+0x25a>
        }

        default: {
            status = Q_SUPER(&QHsm_top);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <actorA_S00+0x2a8>)
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	2300      	movs	r3, #0
 8000f96:	77fb      	strb	r3, [r7, #31]
            break;
 8000f98:	bf00      	nop
        }
    }
    return status;
 8000f9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	00000000 	.word	0x00000000
 8000fac:	40741000 	.word	0x40741000
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	200000c8 	.word	0x200000c8
 8000fb8:	40350000 	.word	0x40350000
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	200000c0 	.word	0x200000c0
 8000fc4:	200000c1 	.word	0x200000c1
 8000fc8:	2000006c 	.word	0x2000006c
 8000fcc:	200000c2 	.word	0x200000c2
 8000fd0:	200000c3 	.word	0x200000c3
 8000fd4:	2000003c 	.word	0x2000003c
 8000fd8:	20000014 	.word	0x20000014
 8000fdc:	20000028 	.word	0x20000028
 8000fe0:	cccccccd 	.word	0xcccccccd
 8000fe4:	200000c4 	.word	0x200000c4
 8000fe8:	0800192d 	.word	0x0800192d

08000fec <QF_onStartup>:
    * To avoid problems, a dummy definition for HAL_InitTick() is provided
    * in the file stm32l5xx_hal_msp.c. The SystTick is configured and
    * started later in QF_onStartup().
    */
}
void QF_onStartup(void) {
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
    /* assign all priority bits for preemption-prio. and none to sub-prio.
    * NOTE: this might have been changed by STM32Cube.
    */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <QV_onIdle>:
/*..........................................................................*/
void QF_onCleanup(void) {
}

/*..........................................................................*/
void QV_onIdle(void) { /* CATION: called with interrupts DISABLED, NOTE01 */
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
	QF_INT_ENABLE(); /* just enable interrupts */
 8000ffe:	2300      	movs	r3, #0
 8001000:	f383 8811 	msr	BASEPRI, r3
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <Q_onAssert>:

/*..........................................................................*/
Q_NORETURN Q_onAssert(char const * const module, int_t const loc) {
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b085      	sub	sp, #20
 8001028:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102a:	f001 fd63 	bl	8002af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102e:	f000 f839 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001032:	f000 f91d 	bl	8001270 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001036:	f000 f8c1 	bl	80011bc <MX_TIM4_Init>
  MX_I2C2_Init();
 800103a:	f000 f891 	bl	8001160 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  QF_init();
 800103e:	f001 fc55 	bl	80028ec <QF_init>
  QF_poolInit(_buff, 1024 * 4, 16);
 8001042:	2210      	movs	r2, #16
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <main+0x70>)
 800104a:	f001 f803 	bl	8002054 <QF_poolInit>

  /* instantiate and start the active objects... */
  actorA_ctor();
 800104e:	f7ff fe2f 	bl	8000cb0 <actorA_ctor>
  QACTIVE_START(AO_actorA,      /* AO pointer to start */
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <main+0x74>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d103      	bne.n	8001064 <main+0x40>
 800105c:	216b      	movs	r1, #107	; 0x6b
 800105e:	480f      	ldr	r0, [pc, #60]	; (800109c <main+0x78>)
 8001060:	f7ff ffd5 	bl	800100e <Q_onAssert>
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <main+0x74>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689c      	ldr	r4, [r3, #8]
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <main+0x74>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	2300      	movs	r3, #0
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2300      	movs	r3, #0
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	2300      	movs	r3, #0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	230a      	movs	r3, #10
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <main+0x7c>)
 8001080:	2101      	movs	r1, #1
 8001082:	47a0      	blx	r4
                Q_DIM(l_blinkyQSto), /* lenght of the queue [entries] */
                (void *)0,      /* stack storage (not used in QK) */
                0U,             /* stack size [bytes] (not used in QK) */
                (QEvt *)0);     /* initial event (or 0) */

  return QF_run(); /* run the QF application */
 8001084:	f001 fc50 	bl	8002928 <QF_run>
 8001088:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800108a:	4618      	mov	r0, r3
 800108c:	3704      	adds	r7, #4
 800108e:	46bd      	mov	sp, r7
 8001090:	bd90      	pop	{r4, r7, pc}
 8001092:	bf00      	nop
 8001094:	2000018c 	.word	0x2000018c
 8001098:	08005410 	.word	0x08005410
 800109c:	08005414 	.word	0x08005414
 80010a0:	20000164 	.word	0x20000164

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 f974 	bl	80053a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SystemClock_Config+0xb4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <SystemClock_Config+0xb4>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <SystemClock_Config+0xb4>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <SystemClock_Config+0xb8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <SystemClock_Config+0xb8>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <SystemClock_Config+0xb8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f002 ffc3 	bl	80040a0 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001120:	f000 f97a 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fa26 	bl	8004590 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800114a:	f000 f965 	bl	8001418 <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C2_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_I2C2_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C2_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_I2C2_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C2_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_I2C2_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_I2C2_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_I2C2_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_I2C2_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_I2C2_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_I2C2_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2C2_Init+0x50>)
 800119e:	f001 ffe9 	bl	8003174 <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011a8:	f000 f936 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200000c8 	.word	0x200000c8
 80011b4:	40005800 	.word	0x40005800
 80011b8:	000186a0 	.word	0x000186a0

080011bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011de:	4b22      	ldr	r3, [pc, #136]	; (8001268 <MX_TIM4_Init+0xac>)
 80011e0:	4a22      	ldr	r2, [pc, #136]	; (800126c <MX_TIM4_Init+0xb0>)
 80011e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <MX_TIM4_Init+0xac>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_TIM4_Init+0xac>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_TIM4_Init+0xac>)
 80011f2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80011f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_TIM4_Init+0xac>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_TIM4_Init+0xac>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001204:	4818      	ldr	r0, [pc, #96]	; (8001268 <MX_TIM4_Init+0xac>)
 8001206:	f003 fb8f 	bl	8004928 <HAL_TIM_PWM_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001210:	f000 f902 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800121c:	f107 0320 	add.w	r3, r7, #32
 8001220:	4619      	mov	r1, r3
 8001222:	4811      	ldr	r0, [pc, #68]	; (8001268 <MX_TIM4_Init+0xac>)
 8001224:	f004 f840 	bl	80052a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800122e:	f000 f8f3 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001232:	2360      	movs	r3, #96	; 0x60
 8001234:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8001236:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800123a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2208      	movs	r2, #8
 8001248:	4619      	mov	r1, r3
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_TIM4_Init+0xac>)
 800124c:	f003 fcf4 	bl	8004c38 <HAL_TIM_PWM_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001256:	f000 f8df 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <MX_TIM4_Init+0xac>)
 800125c:	f000 f974 	bl	8001548 <HAL_TIM_MspPostInit>

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000011c 	.word	0x2000011c
 800126c:	40000800 	.word	0x40000800

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b5e      	ldr	r3, [pc, #376]	; (8001404 <MX_GPIO_Init+0x194>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a5d      	ldr	r2, [pc, #372]	; (8001404 <MX_GPIO_Init+0x194>)
 8001290:	f043 0320 	orr.w	r3, r3, #32
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b5b      	ldr	r3, [pc, #364]	; (8001404 <MX_GPIO_Init+0x194>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b57      	ldr	r3, [pc, #348]	; (8001404 <MX_GPIO_Init+0x194>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a56      	ldr	r2, [pc, #344]	; (8001404 <MX_GPIO_Init+0x194>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b54      	ldr	r3, [pc, #336]	; (8001404 <MX_GPIO_Init+0x194>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b50      	ldr	r3, [pc, #320]	; (8001404 <MX_GPIO_Init+0x194>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a4f      	ldr	r2, [pc, #316]	; (8001404 <MX_GPIO_Init+0x194>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b4d      	ldr	r3, [pc, #308]	; (8001404 <MX_GPIO_Init+0x194>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b49      	ldr	r3, [pc, #292]	; (8001404 <MX_GPIO_Init+0x194>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a48      	ldr	r2, [pc, #288]	; (8001404 <MX_GPIO_Init+0x194>)
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b46      	ldr	r3, [pc, #280]	; (8001404 <MX_GPIO_Init+0x194>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b42      	ldr	r3, [pc, #264]	; (8001404 <MX_GPIO_Init+0x194>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a41      	ldr	r2, [pc, #260]	; (8001404 <MX_GPIO_Init+0x194>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <MX_GPIO_Init+0x194>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|MTRX_CCLK_Pin|MTRX_CS_Pin|SCK_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2139      	movs	r1, #57	; 0x39
 8001316:	483c      	ldr	r0, [pc, #240]	; (8001408 <MX_GPIO_Init+0x198>)
 8001318:	f001 fef8 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2104      	movs	r1, #4
 8001320:	483a      	ldr	r0, [pc, #232]	; (800140c <MX_GPIO_Init+0x19c>)
 8001322:	f001 fef3 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTRX_LRST_GPIO_Port, MTRX_LRST_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800132c:	4838      	ldr	r0, [pc, #224]	; (8001410 <MX_GPIO_Init+0x1a0>)
 800132e:	f001 feed 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001338:	4835      	ldr	r0, [pc, #212]	; (8001410 <MX_GPIO_Init+0x1a0>)
 800133a:	f001 fee7 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTRX_CRST_GPIO_Port, MTRX_CRST_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001344:	4833      	ldr	r0, [pc, #204]	; (8001414 <MX_GPIO_Init+0x1a4>)
 8001346:	f001 fee1 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	2120      	movs	r1, #32
 800134e:	482f      	ldr	r0, [pc, #188]	; (800140c <MX_GPIO_Init+0x19c>)
 8001350:	f001 fedc 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin MTRX_CCLK_Pin MTRX_CS_Pin SCK_Pin */
  GPIO_InitStruct.Pin = LED_Pin|MTRX_CCLK_Pin|MTRX_CS_Pin|SCK_Pin;
 8001354:	2339      	movs	r3, #57	; 0x39
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4827      	ldr	r0, [pc, #156]	; (8001408 <MX_GPIO_Init+0x198>)
 800136c:	f001 fd1a 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : K2_Pin K3_Pin */
  GPIO_InitStruct.Pin = K2_Pin|K3_Pin;
 8001370:	2303      	movs	r3, #3
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4822      	ldr	r0, [pc, #136]	; (800140c <MX_GPIO_Init+0x19c>)
 8001384:	f001 fd0e 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin SDI_Pin */
  GPIO_InitStruct.Pin = CS_Pin|SDI_Pin;
 8001388:	2324      	movs	r3, #36	; 0x24
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	481b      	ldr	r0, [pc, #108]	; (800140c <MX_GPIO_Init+0x19c>)
 80013a0:	f001 fd00 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTB_Pin */
  GPIO_InitStruct.Pin = ROTB_Pin;
 80013a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROTB_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4815      	ldr	r0, [pc, #84]	; (8001410 <MX_GPIO_Init+0x1a0>)
 80013ba:	f001 fcf3 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MTRX_LRST_Pin RST_Pin */
  GPIO_InitStruct.Pin = MTRX_LRST_Pin|RST_Pin;
 80013be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	480e      	ldr	r0, [pc, #56]	; (8001410 <MX_GPIO_Init+0x1a0>)
 80013d8:	f001 fce4 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MTRX_CRST_Pin */
  GPIO_InitStruct.Pin = MTRX_CRST_Pin;
 80013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MTRX_CRST_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_GPIO_Init+0x1a4>)
 80013f6:	f001 fcd5 	bl	8002da4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020400 	.word	0x40020400
 8001410:	40021000 	.word	0x40021000
 8001414:	40020c00 	.word	0x40020c00

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001420:	e7fe      	b.n	8001420 <Error_Handler+0x8>
	...

08001424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_MspInit+0x4c>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_MspInit+0x4c>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_I2C_MspInit+0x84>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d12b      	bne.n	80014ee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_I2C_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_I2C_MspInit+0x88>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_I2C_MspInit+0x88>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014b2:	2303      	movs	r3, #3
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b6:	2312      	movs	r3, #18
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014c2:	2304      	movs	r3, #4
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <HAL_I2C_MspInit+0x8c>)
 80014ce:	f001 fc69 	bl	8002da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_I2C_MspInit+0x88>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_I2C_MspInit+0x88>)
 80014dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_I2C_MspInit+0x88>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40005800 	.word	0x40005800
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021400 	.word	0x40021400

08001504 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_TIM_PWM_MspInit+0x3c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10d      	bne.n	8001532 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_TIM_PWM_MspInit+0x40>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_TIM_PWM_MspInit+0x40>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_TIM_PWM_MspInit+0x40>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40000800 	.word	0x40000800
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_TIM_MspPostInit+0x68>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d11e      	bne.n	80015a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_TIM_MspPostInit+0x6c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_TIM_MspPostInit+0x6c>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_TIM_MspPostInit+0x6c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001586:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800158a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001598:	2302      	movs	r3, #2
 800159a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	4619      	mov	r1, r3
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <HAL_TIM_MspPostInit+0x70>)
 80015a4:	f001 fbfe 	bl	8002da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40000800 	.word	0x40000800
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020c00 	.word	0x40020c00

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <NMI_Handler+0x4>

080015c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <HardFault_Handler+0x4>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <MemManage_Handler+0x4>

080015ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <UsageFault_Handler+0x4>

080015da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	QTIMEEVT_TICK_X(0U, (void *)0);
 8001608:	2100      	movs	r1, #0
 800160a:	2000      	movs	r0, #0
 800160c:	f001 f892 	bl	8002734 <QTimeEvt_tick_>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001610:	f001 fac2 	bl	8002b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <SystemInit+0x20>)
 800161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <SystemInit+0x20>)
 8001624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <Digit_Number>:

void Digit_Init(void) {
	Digit_Update(digit_state);
}

void Digit_Number(uint16_t number) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
	digit_state = ((uint16_t)digits[(number/10)%10]<<8) | digits[number % 10];
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	4a18      	ldr	r2, [pc, #96]	; (80016ac <Digit_Number+0x70>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	08db      	lsrs	r3, r3, #3
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <Digit_Number+0x70>)
 8001654:	fba3 1302 	umull	r1, r3, r3, r2
 8001658:	08d9      	lsrs	r1, r3, #3
 800165a:	460b      	mov	r3, r1
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	b29b      	uxth	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <Digit_Number+0x74>)
 800166a:	5c9b      	ldrb	r3, [r3, r2]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b218      	sxth	r0, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <Digit_Number+0x70>)
 8001674:	fba3 1302 	umull	r1, r3, r3, r2
 8001678:	08d9      	lsrs	r1, r3, #3
 800167a:	460b      	mov	r3, r1
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	b29b      	uxth	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Digit_Number+0x74>)
 800168a:	5c9b      	ldrb	r3, [r3, r2]
 800168c:	b21b      	sxth	r3, r3
 800168e:	4303      	orrs	r3, r0
 8001690:	b21b      	sxth	r3, r3
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <Digit_Number+0x78>)
 8001696:	801a      	strh	r2, [r3, #0]
	Digit_Update(digit_state);
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <Digit_Number+0x78>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f80b 	bl	80016b8 <Digit_Update>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	cccccccd 	.word	0xcccccccd
 80016b0:	08005440 	.word	0x08005440
 80016b4:	2000118c 	.word	0x2000118c

080016b8 <Digit_Update>:
			break;
	}
	Digit_Update(digit_state);
}

static void Digit_Update(uint16_t data) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
	uint32_t  j = 16;
 80016c2:	2310      	movs	r3, #16
 80016c4:	60fb      	str	r3, [r7, #12]

	// negative reset pulse
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016cc:	481c      	ldr	r0, [pc, #112]	; (8001740 <Digit_Update+0x88>)
 80016ce:	f001 fd1d 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d8:	4819      	ldr	r0, [pc, #100]	; (8001740 <Digit_Update+0x88>)
 80016da:	f001 fd17 	bl	800310c <HAL_GPIO_WritePin>

	while (j--) { // while(data) -- BAD!!!!
 80016de:	e01c      	b.n	800171a <Digit_Update+0x62>

		  // set data bit
		  if (data & 0x1) {
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d005      	beq.n	80016f6 <Digit_Update+0x3e>
			  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2120      	movs	r1, #32
 80016ee:	4815      	ldr	r0, [pc, #84]	; (8001744 <Digit_Update+0x8c>)
 80016f0:	f001 fd0c 	bl	800310c <HAL_GPIO_WritePin>
 80016f4:	e004      	b.n	8001700 <Digit_Update+0x48>
		  } else {
			  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2120      	movs	r1, #32
 80016fa:	4812      	ldr	r0, [pc, #72]	; (8001744 <Digit_Update+0x8c>)
 80016fc:	f001 fd06 	bl	800310c <HAL_GPIO_WritePin>
		  }

		  // clock pulse
		  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2120      	movs	r1, #32
 8001704:	4810      	ldr	r0, [pc, #64]	; (8001748 <Digit_Update+0x90>)
 8001706:	f001 fd01 	bl	800310c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2120      	movs	r1, #32
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <Digit_Update+0x90>)
 8001710:	f001 fcfc 	bl	800310c <HAL_GPIO_WritePin>

		  data >>= 1;
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	80fb      	strh	r3, [r7, #6]
	while (j--) { // while(data) -- BAD!!!!
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	60fa      	str	r2, [r7, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1dd      	bne.n	80016e0 <Digit_Update+0x28>
	}

	// positive update (write) pulse
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	2104      	movs	r1, #4
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <Digit_Update+0x8c>)
 800172a:	f001 fcef 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2104      	movs	r1, #4
 8001732:	4804      	ldr	r0, [pc, #16]	; (8001744 <Digit_Update+0x8c>)
 8001734:	f001 fcea 	bl	800310c <HAL_GPIO_WritePin>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	40020400 	.word	0x40020400
 8001748:	40020000 	.word	0x40020000

0800174c <Matrix_Update>:

void Matrix_Update(uint16_t data) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
	uint32_t  j = 16;
 8001756:	2310      	movs	r3, #16
 8001758:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(MTRX_CCLK_GPIO_Port, MTRX_CCLK_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2108      	movs	r1, #8
 800175e:	4822      	ldr	r0, [pc, #136]	; (80017e8 <Matrix_Update+0x9c>)
 8001760:	f001 fcd4 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MTRX_CCLK_GPIO_Port, MTRX_CCLK_Pin, GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	2108      	movs	r1, #8
 8001768:	481f      	ldr	r0, [pc, #124]	; (80017e8 <Matrix_Update+0x9c>)
 800176a:	f001 fccf 	bl	800310c <HAL_GPIO_WritePin>

	// negative reset pulse
	HAL_GPIO_WritePin(MTRX_LRST_GPIO_Port, MTRX_LRST_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001774:	481d      	ldr	r0, [pc, #116]	; (80017ec <Matrix_Update+0xa0>)
 8001776:	f001 fcc9 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MTRX_LRST_GPIO_Port, MTRX_LRST_Pin, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001780:	481a      	ldr	r0, [pc, #104]	; (80017ec <Matrix_Update+0xa0>)
 8001782:	f001 fcc3 	bl	800310c <HAL_GPIO_WritePin>

	while (j--) { // while(data) -- BAD!!!!
 8001786:	e01b      	b.n	80017c0 <Matrix_Update+0x74>

		  // set data bit
		  if (data & 0x8000) {
 8001788:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178c:	2b00      	cmp	r3, #0
 800178e:	da05      	bge.n	800179c <Matrix_Update+0x50>
			  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2120      	movs	r1, #32
 8001794:	4816      	ldr	r0, [pc, #88]	; (80017f0 <Matrix_Update+0xa4>)
 8001796:	f001 fcb9 	bl	800310c <HAL_GPIO_WritePin>
 800179a:	e004      	b.n	80017a6 <Matrix_Update+0x5a>
		  } else {
			  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	2120      	movs	r1, #32
 80017a0:	4813      	ldr	r0, [pc, #76]	; (80017f0 <Matrix_Update+0xa4>)
 80017a2:	f001 fcb3 	bl	800310c <HAL_GPIO_WritePin>
		  }

		  // clock pulse
		  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	2120      	movs	r1, #32
 80017aa:	480f      	ldr	r0, [pc, #60]	; (80017e8 <Matrix_Update+0x9c>)
 80017ac:	f001 fcae 	bl	800310c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2120      	movs	r1, #32
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <Matrix_Update+0x9c>)
 80017b6:	f001 fca9 	bl	800310c <HAL_GPIO_WritePin>

		  data <<= 1;
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	80fb      	strh	r3, [r7, #6]
	while (j--) { // while(data) -- BAD!!!!
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1e5a      	subs	r2, r3, #1
 80017c4:	60fa      	str	r2, [r7, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1de      	bne.n	8001788 <Matrix_Update+0x3c>
	}

	// positive update (write) pulse
	HAL_GPIO_WritePin(MTRX_CS_GPIO_Port, MTRX_CS_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2110      	movs	r1, #16
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <Matrix_Update+0x9c>)
 80017d0:	f001 fc9c 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MTRX_CS_GPIO_Port, MTRX_CS_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2110      	movs	r1, #16
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <Matrix_Update+0x9c>)
 80017da:	f001 fc97 	bl	800310c <HAL_GPIO_WritePin>


}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40020400 	.word	0x40020400

080017f4 <Buzz_On>:

void Buzz_On(void) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80017f8:	2108      	movs	r1, #8
 80017fa:	4802      	ldr	r0, [pc, #8]	; (8001804 <Buzz_On+0x10>)
 80017fc:	f003 f8e4 	bl	80049c8 <HAL_TIM_PWM_Start>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000011c 	.word	0x2000011c

08001808 <Buzz_Off>:

void Buzz_Off(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800180c:	2108      	movs	r1, #8
 800180e:	4802      	ldr	r0, [pc, #8]	; (8001818 <Buzz_Off+0x10>)
 8001810:	f003 f9a2 	bl	8004b58 <HAL_TIM_PWM_Stop>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000011c 	.word	0x2000011c

0800181c <Rot_Read>:
void Buzz_SetFreq(uint32_t freq) {
	TIM4->ARR = freq;
	TIM4->CCR3 = freq;
}

uint8_t Rot_Read(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0

	uint8_t ret = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	71fb      	strb	r3, [r7, #7]

	timer_enc++;
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <Rot_Read+0xc0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	4a2b      	ldr	r2, [pc, #172]	; (80018dc <Rot_Read+0xc0>)
 800182e:	6013      	str	r3, [r2, #0]

	static uint8_t key2 = 1, key3 = 1, key2_prev = 1, key3_prev = 1;

	key2 = HAL_GPIO_ReadPin(K2_GPIO_Port, K2_Pin);
 8001830:	2101      	movs	r1, #1
 8001832:	482b      	ldr	r0, [pc, #172]	; (80018e0 <Rot_Read+0xc4>)
 8001834:	f001 fc52 	bl	80030dc <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <Rot_Read+0xc8>)
 800183e:	701a      	strb	r2, [r3, #0]
	key3 = HAL_GPIO_ReadPin(K3_GPIO_Port, K3_Pin);
 8001840:	2102      	movs	r1, #2
 8001842:	4827      	ldr	r0, [pc, #156]	; (80018e0 <Rot_Read+0xc4>)
 8001844:	f001 fc4a 	bl	80030dc <HAL_GPIO_ReadPin>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <Rot_Read+0xcc>)
 800184e:	701a      	strb	r2, [r3, #0]

	if(key2 ^ key2_prev) {
 8001850:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <Rot_Read+0xc8>)
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <Rot_Read+0xd0>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d004      	beq.n	8001866 <Rot_Read+0x4a>
		timer_key2 = timer_enc;
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <Rot_Read+0xc0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a23      	ldr	r2, [pc, #140]	; (80018f0 <Rot_Read+0xd4>)
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e009      	b.n	800187a <Rot_Read+0x5e>
	} else if(key3 ^ key3_prev) {
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <Rot_Read+0xcc>)
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <Rot_Read+0xd8>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d003      	beq.n	800187a <Rot_Read+0x5e>
		timer_key3 = timer_enc;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <Rot_Read+0xc0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <Rot_Read+0xdc>)
 8001878:	6013      	str	r3, [r2, #0]
	}

	key2_prev = key2;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <Rot_Read+0xc8>)
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <Rot_Read+0xd0>)
 8001880:	701a      	strb	r2, [r3, #0]
	key3_prev = key3;
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <Rot_Read+0xcc>)
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <Rot_Read+0xd8>)
 8001888:	701a      	strb	r2, [r3, #0]

	if (timer_key2 != 0 && abs(timer_key3 - timer_key2) < 11) {
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <Rot_Read+0xd4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d01f      	beq.n	80018d2 <Rot_Read+0xb6>
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <Rot_Read+0xdc>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <Rot_Read+0xd4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f113 0f0a 	cmn.w	r3, #10
 80018a0:	db17      	blt.n	80018d2 <Rot_Read+0xb6>
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <Rot_Read+0xdc>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <Rot_Read+0xd4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b0a      	cmp	r3, #10
 80018ae:	dc10      	bgt.n	80018d2 <Rot_Read+0xb6>
		// e.sig = (timer_key3 > timer_key2) + ROT_UP_SIG;

		if (timer_key3 > timer_key2) {
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <Rot_Read+0xdc>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <Rot_Read+0xd4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d902      	bls.n	80018c2 <Rot_Read+0xa6>
			// e.sig = ROT_UP_SIG;
			ret = 2;
 80018bc:	2302      	movs	r3, #2
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	e001      	b.n	80018c6 <Rot_Read+0xaa>
		} else {
			// e.sig = ROT_DN_SIG;
			ret = 3;
 80018c2:	2303      	movs	r3, #3
 80018c4:	71fb      	strb	r3, [r7, #7]
		}

		timer_key2 = 0;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <Rot_Read+0xd4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
		timer_key3 = 0;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <Rot_Read+0xdc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
	}

	return ret;
 80018d2:	79fb      	ldrb	r3, [r7, #7]

}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20001198 	.word	0x20001198
 80018e0:	40020400 	.word	0x40020400
 80018e4:	20000044 	.word	0x20000044
 80018e8:	20000045 	.word	0x20000045
 80018ec:	20000046 	.word	0x20000046
 80018f0:	20001190 	.word	0x20001190
 80018f4:	20000047 	.word	0x20000047
 80018f8:	20001194 	.word	0x20001194

080018fc <QHsm_ctor>:
}

/*${QEP::QHsm::ctor} .......................................................*/
void QHsm_ctor(QHsm * const me,
    QStateHandler initial)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->vptr      = &vtable;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <QHsm_ctor+0x28>)
 800190a:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a06      	ldr	r2, [pc, #24]	; (8001928 <QHsm_ctor+0x2c>)
 8001910:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	609a      	str	r2, [r3, #8]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	08005464 	.word	0x08005464
 8001928:	0800192d 	.word	0x0800192d

0800192c <QHsm_top>:

/*${QEP::QHsm::top} ........................................................*/
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; /* the top state ignores all events */
 8001936:	2304      	movs	r3, #4
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <QHsm_init_>:

/*${QEP::QHsm::init_} ......................................................*/
void QHsm_init_(QHsm * const me,
    void const * const e,
    uint_fast8_t const qs_id)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	; 0x38
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    (void)qs_id; /* unused parameter */
    #endif

    QStateHandler t = me->state.fun;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	637b      	str	r3, [r7, #52]	; 0x34

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <QHsm_init_+0x2a>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <QHsm_init_+0x2a>
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	4a33      	ldr	r2, [pc, #204]	; (8001a38 <QHsm_init_+0xf4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d003      	beq.n	8001976 <QHsm_init_+0x32>
 800196e:	21c8      	movs	r1, #200	; 0xc8
 8001970:	4832      	ldr	r0, [pc, #200]	; (8001a3c <QHsm_init_+0xf8>)
 8001972:	f7ff fb4c 	bl	800100e <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	4798      	blx	r3
 8001980:	4603      	mov	r3, r0
 8001982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
 8001986:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800198a:	2b08      	cmp	r3, #8
 800198c:	d003      	beq.n	8001996 <QHsm_init_+0x52>
 800198e:	21d2      	movs	r1, #210	; 0xd2
 8001990:	482a      	ldr	r0, [pc, #168]	; (8001a3c <QHsm_init_+0xf8>)
 8001992:	f7ff fb3c 	bl	800100e <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30

        path[0] = me->temp.fun;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	617b      	str	r3, [r7, #20]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4926      	ldr	r1, [pc, #152]	; (8001a40 <QHsm_init_+0xfc>)
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	4798      	blx	r3
        while (me->temp.fun != t) {
 80019aa:	e016      	b.n	80019da <QHsm_init_+0x96>
            ++ip;
 80019ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ae:	3301      	adds	r3, #1
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 80019b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	dd03      	ble.n	80019c0 <QHsm_init_+0x7c>
 80019b8:	21dc      	movs	r1, #220	; 0xdc
 80019ba:	4820      	ldr	r0, [pc, #128]	; (8001a3c <QHsm_init_+0xf8>)
 80019bc:	f7ff fb27 	bl	800100e <Q_onAssert>
            path[ip] = me->temp.fun;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	3338      	adds	r3, #56	; 0x38
 80019ca:	443b      	add	r3, r7
 80019cc:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	491a      	ldr	r1, [pc, #104]	; (8001a40 <QHsm_init_+0xfc>)
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	4798      	blx	r3
        while (me->temp.fun != t) {
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1e3      	bne.n	80019ac <QHsm_init_+0x68>
        }
        me->temp.fun = path[0];
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 80019ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	3338      	adds	r3, #56	; 0x38
 80019f0:	443b      	add	r3, r7
 80019f2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80019f6:	4913      	ldr	r1, [pc, #76]	; (8001a44 <QHsm_init_+0x100>)
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	4798      	blx	r3
            --ip;
 80019fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fe:	3b01      	subs	r3, #1
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
        } while (ip >= 0);
 8001a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	daf0      	bge.n	80019ea <QHsm_init_+0xa6>

        t = path[0]; /* current state becomes the new source */
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0e:	490e      	ldr	r1, [pc, #56]	; (8001a48 <QHsm_init_+0x104>)
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	4798      	blx	r3
 8001a14:	4603      	mov	r3, r0
 8001a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

    } while (r == Q_RET_TRAN);
 8001a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d0b9      	beq.n	8001996 <QHsm_init_+0x52>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a26:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a2c:	609a      	str	r2, [r3, #8]
}
 8001a2e:	bf00      	nop
 8001a30:	3738      	adds	r7, #56	; 0x38
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	0800192d 	.word	0x0800192d
 8001a3c:	0800544c 	.word	0x0800544c
 8001a40:	08005454 	.word	0x08005454
 8001a44:	08005458 	.word	0x08005458
 8001a48:	08005460 	.word	0x08005460

08001a4c <QHsm_dispatch_>:

/*${QEP::QHsm::dispatch_} ..................................................*/
void QHsm_dispatch_(QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08e      	sub	sp, #56	; 0x38
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* unused when Q_SPY undefined */

    QStateHandler t = me->state.fun;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
    QS_CRIT_STAT_

    /*! @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <QHsm_dispatch_+0x22>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d004      	beq.n	8001a78 <QHsm_dispatch_+0x2c>
 8001a6e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001a72:	4852      	ldr	r0, [pc, #328]	; (8001bbc <QHsm_dispatch_+0x170>)
 8001a74:	f7ff facb 	bl	800100e <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
        r = (*s)(me, e); /* invoke state handler s */
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	4798      	blx	r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (r == Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 8001a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d106      	bne.n	8001aa2 <QHsm_dispatch_+0x56>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	494a      	ldr	r1, [pc, #296]	; (8001bc0 <QHsm_dispatch_+0x174>)
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	4798      	blx	r3
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    } while (r == Q_RET_SUPER);
 8001aa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0e6      	beq.n	8001a78 <QHsm_dispatch_+0x2c>

    /* regular transition taken? */
    /*! @tr{RQP120E} */
    if (r >= Q_RET_TRAN) {
 8001aaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001aae:	2b07      	cmp	r3, #7
 8001ab0:	d97a      	bls.n	8001ba8 <QHsm_dispatch_+0x15c>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	613b      	str	r3, [r7, #16]
        path[1] = t;
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aba:	617b      	str	r3, [r7, #20]
        path[2] = s;
 8001abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abe:	61bb      	str	r3, [r7, #24]

        /* exit current state to transition source s... */
        /*! @tr{RQP120C} */
        for (; t != s; t = me->temp.fun) {
 8001ac0:	e00d      	b.n	8001ade <QHsm_dispatch_+0x92>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8001ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac4:	493f      	ldr	r1, [pc, #252]	; (8001bc4 <QHsm_dispatch_+0x178>)
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	4798      	blx	r3
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d103      	bne.n	8001ad8 <QHsm_dispatch_+0x8c>
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                /* find superstate of t */
                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8001ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad2:	493b      	ldr	r1, [pc, #236]	; (8001bc0 <QHsm_dispatch_+0x174>)
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d1ed      	bne.n	8001ac2 <QHsm_dispatch_+0x76>
            }
        }

        int_fast8_t ip = QHsm_tran_(me, path, qs_id); /* the HSM transition */
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4619      	mov	r1, r3
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f86e 	bl	8001bd0 <QHsm_tran_>
 8001af4:	62f8      	str	r0, [r7, #44]	; 0x2c
        }
    #endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        /*! @tr{RQP120B} */
        for (; ip >= 0; --ip) {
 8001af6:	e00b      	b.n	8001b10 <QHsm_dispatch_+0xc4>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	3338      	adds	r3, #56	; 0x38
 8001afe:	443b      	add	r3, r7
 8001b00:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001b04:	4930      	ldr	r1, [pc, #192]	; (8001bc8 <QHsm_dispatch_+0x17c>)
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	daf0      	bge.n	8001af8 <QHsm_dispatch_+0xac>
        }

        t = path[0];      /* stick the target into register */
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
        me->temp.fun = t; /* update the next state */
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b1e:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001b20:	e03b      	b.n	8001b9a <QHsm_dispatch_+0x14e>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[0] = me->temp.fun;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	613b      	str	r3, [r7, #16]

            /* find superstate */
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4923      	ldr	r1, [pc, #140]	; (8001bc0 <QHsm_dispatch_+0x174>)
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	4798      	blx	r3

            while (me->temp.fun != t) {
 8001b36:	e00f      	b.n	8001b58 <QHsm_dispatch_+0x10c>
                ++ip;
 8001b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                path[ip] = me->temp.fun;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	3338      	adds	r3, #56	; 0x38
 8001b48:	443b      	add	r3, r7
 8001b4a:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	491b      	ldr	r1, [pc, #108]	; (8001bc0 <QHsm_dispatch_+0x174>)
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	4798      	blx	r3
            while (me->temp.fun != t) {
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d1ea      	bne.n	8001b38 <QHsm_dispatch_+0xec>
            }
            me->temp.fun = path[0];
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	dd04      	ble.n	8001b78 <QHsm_dispatch_+0x12c>
 8001b6e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8001b72:	4812      	ldr	r0, [pc, #72]	; (8001bbc <QHsm_dispatch_+0x170>)
 8001b74:	f7ff fa4b 	bl	800100e <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	3338      	adds	r3, #56	; 0x38
 8001b7e:	443b      	add	r3, r7
 8001b80:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001b84:	4910      	ldr	r1, [pc, #64]	; (8001bc8 <QHsm_dispatch_+0x17c>)
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	4798      	blx	r3
                --ip;
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
            } while (ip >= 0);
 8001b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	daf0      	bge.n	8001b78 <QHsm_dispatch_+0x12c>

            t = path[0]; /* current state becomes the new source */
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9c:	490b      	ldr	r1, [pc, #44]	; (8001bcc <QHsm_dispatch_+0x180>)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	4798      	blx	r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d0bc      	beq.n	8001b22 <QHsm_dispatch_+0xd6>
        QS_END_PRE_()

    }
    #endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bac:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bb2:	609a      	str	r2, [r3, #8]
}
 8001bb4:	bf00      	nop
 8001bb6:	3738      	adds	r7, #56	; 0x38
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	0800544c 	.word	0x0800544c
 8001bc0:	08005454 	.word	0x08005454
 8001bc4:	0800545c 	.word	0x0800545c
 8001bc8:	08005458 	.word	0x08005458
 8001bcc:	08005460 	.word	0x08005460

08001bd0 <QHsm_tran_>:

/*${QEP::QHsm::tran_} ......................................................*/
int_fast8_t QHsm_tran_(QHsm * const me,
    QStateHandler path[QHSM_MAX_NEST_DEPTH_],
    uint_fast8_t const qs_id)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); // unused when Q_SPY undefined

    int_fast8_t ip = -1; /* transition entry path index */
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	617b      	str	r3, [r7, #20]
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d106      	bne.n	8001c04 <QHsm_tran_+0x34>
        QEP_EXIT_(s, qs_id); /* exit the source */
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	4964      	ldr	r1, [pc, #400]	; (8001d8c <QHsm_tran_+0x1bc>)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	4798      	blx	r3
        ip = 0; /* enter the target */
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
 8001c02:	e0be      	b.n	8001d82 <QHsm_tran_+0x1b2>
    }
    else {
        /* find superstate of target */
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	4962      	ldr	r1, [pc, #392]	; (8001d90 <QHsm_tran_+0x1c0>)
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	4798      	blx	r3

        t = me->temp.fun;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	623b      	str	r3, [r7, #32]

        /* (b) check source==target->super... */
        if (s == t) {
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d102      	bne.n	8001c20 <QHsm_tran_+0x50>
            ip = 0; /* enter the target */
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1e:	e0b0      	b.n	8001d82 <QHsm_tran_+0x1b2>
        }
        else {
            /* find superstate of src */
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_);
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	495b      	ldr	r1, [pc, #364]	; (8001d90 <QHsm_tran_+0x1c0>)
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d106      	bne.n	8001c40 <QHsm_tran_+0x70>
                QEP_EXIT_(s, qs_id); /* exit the source */
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	4955      	ldr	r1, [pc, #340]	; (8001d8c <QHsm_tran_+0x1bc>)
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	4798      	blx	r3
                ip = 0; /* enter the target */
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3e:	e0a0      	b.n	8001d82 <QHsm_tran_+0x1b2>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d104      	bne.n	8001c56 <QHsm_tran_+0x86>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	494f      	ldr	r1, [pc, #316]	; (8001d8c <QHsm_tran_+0x1bc>)
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	4798      	blx	r3
 8001c54:	e095      	b.n	8001d82 <QHsm_tran_+0x1b2>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
                    ip = 1; /* enter target and its superstate */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      /* save the superstate of target */
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	3304      	adds	r3, #4
 8001c62:	6a3a      	ldr	r2, [r7, #32]
 8001c64:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	623b      	str	r3, [r7, #32]

                    /* find target->super->super... */
                    QState r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4947      	ldr	r1, [pc, #284]	; (8001d90 <QHsm_tran_+0x1c0>)
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	4798      	blx	r3
 8001c78:	4603      	mov	r3, r0
 8001c7a:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8001c7c:	e025      	b.n	8001cca <QHsm_tran_+0xfa>
                        ++ip;
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	3301      	adds	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; /* store the entry path */
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	6892      	ldr	r2, [r2, #8]
 8001c90:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d10f      	bne.n	8001cbc <QHsm_tran_+0xec>
                            iq = 1; /* indicate that LCA found */
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	dd04      	ble.n	8001cb0 <QHsm_tran_+0xe0>
 8001ca6:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001caa:	483a      	ldr	r0, [pc, #232]	; (8001d94 <QHsm_tran_+0x1c4>)
 8001cac:	f7ff f9af 	bl	800100e <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; /* terminate loop */
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	76fb      	strb	r3, [r7, #27]
 8001cba:	e006      	b.n	8001cca <QHsm_tran_+0xfa>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4933      	ldr	r1, [pc, #204]	; (8001d90 <QHsm_tran_+0x1c0>)
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	4798      	blx	r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8001cca:	7efb      	ldrb	r3, [r7, #27]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0d6      	beq.n	8001c7e <QHsm_tran_+0xae>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d155      	bne.n	8001d82 <QHsm_tran_+0x1b2>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	dd04      	ble.n	8001ce6 <QHsm_tran_+0x116>
 8001cdc:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001ce0:	482c      	ldr	r0, [pc, #176]	; (8001d94 <QHsm_tran_+0x1c4>)
 8001ce2:	f7ff f994 	bl	800100e <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4928      	ldr	r1, [pc, #160]	; (8001d8c <QHsm_tran_+0x1bc>)
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; /* LCA NOT found */
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6a3a      	ldr	r2, [r7, #32]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d108      	bne.n	8001d18 <QHsm_tran_+0x148>
                                r = Q_RET_HANDLED; /* LCA found */
 8001d06:	2303      	movs	r3, #3
 8001d08:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; /* do not enter LCA */
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; /* cause termintion of the loop */
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e002      	b.n	8001d1e <QHsm_tran_+0x14e>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	dae8      	bge.n	8001cf6 <QHsm_tran_+0x126>

                        /* LCA not found? */
                        if (r != Q_RET_HANDLED) {
 8001d24:	7efb      	ldrb	r3, [r7, #27]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d02b      	beq.n	8001d82 <QHsm_tran_+0x1b2>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = Q_RET_IGNORED; /* keep looping */
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	76fb      	strb	r3, [r7, #27]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	4916      	ldr	r1, [pc, #88]	; (8001d8c <QHsm_tran_+0x1bc>)
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	4798      	blx	r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d103      	bne.n	8001d44 <QHsm_tran_+0x174>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	4914      	ldr	r1, [pc, #80]	; (8001d90 <QHsm_tran_+0x1c0>)
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	623b      	str	r3, [r7, #32]
                                iq = ip;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	61fb      	str	r3, [r7, #28]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	4413      	add	r3, r2
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a3a      	ldr	r2, [r7, #32]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d108      	bne.n	8001d70 <QHsm_tran_+0x1a0>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1; /* break out of inner loop */
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	61fb      	str	r3, [r7, #28]
                                        /* break out of outer loop */
                                        r = Q_RET_HANDLED;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	76fb      	strb	r3, [r7, #27]
 8001d6e:	e002      	b.n	8001d76 <QHsm_tran_+0x1a6>
                                    }
                                    else {
                                        --iq;
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	dae8      	bge.n	8001d4e <QHsm_tran_+0x17e>
                            } while (r != Q_RET_HANDLED);
 8001d7c:	7efb      	ldrb	r3, [r7, #27]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d1d5      	bne.n	8001d2e <QHsm_tran_+0x15e>
                    }
                }
            }
        }
    }
    return ip;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	0800545c 	.word	0x0800545c
 8001d90:	08005454 	.word	0x08005454
 8001d94:	0800544c 	.word	0x0800544c

08001d98 <QPSet_insert>:
}

/*! insert element `n` into the set (n = 1..::QF_MAX_ACTIVE) */
static inline void QPSet_insert(QPSet * const me,
    uint_fast8_t const n)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
        me->bits = (me->bits | (1U << (n - 1U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	601a      	str	r2, [r3, #0]
        }
        else {
            me->bits[1] = (me->bits[1] | ((uint32_t)1U << (n - 33U)));
        }
    #endif
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <QActive_post_>:
/*${QF::QActive::post_} ....................................................*/
bool QActive_post_(QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
    Q_UNUSED_PAR(sender); /* when Q_SPY undefined */

    /*! @pre event pointer must be valid */
    Q_REQUIRE_ID(100, e != (QEvt *)0);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d103      	bne.n	8001de0 <QActive_post_+0x1c>
 8001dd8:	2164      	movs	r1, #100	; 0x64
 8001dda:	483d      	ldr	r0, [pc, #244]	; (8001ed0 <QActive_post_+0x10c>)
 8001ddc:	f7ff f917 	bl	800100e <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001de0:	233f      	movs	r3, #63	; 0x3f
 8001de2:	b672      	cpsid	i
 8001de4:	f383 8811 	msr	BASEPRI, r3
 8001de8:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	7ddb      	ldrb	r3, [r3, #23]
 8001dee:	75bb      	strb	r3, [r7, #22]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10e      	bne.n	8001e18 <QActive_post_+0x54>
        if (nFree > 0U) {
 8001dfa:	7dbb      	ldrb	r3, [r7, #22]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <QActive_post_+0x42>
            status = true; /* can post */
 8001e00:	2301      	movs	r3, #1
 8001e02:	75fb      	strb	r3, [r7, #23]
 8001e04:	e012      	b.n	8001e2c <QActive_post_+0x68>
        }
        else {
            status = false; /* cannot post */
 8001e06:	2300      	movs	r3, #0
 8001e08:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(110); /* must be able to post the event */
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f383 8811 	msr	BASEPRI, r3
 8001e10:	216e      	movs	r1, #110	; 0x6e
 8001e12:	482f      	ldr	r0, [pc, #188]	; (8001ed0 <QActive_post_+0x10c>)
 8001e14:	f7ff f8fb 	bl	800100e <Q_onAssert>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	7dba      	ldrb	r2, [r7, #22]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d902      	bls.n	8001e28 <QActive_post_+0x64>
        status = true; /* can post */
 8001e22:	2301      	movs	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
 8001e26:	e001      	b.n	8001e2c <QActive_post_+0x68>
    }
    else {
        status = false; /* cannot post, but don't assert */
 8001e28:	2300      	movs	r3, #0
 8001e2a:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	789b      	ldrb	r3, [r3, #2]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <QActive_post_+0x7e>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	78db      	ldrb	r3, [r3, #3]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	70da      	strb	r2, [r3, #3]
    }

    if (status) { /* can post the event? */
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d038      	beq.n	8001eba <QActive_post_+0xf6>

        --nFree; /* one free entry just used up */
 8001e48:	7dbb      	ldrb	r3, [r7, #22]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the volatile */
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	7dba      	ldrb	r2, [r7, #22]
 8001e52:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	7e1b      	ldrb	r3, [r3, #24]
 8001e58:	7dba      	ldrb	r2, [r7, #22]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d202      	bcs.n	8001e64 <QActive_post_+0xa0>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	7dba      	ldrb	r2, [r7, #22]
 8001e62:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d109      	bne.n	8001e80 <QActive_post_+0xbc>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	7f1b      	ldrb	r3, [r3, #28]
 8001e76:	4619      	mov	r1, r3
 8001e78:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <QActive_post_+0x110>)
 8001e7a:	f7ff ff8d 	bl	8001d98 <QPSet_insert>
 8001e7e:	e018      	b.n	8001eb2 <QActive_post_+0xee>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            me->eQueue.ring[me->eQueue.head] = e;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	7d5b      	ldrb	r3, [r3, #21]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	7d5b      	ldrb	r3, [r3, #21]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d103      	bne.n	8001ea4 <QActive_post_+0xe0>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	7d1a      	ldrb	r2, [r3, #20]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	7d5b      	ldrb	r3, [r3, #21]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f383 8811 	msr	BASEPRI, r3
 8001eb8:	e005      	b.n	8001ec6 <QActive_post_+0x102>
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        QF_CRIT_X_();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f383 8811 	msr	BASEPRI, r3

    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e); /* recycle the event to avoid a leak */
 8001ec0:	68b8      	ldr	r0, [r7, #8]
 8001ec2:	f000 f96d 	bl	80021a0 <QF_gc>
    #endif
    }

    return status;
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	0800546c 	.word	0x0800546c
 8001ed4:	20001260 	.word	0x20001260

08001ed8 <QActive_postLIFO_>:
/*$define${QF::QActive::postLIFO_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::postLIFO_} ................................................*/
void QActive_postLIFO_(QActive * const me,
    QEvt const * const e)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001ee2:	233f      	movs	r3, #63	; 0x3f
 8001ee4:	b672      	cpsid	i
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7ddb      	ldrb	r3, [r3, #23]
 8001ef0:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT_CRIT_(210, nFree != 0U);
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d106      	bne.n	8001f06 <QActive_postLIFO_+0x2e>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f383 8811 	msr	BASEPRI, r3
 8001efe:	21d2      	movs	r1, #210	; 0xd2
 8001f00:	4826      	ldr	r0, [pc, #152]	; (8001f9c <QActive_postLIFO_+0xc4>)
 8001f02:	f7ff f884 	bl	800100e <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	789b      	ldrb	r3, [r3, #2]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <QActive_postLIFO_+0x44>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	78db      	ldrb	r3, [r3, #3]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	70da      	strb	r2, [r3, #3]
    }

    --nFree; /* one free entry just used up */
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the volatile */
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7e1b      	ldrb	r3, [r3, #24]
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d202      	bcs.n	8001f38 <QActive_postLIFO_+0x60>
        me->eQueue.nMin = nFree; /* update minimum so far */
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	761a      	strb	r2, [r3, #24]
            QS_onTestPost((QActive *)0, me, e, true);
        }
    #endif

    /* temporary to avoid UB for volatile access */
    QEvt const * const frontEvt  = me->eQueue.frontEvt;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <QActive_postLIFO_+0x80>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7f1b      	ldrb	r3, [r3, #28]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4813      	ldr	r0, [pc, #76]	; (8001fa0 <QActive_postLIFO_+0xc8>)
 8001f52:	f7ff ff21 	bl	8001d98 <QPSet_insert>
 8001f56:	e019      	b.n	8001f8c <QActive_postLIFO_+0xb4>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	7d9b      	ldrb	r3, [r3, #22]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7d9b      	ldrb	r3, [r3, #22]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7d1b      	ldrb	r3, [r3, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d102      	bne.n	8001f7a <QActive_postLIFO_+0xa2>
            me->eQueue.tail = 0U; /* wrap around */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	759a      	strb	r2, [r3, #22]
        }

        me->eQueue.ring[me->eQueue.tail] = frontEvt;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7d9b      	ldrb	r3, [r3, #22]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f383 8811 	msr	BASEPRI, r3
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	0800546c 	.word	0x0800546c
 8001fa0:	20001260 	.word	0x20001260

08001fa4 <QActive_get_>:
/*$enddef${QF::QActive::postLIFO_} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QF::QActive::get_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::get_} .....................................................*/
QEvt const * QActive_get_(QActive * const me) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001fac:	233f      	movs	r3, #63	; 0x3f
 8001fae:	b672      	cpsid	i
 8001fb0:	f383 8811 	msr	BASEPRI, r3
 8001fb4:	b662      	cpsie	i
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <QActive_get_+0x22>
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4823      	ldr	r0, [pc, #140]	; (8002050 <QActive_get_+0xac>)
 8001fc2:	f7ff f824 	bl	800100e <Q_onAssert>

    /* always remove event from the front */
    QEvt const * const e = me->eQueue.frontEvt;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; /* volatile into tmp */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7ddb      	ldrb	r3, [r3, #23]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7afa      	ldrb	r2, [r7, #11]
 8001fda:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7d1b      	ldrb	r3, [r3, #20]
 8001fe0:	7afa      	ldrb	r2, [r7, #11]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d81a      	bhi.n	800201c <QActive_get_+0x78>

        /* remove event from the tail */
        me->eQueue.frontEvt = me->eQueue.ring[me->eQueue.tail];
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7d9b      	ldrb	r3, [r3, #22]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7d9b      	ldrb	r3, [r3, #22]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d103      	bne.n	800200c <QActive_get_+0x68>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7d1a      	ldrb	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7d9b      	ldrb	r3, [r3, #22]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b2da      	uxtb	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	759a      	strb	r2, [r3, #22]
 800201a:	e010      	b.n	800203e <QActive_get_+0x9a>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 8002022:	7afa      	ldrb	r2, [r7, #11]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7d1b      	ldrb	r3, [r3, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	429a      	cmp	r2, r3
 800202c:	d007      	beq.n	800203e <QActive_get_+0x9a>
 800202e:	2300      	movs	r3, #0
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <QActive_get_+0xac>)
 800203a:	f7fe ffe8 	bl	800100e <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 800203e:	2300      	movs	r3, #0
 8002040:	f383 8811 	msr	BASEPRI, r3
    return e;
 8002044:	68fb      	ldr	r3, [r7, #12]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	0800546c 	.word	0x0800546c

08002054 <QF_poolInit>:
/*${QF::QF-dyn::poolInit} ..................................................*/
void QF_poolInit(
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const evtSize)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
    /*! @pre cannot exceed the number of available memory pools */
    Q_REQUIRE_ID(200, QF_maxPool_ < QF_MAX_EPOOL);
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <QF_poolInit+0x78>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d903      	bls.n	8002070 <QF_poolInit+0x1c>
 8002068:	21c8      	movs	r1, #200	; 0xc8
 800206a:	4819      	ldr	r0, [pc, #100]	; (80020d0 <QF_poolInit+0x7c>)
 800206c:	f7fe ffcf 	bl	800100e <Q_onAssert>

    /*! @pre please initialize event pools in ascending order of evtSize: */
    Q_REQUIRE_ID(201, (QF_maxPool_ == 0U)
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <QF_poolInit+0x78>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d012      	beq.n	800209e <QF_poolInit+0x4a>
 8002078:	4b14      	ldr	r3, [pc, #80]	; (80020cc <QF_poolInit+0x78>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	1e5a      	subs	r2, r3, #1
 800207e:	4915      	ldr	r1, [pc, #84]	; (80020d4 <QF_poolInit+0x80>)
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	330c      	adds	r3, #12
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4293      	cmp	r3, r2
 8002094:	d803      	bhi.n	800209e <QF_poolInit+0x4a>
 8002096:	21c9      	movs	r1, #201	; 0xc9
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <QF_poolInit+0x7c>)
 800209a:	f7fe ffb8 	bl	800100e <Q_onAssert>
        || (QF_EPOOL_EVENT_SIZE_(QF_ePool_[QF_maxPool_ - 1U])
            < evtSize));

    /* perform the platform-dependent initialization of the pool */
    QF_EPOOL_INIT_(QF_ePool_[QF_maxPool_], poolSto, poolSize, evtSize);
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <QF_poolInit+0x78>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <QF_poolInit+0x80>)
 80020ac:	1898      	adds	r0, r3, r2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	f000 f8b8 	bl	8002228 <QMPool_init>
    ++QF_maxPool_; /* one more pool */
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <QF_poolInit+0x78>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	4a03      	ldr	r2, [pc, #12]	; (80020cc <QF_poolInit+0x78>)
 80020c0:	6013      	str	r3, [r2, #0]
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)(((uint8_t)'0' + QF_maxPool_) & 0x7FU);
        QS_obj_dict_pre_(&QF_ePool_[QF_maxPool_ - 1U], (char const *)obj_name);
    }
    #endif /* Q_SPY*/
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000119c 	.word	0x2000119c
 80020d0:	08005474 	.word	0x08005474
 80020d4:	200011a0 	.word	0x200011a0

080020d8 <QF_newX_>:
/*${QF::QF-dyn::newX_} .....................................................*/
QEvt * QF_newX_(
    uint_fast16_t const evtSize,
    uint_fast16_t const margin,
    enum_t const sig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
    uint_fast8_t idx;

    /* find the pool index that fits the requested event size ... */
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e00f      	b.n	800210a <QF_newX_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_ePool_[idx])) {
 80020ea:	492a      	ldr	r1, [pc, #168]	; (8002194 <QF_newX_+0xbc>)
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	330c      	adds	r3, #12
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4293      	cmp	r3, r2
 8002102:	d908      	bls.n	8002116 <QF_newX_+0x3e>
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3301      	adds	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <QF_newX_+0xc0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	429a      	cmp	r2, r3
 8002112:	d3ea      	bcc.n	80020ea <QF_newX_+0x12>
 8002114:	e000      	b.n	8002118 <QF_newX_+0x40>
            break;
 8002116:	bf00      	nop
        }
    }
    /* cannot run out of registered pools */
    Q_ASSERT_ID(310, idx < QF_maxPool_);
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <QF_newX_+0xc0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	429a      	cmp	r2, r3
 8002120:	d304      	bcc.n	800212c <QF_newX_+0x54>
 8002122:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002126:	481d      	ldr	r0, [pc, #116]	; (800219c <QF_newX_+0xc4>)
 8002128:	f7fe ff71 	bl	800100e <Q_onAssert>
    #ifdef Q_SPY
    QF_EPOOL_GET_(QF_ePool_[idx], e,
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + idx + 1U);
    #else
    QF_EPOOL_GET_(QF_ePool_[idx], e,
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4a17      	ldr	r2, [pc, #92]	; (8002194 <QF_newX_+0xbc>)
 8002138:	1898      	adds	r0, r3, r2
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002140:	4293      	cmp	r3, r2
 8002142:	d001      	beq.n	8002148 <QF_newX_+0x70>
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	e000      	b.n	800214a <QF_newX_+0x72>
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	4619      	mov	r1, r3
 800214e:	f000 f8dd 	bl	800230c <QMPool_get>
 8002152:	6138      	str	r0, [r7, #16]
                  ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
    #endif

    /* was e allocated correctly? */
    QS_CRIT_STAT_
    if (e != (QEvt *)0) {
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <QF_newX_+0x9e>
        e->sig = (QSignal)sig;     /* set signal for this event */
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	b29a      	uxth	r2, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	801a      	strh	r2, [r3, #0]
        e->poolId_ = (uint8_t)(idx + 1U); /* store the pool ID */
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	3301      	adds	r3, #1
 8002168:	b2da      	uxtb	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	709a      	strb	r2, [r3, #2]
        e->refCtr_ = 0U; /* set the reference counter to 0 */
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2200      	movs	r2, #0
 8002172:	70da      	strb	r2, [r3, #3]
 8002174:	e009      	b.n	800218a <QF_newX_+0xb2>
    else {
        /* This assertion means that the event allocation failed,
         * and this failure cannot be tolerated. The most frequent
         * reason is an event leak in the application.
         */
        Q_ASSERT_ID(320, margin != QF_NO_MARGIN);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800217c:	4293      	cmp	r3, r2
 800217e:	d104      	bne.n	800218a <QF_newX_+0xb2>
 8002180:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <QF_newX_+0xc4>)
 8002186:	f7fe ff42 	bl	800100e <Q_onAssert>
            QS_TIME_PRE_();        /* timestamp */
            QS_EVS_PRE_(evtSize);  /* the size of the event */
            QS_SIG_PRE_(sig);      /* the signal of the event */
        QS_END_PRE_()
    }
    return e; /* can't be NULL if we can't tolerate failed allocation */
 800218a:	693b      	ldr	r3, [r7, #16]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	200011a0 	.word	0x200011a0
 8002198:	2000119c 	.word	0x2000119c
 800219c:	08005474 	.word	0x08005474

080021a0 <QF_gc>:

/*${QF::QF-dyn::gc} ........................................................*/
void QF_gc(QEvt const * const e) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	789b      	ldrb	r3, [r3, #2]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d031      	beq.n	8002214 <QF_gc+0x74>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 80021b0:	233f      	movs	r3, #63	; 0x3f
 80021b2:	b672      	cpsid	i
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	b662      	cpsie	i

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	78db      	ldrb	r3, [r3, #3]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d90a      	bls.n	80021da <QF_gc+0x3a>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QF_EVT_REF_CTR_DEC_(e); /* decrement the ref counter */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	78db      	ldrb	r3, [r3, #3]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	70da      	strb	r2, [r3, #3]

            QF_CRIT_X_();
 80021d2:	2300      	movs	r3, #0
 80021d4:	f383 8811 	msr	BASEPRI, r3
    #else
            QF_EPOOL_PUT_(QF_ePool_[idx], QF_CONST_CAST_(QEvt*, e), 0U);
    #endif
        }
    }
}
 80021d8:	e01c      	b.n	8002214 <QF_gc+0x74>
            uint_fast8_t const idx = (uint_fast8_t)e->poolId_ - 1U;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	789b      	ldrb	r3, [r3, #2]
 80021de:	3b01      	subs	r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 80021e2:	2300      	movs	r3, #0
 80021e4:	f383 8811 	msr	BASEPRI, r3
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <QF_gc+0x7c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d304      	bcc.n	80021fc <QF_gc+0x5c>
 80021f2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80021f6:	480a      	ldr	r0, [pc, #40]	; (8002220 <QF_gc+0x80>)
 80021f8:	f7fe ff09 	bl	800100e <Q_onAssert>
            QF_EPOOL_PUT_(QF_ePool_[idx], QF_CONST_CAST_(QEvt*, e), 0U);
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4a07      	ldr	r2, [pc, #28]	; (8002224 <QF_gc+0x84>)
 8002208:	4413      	add	r3, r2
 800220a:	2200      	movs	r2, #0
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f8e8 	bl	80023e4 <QMPool_put>
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	2000119c 	.word	0x2000119c
 8002220:	08005474 	.word	0x08005474
 8002224:	200011a0 	.word	0x200011a0

08002228 <QMPool_init>:
/*${QF::QMPool::init} ......................................................*/
void QMPool_init(QMPool * const me,
    void * const poolSto,
    uint_fast32_t poolSize,
    uint_fast16_t blockSize)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
    /*! @pre The memory block must be valid
    * and the poolSize must fit at least one free block
    * and the blockSize must not be too close to the top of the dynamic range
    */
    Q_REQUIRE_ID(100, (poolSto != (void *)0)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <QMPool_init+0x22>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d903      	bls.n	800224a <QMPool_init+0x22>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f113 0f05 	cmn.w	r3, #5
 8002248:	d903      	bls.n	8002252 <QMPool_init+0x2a>
 800224a:	2164      	movs	r1, #100	; 0x64
 800224c:	482e      	ldr	r0, [pc, #184]	; (8002308 <QMPool_init+0xe0>)
 800224e:	f7fe fede 	bl	800100e <Q_onAssert>
            && (poolSize >= (uint_fast32_t)sizeof(QFreeBlock))
            && ((uint_fast16_t)(blockSize + sizeof(QFreeBlock)) > blockSize));

    me->free_head = poolSto;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	609a      	str	r2, [r3, #8]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2204      	movs	r2, #4
 800225c:	819a      	strh	r2, [r3, #12]

    /* #free blocks that fit in one memory block */
    uint_fast16_t nblocks = 1U;
 800225e:	2301      	movs	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8002262:	e008      	b.n	8002276 <QMPool_init+0x4e>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	899b      	ldrh	r3, [r3, #12]
 8002268:	3304      	adds	r3, #4
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3301      	adds	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	899a      	ldrh	r2, [r3, #12]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	429a      	cmp	r2, r3
 8002280:	d3f0      	bcc.n	8002264 <QMPool_init+0x3c>
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	899b      	ldrh	r3, [r3, #12]
 8002286:	603b      	str	r3, [r7, #0]

    /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT_ID(110, poolSize >= blockSize);
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d203      	bcs.n	8002298 <QMPool_init+0x70>
 8002290:	216e      	movs	r1, #110	; 0x6e
 8002292:	481d      	ldr	r0, [pc, #116]	; (8002308 <QMPool_init+0xe0>)
 8002294:	f7fe febb 	bl	800100e <Q_onAssert>

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	607b      	str	r3, [r7, #4]
    me->nTot  = 1U; /* the last block already in the pool */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	81da      	strh	r2, [r3, #14]

    /* start at the head of the free list */
    QFreeBlock *fb = (QFreeBlock *)me->free_head;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	613b      	str	r3, [r7, #16]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
 80022ac:	e012      	b.n	80022d4 <QMPool_init+0xac>
        fb->next = &fb[nblocks]; /* point next link to next block */
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	441a      	add	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	613b      	str	r3, [r7, #16]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	607b      	str	r3, [r7, #4]
        ++me->nTot;              /* increment the number of blocks so far */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	89db      	ldrh	r3, [r3, #14]
 80022cc:	3301      	adds	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	81da      	strh	r2, [r3, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d2e8      	bcs.n	80022ae <QMPool_init+0x86>
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	89da      	ldrh	r2, [r3, #14]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	821a      	strh	r2, [r3, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	89da      	ldrh	r2, [r3, #14]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	825a      	strh	r2, [r3, #18]
    me->start = poolSto;         /* the original start this pool buffer */
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	601a      	str	r2, [r3, #0]
    me->end   = fb;              /* the last block in this pool */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	605a      	str	r2, [r3, #4]
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	0800547c 	.word	0x0800547c

0800230c <QMPool_get>:

/*${QF::QMPool::get} .......................................................*/
void * QMPool_get(QMPool * const me,
    uint_fast16_t const margin,
    uint_fast8_t const qs_id)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* when Q_SPY undefined */

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002318:	233f      	movs	r3, #63	; 0x3f
 800231a:	b672      	cpsid	i
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	b662      	cpsie	i

    /* have more free blocks than the requested margin? */
    QFreeBlock *fb;
    if (me->nFree > (QMPoolCtr)margin) {
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8a1b      	ldrh	r3, [r3, #16]
 8002326:	b29a      	uxth	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	b29b      	uxth	r3, r3
 800232c:	429a      	cmp	r2, r3
 800232e:	d94d      	bls.n	80023cc <QMPool_get+0xc0>
        void *fb_next;
        fb = (QFreeBlock *)me->free_head; /* get a free block */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	617b      	str	r3, [r7, #20]

        /* the pool has some free blocks, so a free block must be available */
        Q_ASSERT_CRIT_(310, fb != (QFreeBlock *)0);
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <QMPool_get+0x40>
 800233c:	2300      	movs	r3, #0
 800233e:	f383 8811 	msr	BASEPRI, r3
 8002342:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002346:	4826      	ldr	r0, [pc, #152]	; (80023e0 <QMPool_get+0xd4>)
 8002348:	f7fe fe61 	bl	800100e <Q_onAssert>

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	613b      	str	r3, [r7, #16]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8a1b      	ldrh	r3, [r3, #16]
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	821a      	strh	r2, [r3, #16]
        if (me->nFree == 0U) {
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8a1b      	ldrh	r3, [r3, #16]
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10e      	bne.n	8002388 <QMPool_get+0x7c>
            /* pool is becoming empty, so the next free block must be NULL */
            Q_ASSERT_CRIT_(320, fb_next == (QFreeBlock *)0);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <QMPool_get+0x74>
 8002370:	2300      	movs	r3, #0
 8002372:	f383 8811 	msr	BASEPRI, r3
 8002376:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800237a:	4819      	ldr	r0, [pc, #100]	; (80023e0 <QMPool_get+0xd4>)
 800237c:	f7fe fe47 	bl	800100e <Q_onAssert>

            me->nMin = 0U; /* remember that the pool got empty */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	825a      	strh	r2, [r3, #18]
 8002386:	e01d      	b.n	80023c4 <QMPool_get+0xb8>
            *
            * NOTE: the next free block pointer can fall out of range
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */
            Q_ASSERT_CRIT_(330, QF_PTR_RANGE_(fb_next, me->start, me->end));
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	429a      	cmp	r2, r3
 8002390:	d304      	bcc.n	800239c <QMPool_get+0x90>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d907      	bls.n	80023ac <QMPool_get+0xa0>
 800239c:	2300      	movs	r3, #0
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80023a6:	480e      	ldr	r0, [pc, #56]	; (80023e0 <QMPool_get+0xd4>)
 80023a8:	f7fe fe31 	bl	800100e <Q_onAssert>

            /* is the number of free blocks the new minimum so far? */
            if (me->nMin > me->nFree) {
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8a5a      	ldrh	r2, [r3, #18]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8a1b      	ldrh	r3, [r3, #16]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d904      	bls.n	80023c4 <QMPool_get+0xb8>
                me->nMin = me->nFree; /* remember the new minimum */
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8a1b      	ldrh	r3, [r3, #16]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	825a      	strh	r2, [r3, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	e001      	b.n	80023d0 <QMPool_get+0xc4>
            QS_MPC_PRE_(me->nMin);  /* min # free blocks ever in the pool */
        QS_END_NOCRIT_PRE_()
    }
    /* don't have enough free blocks at this point */
    else {
        fb = (QFreeBlock *)0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
            QS_OBJ_PRE_(me);        /* this memory pool */
            QS_MPC_PRE_(me->nFree); /* # of free blocks in the pool */
            QS_MPC_PRE_(margin);    /* the requested margin */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 80023d0:	2300      	movs	r3, #0
 80023d2:	f383 8811 	msr	BASEPRI, r3

    return fb;  /* return the block or NULL pointer to the caller */
 80023d6:	697b      	ldr	r3, [r7, #20]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	0800547c 	.word	0x0800547c

080023e4 <QMPool_put>:

/*${QF::QMPool::put} .......................................................*/
void QMPool_put(QMPool * const me,
    void * const b,
    uint_fast8_t const qs_id)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* when Q_SPY undefined */

    /*! @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8a1b      	ldrh	r3, [r3, #16]
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	89db      	ldrh	r3, [r3, #14]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d209      	bcs.n	8002412 <QMPool_put+0x2e>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	429a      	cmp	r2, r3
 8002406:	d304      	bcc.n	8002412 <QMPool_put+0x2e>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	429a      	cmp	r2, r3
 8002410:	d903      	bls.n	800241a <QMPool_put+0x36>
 8002412:	21c8      	movs	r1, #200	; 0xc8
 8002414:	480e      	ldr	r0, [pc, #56]	; (8002450 <QMPool_put+0x6c>)
 8002416:	f7fe fdfa 	bl	800100e <Q_onAssert>
                      && QF_PTR_RANGE_(b, me->start, me->end));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800241a:	233f      	movs	r3, #63	; 0x3f
 800241c:	b672      	cpsid	i
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	b662      	cpsie	i
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	609a      	str	r2, [r3, #8]
    ++me->nFree;            /* one more free block in this pool */
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8a1b      	ldrh	r3, [r3, #16]
 8002436:	b29b      	uxth	r3, r3
 8002438:	3301      	adds	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8002440:	2300      	movs	r3, #0
 8002442:	f383 8811 	msr	BASEPRI, r3
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	0800547c 	.word	0x0800547c

08002454 <QF_bzero>:

/*${QF::QF-pkg::bzero} .....................................................*/
void QF_bzero(
    void * const start,
    uint_fast16_t const len)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	e008      	b.n	800247a <QF_bzero+0x26>
        *ptr = 0U;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
        ++ptr;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3301      	adds	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3b01      	subs	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f3      	bne.n	8002468 <QF_bzero+0x14>
    }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <QActive_ctor>:
/*$define${QF::QActive::ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::ctor} .....................................................*/
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
    };
    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 800249a:	2120      	movs	r1, #32
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ffd9 	bl	8002454 <QF_bzero>

    QHsm_ctor(&me->super, initial); /* explicitly call superclass' ctor */
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6839      	ldr	r1, [r7, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fa28 	bl	80018fc <QHsm_ctor>
    me->super.vptr = &vtable.super; /* hook the vptr to QActive vtable */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a03      	ldr	r2, [pc, #12]	; (80024bc <QActive_ctor+0x2c>)
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	0800548c 	.word	0x0800548c

080024c0 <QActive_register_>:
/*$enddef${QF::QActive::ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QF::QActive::register_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::register_} ................................................*/
void QActive_register_(QActive * const me) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
    if (me->pthre == 0U) { /* preemption-threshold not defined? */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7f5b      	ldrb	r3, [r3, #29]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <QActive_register_+0x18>
        me->pthre = me->prio; /* apply the default */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7f1a      	ldrb	r2, [r3, #28]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	775a      	strb	r2, [r3, #29]
    /*! @pre
    * 1. the "QF-priority" of the AO must be in range
    * 2. the "QF-priority" must not be already in use (unique priority)
    * 3. the "QF-priority" must not exceed the "preemption-threshold"
    */
    Q_REQUIRE_ID(100, (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7f1b      	ldrb	r3, [r3, #28]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d011      	beq.n	8002504 <QActive_register_+0x44>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7f1b      	ldrb	r3, [r3, #28]
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d80d      	bhi.n	8002504 <QActive_register_+0x44>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7f1b      	ldrb	r3, [r3, #28]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b33      	ldr	r3, [pc, #204]	; (80025bc <QActive_register_+0xfc>)
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <QActive_register_+0x44>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7f1a      	ldrb	r2, [r3, #28]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7f5b      	ldrb	r3, [r3, #29]
 8002500:	429a      	cmp	r2, r3
 8002502:	d903      	bls.n	800250c <QActive_register_+0x4c>
 8002504:	2164      	movs	r1, #100	; 0x64
 8002506:	482e      	ldr	r0, [pc, #184]	; (80025c0 <QActive_register_+0x100>)
 8002508:	f7fe fd81 	bl	800100e <Q_onAssert>
                      && (QActive_registry_[me->prio] == (QActive *)0)
                      && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7f5b      	ldrb	r3, [r3, #29]
 8002510:	73fb      	strb	r3, [r7, #15]
    uint8_t next_thre = me->pthre;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7f5b      	ldrb	r3, [r3, #29]
 8002516:	73bb      	strb	r3, [r7, #14]
    uint_fast8_t p;

    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7f1b      	ldrb	r3, [r3, #28]
 800251c:	3b01      	subs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	e00f      	b.n	8002542 <QActive_register_+0x82>
        if (QActive_registry_[p] != (QActive *)0) {
 8002522:	4a26      	ldr	r2, [pc, #152]	; (80025bc <QActive_register_+0xfc>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <QActive_register_+0x7c>
            prev_thre = QActive_registry_[p]->pthre;
 800252e:	4a23      	ldr	r2, [pc, #140]	; (80025bc <QActive_register_+0xfc>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002536:	7f5b      	ldrb	r3, [r3, #29]
 8002538:	73fb      	strb	r3, [r7, #15]
            break;
 800253a:	e005      	b.n	8002548 <QActive_register_+0x88>
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	3b01      	subs	r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ec      	bne.n	8002522 <QActive_register_+0x62>
        }
    }
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7f1b      	ldrb	r3, [r3, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	e00f      	b.n	8002572 <QActive_register_+0xb2>
        if (QActive_registry_[p] != (QActive *)0) {
 8002552:	4a1a      	ldr	r2, [pc, #104]	; (80025bc <QActive_register_+0xfc>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d006      	beq.n	800256c <QActive_register_+0xac>
            next_thre = QActive_registry_[p]->pthre;
 800255e:	4a17      	ldr	r2, [pc, #92]	; (80025bc <QActive_register_+0xfc>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	7f5b      	ldrb	r3, [r3, #29]
 8002568:	73bb      	strb	r3, [r7, #14]
            break;
 800256a:	e005      	b.n	8002578 <QActive_register_+0xb8>
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	3301      	adds	r3, #1
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b20      	cmp	r3, #32
 8002576:	d9ec      	bls.n	8002552 <QActive_register_+0x92>

    /*! @post
    * 1. the preceding pre-thre must not exceed the preemption-threshold
    * 2. the preemption-threshold must not exceed the next pre-thre
    */
    Q_ENSURE_ID(101, (prev_thre <= me->pthre) && (me->pthre <= next_thre));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7f5b      	ldrb	r3, [r3, #29]
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	429a      	cmp	r2, r3
 8002580:	d804      	bhi.n	800258c <QActive_register_+0xcc>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	7f5b      	ldrb	r3, [r3, #29]
 8002586:	7bba      	ldrb	r2, [r7, #14]
 8002588:	429a      	cmp	r2, r3
 800258a:	d203      	bcs.n	8002594 <QActive_register_+0xd4>
 800258c:	2165      	movs	r1, #101	; 0x65
 800258e:	480c      	ldr	r0, [pc, #48]	; (80025c0 <QActive_register_+0x100>)
 8002590:	f7fe fd3d 	bl	800100e <Q_onAssert>

    #endif // Q_NASSERT

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002594:	233f      	movs	r3, #63	; 0x3f
 8002596:	b672      	cpsid	i
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	b662      	cpsie	i
    /* register the AO at the "QF-priority" */
    QActive_registry_[me->prio] = me;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7f1b      	ldrb	r3, [r3, #28]
 80025a2:	4619      	mov	r1, r3
 80025a4:	4a05      	ldr	r2, [pc, #20]	; (80025bc <QActive_register_+0xfc>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    QF_CRIT_X_();
 80025ac:	2300      	movs	r3, #0
 80025ae:	f383 8811 	msr	BASEPRI, r3
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200011dc 	.word	0x200011dc
 80025c0:	08005484 	.word	0x08005484

080025c4 <QEQueue_init>:

/*${QF::QEQueue::init} .....................................................*/
void QEQueue_init(QEQueue * const me,
    QEvt const * qSto[],
    uint_fast16_t const qLen)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <QEQueue_init+0x32>
        me->head = 0U;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	3301      	adds	r3, #1
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	7adb      	ldrb	r3, [r3, #11]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	731a      	strb	r2, [r3, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <QTimeEvt_ctorX>:
/*${QF::QTimeEvt::ctorX} ...................................................*/
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
    /*! @pre The signal must be valid and the tick rate in range */
    Q_REQUIRE_ID(300, (sig != 0)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <QTimeEvt_ctorX+0x1a>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d904      	bls.n	800263c <QTimeEvt_ctorX+0x24>
 8002632:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002636:	480f      	ldr	r0, [pc, #60]	; (8002674 <QTimeEvt_ctorX+0x5c>)
 8002638:	f7fe fce9 	bl	800100e <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	60da      	str	r2, [r3, #12]
    me->interval  = 0U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
    me->super.sig = (QSignal)sig;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with QTimeEvt_ctor(), the active object
    * pointer can be uninitialized (NULL) and is NOT validated in the
    * precondition. The active object pointer is validated in preconditions
    * to QTimeEvt_arm_() and QTimeEvt_rearm().
    */
    me->act       = act;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	70da      	strb	r2, [r3, #3]
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	080054a0 	.word	0x080054a0

08002678 <QTimeEvt_armX>:

/*${QF::QTimeEvt::armX} ....................................................*/
void QTimeEvt_armX(QTimeEvt * const me,
    QTimeEvtCtr const nTicks,
    QTimeEvtCtr const interval)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	78db      	ldrb	r3, [r3, #3]
 8002688:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	617b      	str	r3, [r7, #20]
    QTimeEvtCtr const ctr = me->ctr;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	613b      	str	r3, [r7, #16]
    #endif

    /*! @pre the host AO must be valid, time evnet must be disarmed,
    * number of clock ticks cannot be zero, and the signal must be valid.
    */
    Q_REQUIRE_ID(400, (me->act != (void *)0)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <QTimeEvt_armX+0x40>
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <QTimeEvt_armX+0x40>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <QTimeEvt_armX+0x40>
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d803      	bhi.n	80026b8 <QTimeEvt_armX+0x40>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d804      	bhi.n	80026c2 <QTimeEvt_armX+0x4a>
 80026b8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80026bc:	481b      	ldr	r0, [pc, #108]	; (800272c <QTimeEvt_armX+0xb4>)
 80026be:	f7fe fca6 	bl	800100e <Q_onAssert>
    #ifdef Q_NASSERT
    (void)ctr; /* avoid compiler warning about unused variable */
    #endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80026c2:	233f      	movs	r3, #63	; 0x3f
 80026c4:	b672      	cpsid	i
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	b662      	cpsie	i
    me->ctr = nTicks;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	60da      	str	r2, [r3, #12]
    me->interval = interval;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	611a      	str	r2, [r3, #16]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in QTimeEvt_tick_().
    */
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	78db      	ldrb	r3, [r3, #3]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	b25b      	sxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db1c      	blt.n	800271e <QTimeEvt_armX+0xa6>
        me->super.refCtr_ |= QTE_IS_LINKED; /* mark as linked */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	78db      	ldrb	r3, [r3, #3]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QTimeEvt_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QTimeEvt_tick_()
        * function.
        */
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <QTimeEvt_armX+0xb8>)
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	3308      	adds	r3, #8
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 800270a:	4909      	ldr	r1, [pc, #36]	; (8002730 <QTimeEvt_armX+0xb8>)
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3308      	adds	r3, #8
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 800271e:	2300      	movs	r3, #0
 8002720:	f383 8811 	msr	BASEPRI, r3
}
 8002724:	bf00      	nop
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	080054a0 	.word	0x080054a0
 8002730:	20001264 	.word	0x20001264

08002734 <QTimeEvt_tick_>:

/*${QF::QTimeEvt::tick_} ...................................................*/
void QTimeEvt_tick_(
    uint_fast8_t const tickRate,
    void const * const sender)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(sender); /* when Q_SPY undefined */

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4a4a      	ldr	r2, [pc, #296]	; (8002874 <QTimeEvt_tick_+0x140>)
 800274a:	4413      	add	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800274e:	233f      	movs	r3, #63	; 0x3f
 8002750:	b672      	cpsid	i
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	b662      	cpsie	i
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	613b      	str	r3, [r7, #16]

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d12c      	bne.n	80027be <QTimeEvt_tick_+0x8a>

            /* any new time events armed since the last QTimeEvt_tick_()? */
            if (QTimeEvt_timeEvtHead_[tickRate].act != (void *)0) {
 8002764:	4943      	ldr	r1, [pc, #268]	; (8002874 <QTimeEvt_tick_+0x140>)
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3308      	adds	r3, #8
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d074      	beq.n	8002864 <QTimeEvt_tick_+0x130>

                /* sanity check */
                Q_ASSERT_CRIT_(110, prev != (QTimeEvt *)0);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d106      	bne.n	800278e <QTimeEvt_tick_+0x5a>
 8002780:	2300      	movs	r3, #0
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	216e      	movs	r1, #110	; 0x6e
 8002788:	483b      	ldr	r0, [pc, #236]	; (8002878 <QTimeEvt_tick_+0x144>)
 800278a:	f7fe fc40 	bl	800100e <Q_onAssert>
                prev->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 800278e:	4939      	ldr	r1, [pc, #228]	; (8002874 <QTimeEvt_tick_+0x140>)
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	3308      	adds	r3, #8
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	605a      	str	r2, [r3, #4]
                QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 80027a4:	4933      	ldr	r1, [pc, #204]	; (8002874 <QTimeEvt_tick_+0x140>)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3308      	adds	r3, #8
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	613b      	str	r3, [r7, #16]
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d111      	bne.n	80027ea <QTimeEvt_tick_+0xb6>
            prev->next = t->next;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	78db      	ldrb	r3, [r3, #3]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	70da      	strb	r2, [r3, #3]
            /* do NOT advance the prev pointer */
            QF_CRIT_X_(); /* exit crit. section to reduce latency */
 80027de:	2300      	movs	r3, #0
 80027e0:	f383 8811 	msr	BASEPRI, r3

            /* prevent merging critical sections, see NOTE1 below  */
            QF_CRIT_EXIT_NOP();
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	e036      	b.n	8002858 <QTimeEvt_tick_+0x124>
        }
        else {
            --t->ctr;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	1e5a      	subs	r2, r3, #1
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	60da      	str	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == 0U) {
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d126      	bne.n	800284a <QTimeEvt_tick_+0x116>
                /* temporary for volatile */
                QActive * const act = (QActive *)t->act;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60fb      	str	r3, [r7, #12]

                /* periodic time evt? */
                if (t->interval != 0U) {
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <QTimeEvt_tick_+0xe4>
                    t->ctr = t->interval; /* rearm the time event */
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	60da      	str	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e00b      	b.n	8002830 <QTimeEvt_tick_+0xfc>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	78db      	ldrb	r3, [r3, #3]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800282a:	b2da      	uxtb	r2, r3
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	70da      	strb	r2, [r3, #3]
                    QS_SIG_PRE_(t->super.sig); /* signal of this time event */
                    QS_OBJ_PRE_(act);          /* the target AO */
                    QS_U8_PRE_(tickRate);      /* tick rate */
                QS_END_NOCRIT_PRE_()

                QF_CRIT_X_(); /* exit critical section before posting */
 8002830:	2300      	movs	r3, #0
 8002832:	f383 8811 	msr	BASEPRI, r3

                /* QACTIVE_POST() asserts internally if the queue overflows */
                QACTIVE_POST(act, &t->super, sender);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68dc      	ldr	r4, [r3, #12]
 800283c:	6939      	ldr	r1, [r7, #16]
 800283e:	2300      	movs	r3, #0
 8002840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	47a0      	blx	r4
 8002848:	e006      	b.n	8002858 <QTimeEvt_tick_+0x124>
            }
            else {
                prev = t;         /* advance to this time event */
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	617b      	str	r3, [r7, #20]
                QF_CRIT_X_();  /* exit crit. section to reduce latency */
 800284e:	2300      	movs	r3, #0
 8002850:	f383 8811 	msr	BASEPRI, r3
                * two adjacent critical sections would be merged. The
                * QF_CRIT_EXIT_NOP() macro contains minimal code required
                * to prevent such merging of critical sections in QF ports,
                * in which it can occur.
                */
                QF_CRIT_EXIT_NOP();
 8002854:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_E_(); /* re-enter crit. section to continue */
 8002858:	233f      	movs	r3, #63	; 0x3f
 800285a:	b672      	cpsid	i
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	b662      	cpsie	i
    for (;;) {
 8002862:	e779      	b.n	8002758 <QTimeEvt_tick_+0x24>
                break; /* all currently armed time evts. processed */
 8002864:	bf00      	nop
    }
    QF_CRIT_X_();
 8002866:	2300      	movs	r3, #0
 8002868:	f383 8811 	msr	BASEPRI, r3
}
 800286c:	bf00      	nop
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd90      	pop	{r4, r7, pc}
 8002874:	20001264 	.word	0x20001264
 8002878:	080054a0 	.word	0x080054a0

0800287c <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet const * const me) {
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
        return (me->bits != 0U);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2db      	uxtb	r3, r3
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <QPSet_remove>:

/*! Remove element `n` from the set (n = 1U..::QF_MAX_ACTIVE) */
static inline void QPSet_remove(QPSet * const me,
    uint_fast8_t const n)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
        me->bits = (me->bits &
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681a      	ldr	r2, [r3, #0]
            (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	2101      	movs	r1, #1
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	43db      	mvns	r3, r3
        me->bits = (me->bits &
 80028b8:	401a      	ands	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]
        }
        else {
            (me->bits[1] = (me->bits[1] & ~((uint32_t)1U << (n - 33U))));
        }
    #endif
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <QPSet_findMax>:

/*! Find the maximum element in the set, returns zero if the set is empty */
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
    #if (QF_MAX_ACTIVE <= 32)
        return QF_LOG2(me->bits);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	f1c3 0320 	rsb	r3, r3, #32
    #else
        return (me->bits[1] != 0U)
            ? (QF_LOG2(me->bits[1]) + 32U)
            : (QF_LOG2(me->bits[0]));
    #endif
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <QF_init>:
/*$define${QV::QV-base} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*$enddef${QV::QV-base} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QV::QF-cust} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QV::QF-cust::init} .....................................................*/
void QF_init(void) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
    #if (QF_MAX_EPOOL > 0U)
    QF_maxPool_ = 0U;
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <QF_init+0x2c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
    #endif

    QF_bzero(&QTimeEvt_timeEvtHead_[0], sizeof(QTimeEvt_timeEvtHead_));
 80028f6:	2128      	movs	r1, #40	; 0x28
 80028f8:	4808      	ldr	r0, [pc, #32]	; (800291c <QF_init+0x30>)
 80028fa:	f7ff fdab 	bl	8002454 <QF_bzero>
    QF_bzero(&QActive_registry_[0],     sizeof(QActive_registry_));
 80028fe:	2184      	movs	r1, #132	; 0x84
 8002900:	4807      	ldr	r0, [pc, #28]	; (8002920 <QF_init+0x34>)
 8002902:	f7ff fda7 	bl	8002454 <QF_bzero>
    QF_bzero(&QF_readySet_,             sizeof(QF_readySet_));
 8002906:	2104      	movs	r1, #4
 8002908:	4806      	ldr	r0, [pc, #24]	; (8002924 <QF_init+0x38>)
 800290a:	f7ff fda3 	bl	8002454 <QF_bzero>

    #ifdef QV_INIT
    QV_INIT(); /* port-specific initialization of the QV kernel */
 800290e:	f000 f8b3 	bl	8002a78 <QV_init>
    #endif
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2000119c 	.word	0x2000119c
 800291c:	20001264 	.word	0x20001264
 8002920:	200011dc 	.word	0x200011dc
 8002924:	20001260 	.word	0x20001260

08002928 <QF_run>:
    QF_onCleanup(); /* application-specific cleanup callback */
    /* nothing else to do for the cooperative QV kernel */
}

/*${QV::QF-cust::run} ......................................................*/
int_t QF_run(void) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
    #ifdef Q_SPY
    uint_fast8_t pprev = 0U; /* previously used priority */
    #endif

    QF_onStartup(); /* application-specific startup callback */
 800292e:	f7fe fb5d 	bl	8000fec <QF_onStartup>

    /* the combined event-loop and background-loop of the QV kernel... */
    QF_INT_DISABLE();
 8002932:	233f      	movs	r3, #63	; 0x3f
 8002934:	b672      	cpsid	i
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	b662      	cpsie	i
    QS_BEGIN_NOCRIT_PRE_(QS_QF_RUN, 0U)
    QS_END_NOCRIT_PRE_()

    for (;;) {
        /* find the maximum priority AO ready to run */
        if (QPSet_notEmpty(&QF_readySet_)) {
 800293c:	481a      	ldr	r0, [pc, #104]	; (80029a8 <QF_run+0x80>)
 800293e:	f7ff ff9d 	bl	800287c <QPSet_notEmpty>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d027      	beq.n	8002998 <QF_run+0x70>
            uint_fast8_t const p = QPSet_findMax(&QF_readySet_);
 8002948:	4817      	ldr	r0, [pc, #92]	; (80029a8 <QF_run+0x80>)
 800294a:	f7ff ffbe 	bl	80028ca <QPSet_findMax>
 800294e:	60f8      	str	r0, [r7, #12]
            QActive * const a = QActive_registry_[p];
 8002950:	4a16      	ldr	r2, [pc, #88]	; (80029ac <QF_run+0x84>)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002958:	60bb      	str	r3, [r7, #8]
            QS_END_NOCRIT_PRE_()

            pprev = p; /* update previous priority */
    #endif /* Q_SPY */

            QF_INT_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	f383 8811 	msr	BASEPRI, r3
            * 1. retrieve the event from the AO's event queue, which by this
            *    time must be non-empty and The "Vanialla" kernel asserts it.
            * 2. dispatch the event to the AO's state machine.
            * 3. determine if event is garbage and collect it if so
            */
            QEvt const * const e = QActive_get_(a);
 8002960:	68b8      	ldr	r0, [r7, #8]
 8002962:	f7ff fb1f 	bl	8001fa4 <QActive_get_>
 8002966:	6078      	str	r0, [r7, #4]
            QHSM_DISPATCH(&a->super, e, a->prio);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	68b8      	ldr	r0, [r7, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4798      	blx	r3
    #if (QF_MAX_EPOOL > 0U)
            QF_gc(e);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff fc12 	bl	80021a0 <QF_gc>
    #endif
            QF_INT_DISABLE();
 800297c:	233f      	movs	r3, #63	; 0x3f
 800297e:	b672      	cpsid	i
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	b662      	cpsie	i

            if (a->eQueue.frontEvt == (QEvt *)0) { /* empty queue? */
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1d6      	bne.n	800293c <QF_run+0x14>
                QPSet_remove(&QF_readySet_, p);
 800298e:	68f9      	ldr	r1, [r7, #12]
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <QF_run+0x80>)
 8002992:	f7ff ff84 	bl	800289e <QPSet_remove>
 8002996:	e7d1      	b.n	800293c <QF_run+0x14>
            * queues) can change at any time by an interrupt posting events
            * to a queue. QV_onIdle() MUST enable interrupts internally,
            * perhaps at the same time as putting the CPU into a power-saving
            * mode.
            */
            QV_onIdle();
 8002998:	f7fe fb2f 	bl	8000ffa <QV_onIdle>

            QF_INT_DISABLE();
 800299c:	233f      	movs	r3, #63	; 0x3f
 800299e:	b672      	cpsid	i
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	b662      	cpsie	i
        if (QPSet_notEmpty(&QF_readySet_)) {
 80029a6:	e7c9      	b.n	800293c <QF_run+0x14>
 80029a8:	20001260 	.word	0x20001260
 80029ac:	200011dc 	.word	0x200011dc

080029b0 <QActive_start_>:
    QEvt const * * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	460b      	mov	r3, r1
 80029be:	817b      	strh	r3, [r7, #10]
    Q_UNUSED_PAR(stkSize); /* not needed in QV */

    /*! @pre Stack storage must not be provided because the QV kernel
    * does not need per-AO stacks.
    */
    Q_REQUIRE_ID(500, stkSto == (void *)0);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <QActive_start_+0x20>
 80029c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80029ca:	4815      	ldr	r0, [pc, #84]	; (8002a20 <QActive_start_+0x70>)
 80029cc:	f7fe fb1f 	bl	800100e <Q_onAssert>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); /* QF-priority of the AO */
 80029d0:	897b      	ldrh	r3, [r7, #10]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	771a      	strb	r2, [r3, #28]
    me->pthre = (uint8_t)(prioSpec >> 8U);   /* preemption-threshold */
 80029d8:	897b      	ldrh	r3, [r7, #10]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	b29b      	uxth	r3, r3
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	775a      	strb	r2, [r3, #29]
    QActive_register_(me); /* make QF aware of this active object */
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff fd6b 	bl	80024c0 <QActive_register_>

    QEQueue_init(&me->eQueue, qSto, qLen); /* init the built-in queue */
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	330c      	adds	r3, #12
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fde6 	bl	80025c4 <QEQueue_init>

    QHSM_INIT(&me->super, par, me->prio); /* top-most initial tran. */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d103      	bne.n	8002a08 <QActive_start_+0x58>
 8002a00:	21c7      	movs	r1, #199	; 0xc7
 8002a02:	4807      	ldr	r0, [pc, #28]	; (8002a20 <QActive_start_+0x70>)
 8002a04:	f7fe fb03 	bl	800100e <Q_onAssert>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	6a39      	ldr	r1, [r7, #32]
 8002a14:	4798      	blx	r3
    QS_FLUSH(); /* flush the trace buffer to the host */
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	080054a8 	.word	0x080054a8

08002a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a28:	480d      	ldr	r0, [pc, #52]	; (8002a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a2a:	490e      	ldr	r1, [pc, #56]	; (8002a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a30:	e002      	b.n	8002a38 <LoopCopyDataInit>

08002a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a36:	3304      	adds	r3, #4

08002a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a3c:	d3f9      	bcc.n	8002a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3e:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a40:	4c0b      	ldr	r4, [pc, #44]	; (8002a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a44:	e001      	b.n	8002a4a <LoopFillZerobss>

08002a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a48:	3204      	adds	r2, #4

08002a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a4c:	d3fb      	bcc.n	8002a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a4e:	f7fe fde3 	bl	8001618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a52:	f002 fcad 	bl	80053b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a56:	f7fe fae5 	bl	8001024 <main>
  bx  lr    
 8002a5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a64:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8002a68:	080054bc 	.word	0x080054bc
  ldr r2, =_sbss
 8002a6c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8002a70:	20001290 	.word	0x20001290

08002a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a74:	e7fe      	b.n	8002a74 <ADC_IRQHandler>
	...

08002a78 <QV_init>:
* "kernel aware" interrupts.
*
* The interrupt priorities established in QV_init() can be later
* changed by the application-level code.
*/
void QV_init(void) {
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
    uint32_t n;

    /* set exception priorities to QF_BASEPRI...
    * SCB_SYSPRI1: Usage-fault, Bus-fault, Memory-fault
    */
    SCB_SYSPRI[1] = (SCB_SYSPRI[1]
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <QV_init+0x6c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <QV_init+0x6c>)
        | (QF_BASEPRI << 16) | (QF_BASEPRI << 8) | QF_BASEPRI);
 8002a84:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
 8002a88:	f443 537c 	orr.w	r3, r3, #16128	; 0x3f00
    SCB_SYSPRI[1] = (SCB_SYSPRI[1]
 8002a8c:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI2: SVCall */
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (QF_BASEPRI << 24));
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <QV_init+0x70>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <QV_init+0x70>)
 8002a94:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8002a98:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI3:  SysTick, PendSV, Debug */
    SCB_SYSPRI[3] = (SCB_SYSPRI[3]
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <QV_init+0x74>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a13      	ldr	r2, [pc, #76]	; (8002aec <QV_init+0x74>)
        | (QF_BASEPRI << 24) | (QF_BASEPRI << 16) | QF_BASEPRI);
 8002aa0:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8002aa4:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
    SCB_SYSPRI[3] = (SCB_SYSPRI[3]
 8002aa8:	6013      	str	r3, [r2, #0]

    /* set all implemented IRQ priories to QF_BASEPRI... */
    n = 8U + ((*SCnSCB_ICTR & 0x7U) << 3); /* (# NVIC_PRIO registers)/4 */
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <QV_init+0x78>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	607b      	str	r3, [r7, #4]
    do {
        --n;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
        NVIC_IP[n] = (QF_BASEPRI << 24) | (QF_BASEPRI << 16)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002ac6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002aca:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 8002ace:	601a      	str	r2, [r3, #0]
                     | (QF_BASEPRI << 8) | QF_BASEPRI;
    } while (n != 0);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <QV_init+0x40>
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed18 	.word	0xe000ed18
 8002ae8:	e000ed1c 	.word	0xe000ed1c
 8002aec:	e000ed20 	.word	0xe000ed20
 8002af0:	e000e004 	.word	0xe000e004

08002af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_Init+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <HAL_Init+0x40>)
 8002afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_Init+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <HAL_Init+0x40>)
 8002b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_Init+0x40>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <HAL_Init+0x40>)
 8002b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b1c:	2003      	movs	r0, #3
 8002b1e:	f000 f90d 	bl	8002d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b22:	200f      	movs	r0, #15
 8002b24:	f000 f808 	bl	8002b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b28:	f7fe fc7c 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023c00 	.word	0x40023c00

08002b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_InitTick+0x54>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_InitTick+0x58>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f917 	bl	8002d8a <HAL_SYSTICK_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00e      	b.n	8002b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b0f      	cmp	r3, #15
 8002b6a:	d80a      	bhi.n	8002b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f000 f8ed 	bl	8002d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b78:	4a06      	ldr	r2, [pc, #24]	; (8002b94 <HAL_InitTick+0x5c>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000040 	.word	0x20000040
 8002b90:	2000004c 	.word	0x2000004c
 8002b94:	20000048 	.word	0x20000048

08002b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x20>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_IncTick+0x24>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_IncTick+0x24>)
 8002baa:	6013      	str	r3, [r2, #0]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	2000004c 	.word	0x2000004c
 8002bbc:	2000128c 	.word	0x2000128c

08002bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_GetTick+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	2000128c 	.word	0x2000128c

08002bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0a:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	60d3      	str	r3, [r2, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <__NVIC_GetPriorityGrouping+0x18>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 0307 	and.w	r3, r3, #7
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	6039      	str	r1, [r7, #0]
 8002c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	db0a      	blt.n	8002c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	490c      	ldr	r1, [pc, #48]	; (8002c88 <__NVIC_SetPriority+0x4c>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	0112      	lsls	r2, r2, #4
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	440b      	add	r3, r1
 8002c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c64:	e00a      	b.n	8002c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4908      	ldr	r1, [pc, #32]	; (8002c8c <__NVIC_SetPriority+0x50>)
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	3b04      	subs	r3, #4
 8002c74:	0112      	lsls	r2, r2, #4
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	440b      	add	r3, r1
 8002c7a:	761a      	strb	r2, [r3, #24]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000e100 	.word	0xe000e100
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f1c3 0307 	rsb	r3, r3, #7
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	bf28      	it	cs
 8002cae:	2304      	movcs	r3, #4
 8002cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2b06      	cmp	r3, #6
 8002cb8:	d902      	bls.n	8002cc0 <NVIC_EncodePriority+0x30>
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3b03      	subs	r3, #3
 8002cbe:	e000      	b.n	8002cc2 <NVIC_EncodePriority+0x32>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	43d9      	mvns	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	4313      	orrs	r3, r2
         );
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d08:	d301      	bcc.n	8002d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00f      	b.n	8002d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <SysTick_Config+0x40>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d16:	210f      	movs	r1, #15
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f7ff ff8e 	bl	8002c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <SysTick_Config+0x40>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d26:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <SysTick_Config+0x40>)
 8002d28:	2207      	movs	r2, #7
 8002d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	e000e010 	.word	0xe000e010

08002d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ff47 	bl	8002bd8 <__NVIC_SetPriorityGrouping>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d64:	f7ff ff5c 	bl	8002c20 <__NVIC_GetPriorityGrouping>
 8002d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f7ff ff8e 	bl	8002c90 <NVIC_EncodePriority>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff5d 	bl	8002c3c <__NVIC_SetPriority>
}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffb0 	bl	8002cf8 <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	e16b      	b.n	8003098 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	f040 815a 	bne.w	8003092 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d005      	beq.n	8002df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d130      	bne.n	8002e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	2203      	movs	r2, #3
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 0201 	and.w	r2, r3, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d017      	beq.n	8002e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d123      	bne.n	8002ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	08da      	lsrs	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3208      	adds	r2, #8
 8002ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	69b9      	ldr	r1, [r7, #24]
 8002ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0203 	and.w	r2, r3, #3
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80b4 	beq.w	8003092 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b60      	ldr	r3, [pc, #384]	; (80030b0 <HAL_GPIO_Init+0x30c>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a5f      	ldr	r2, [pc, #380]	; (80030b0 <HAL_GPIO_Init+0x30c>)
 8002f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b5d      	ldr	r3, [pc, #372]	; (80030b0 <HAL_GPIO_Init+0x30c>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f46:	4a5b      	ldr	r2, [pc, #364]	; (80030b4 <HAL_GPIO_Init+0x310>)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_GPIO_Init+0x314>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d02b      	beq.n	8002fca <HAL_GPIO_Init+0x226>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a51      	ldr	r2, [pc, #324]	; (80030bc <HAL_GPIO_Init+0x318>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d025      	beq.n	8002fc6 <HAL_GPIO_Init+0x222>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a50      	ldr	r2, [pc, #320]	; (80030c0 <HAL_GPIO_Init+0x31c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01f      	beq.n	8002fc2 <HAL_GPIO_Init+0x21e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4f      	ldr	r2, [pc, #316]	; (80030c4 <HAL_GPIO_Init+0x320>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d019      	beq.n	8002fbe <HAL_GPIO_Init+0x21a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4e      	ldr	r2, [pc, #312]	; (80030c8 <HAL_GPIO_Init+0x324>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_GPIO_Init+0x216>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4d      	ldr	r2, [pc, #308]	; (80030cc <HAL_GPIO_Init+0x328>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00d      	beq.n	8002fb6 <HAL_GPIO_Init+0x212>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a4c      	ldr	r2, [pc, #304]	; (80030d0 <HAL_GPIO_Init+0x32c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <HAL_GPIO_Init+0x20e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a4b      	ldr	r2, [pc, #300]	; (80030d4 <HAL_GPIO_Init+0x330>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_GPIO_Init+0x20a>
 8002faa:	2307      	movs	r3, #7
 8002fac:	e00e      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fae:	2308      	movs	r3, #8
 8002fb0:	e00c      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fb2:	2306      	movs	r3, #6
 8002fb4:	e00a      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	e008      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fba:	2304      	movs	r3, #4
 8002fbc:	e006      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e004      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e002      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	f002 0203 	and.w	r2, r2, #3
 8002fd2:	0092      	lsls	r2, r2, #2
 8002fd4:	4093      	lsls	r3, r2
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fdc:	4935      	ldr	r1, [pc, #212]	; (80030b4 <HAL_GPIO_Init+0x310>)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fea:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <HAL_GPIO_Init+0x334>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800300e:	4a32      	ldr	r2, [pc, #200]	; (80030d8 <HAL_GPIO_Init+0x334>)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003014:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <HAL_GPIO_Init+0x334>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003038:	4a27      	ldr	r2, [pc, #156]	; (80030d8 <HAL_GPIO_Init+0x334>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <HAL_GPIO_Init+0x334>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003062:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <HAL_GPIO_Init+0x334>)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_GPIO_Init+0x334>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800308c:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <HAL_GPIO_Init+0x334>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3301      	adds	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	f67f ae90 	bls.w	8002dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40013800 	.word	0x40013800
 80030b8:	40020000 	.word	0x40020000
 80030bc:	40020400 	.word	0x40020400
 80030c0:	40020800 	.word	0x40020800
 80030c4:	40020c00 	.word	0x40020c00
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40021400 	.word	0x40021400
 80030d0:	40021800 	.word	0x40021800
 80030d4:	40021c00 	.word	0x40021c00
 80030d8:	40013c00 	.word	0x40013c00

080030dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	887b      	ldrh	r3, [r7, #2]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	e001      	b.n	80030fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
 8003118:	4613      	mov	r3, r2
 800311a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800311c:	787b      	ldrb	r3, [r7, #1]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003122:	887a      	ldrh	r2, [r7, #2]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003128:	e003      	b.n	8003132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800312a:	887b      	ldrh	r3, [r7, #2]
 800312c:	041a      	lsls	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	619a      	str	r2, [r3, #24]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	460b      	mov	r3, r1
 8003148:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003150:	887a      	ldrh	r2, [r7, #2]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4013      	ands	r3, r2
 8003156:	041a      	lsls	r2, r3, #16
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	43d9      	mvns	r1, r3
 800315c:	887b      	ldrh	r3, [r7, #2]
 800315e:	400b      	ands	r3, r1
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	619a      	str	r2, [r3, #24]
}
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e12b      	b.n	80033de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fe f96a 	bl	8001474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	; 0x24
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031d8:	f001 fb92 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 80031dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4a81      	ldr	r2, [pc, #516]	; (80033e8 <HAL_I2C_Init+0x274>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d807      	bhi.n	80031f8 <HAL_I2C_Init+0x84>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4a80      	ldr	r2, [pc, #512]	; (80033ec <HAL_I2C_Init+0x278>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	bf94      	ite	ls
 80031f0:	2301      	movls	r3, #1
 80031f2:	2300      	movhi	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e006      	b.n	8003206 <HAL_I2C_Init+0x92>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a7d      	ldr	r2, [pc, #500]	; (80033f0 <HAL_I2C_Init+0x27c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	bf94      	ite	ls
 8003200:	2301      	movls	r3, #1
 8003202:	2300      	movhi	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0e7      	b.n	80033de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4a78      	ldr	r2, [pc, #480]	; (80033f4 <HAL_I2C_Init+0x280>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	0c9b      	lsrs	r3, r3, #18
 8003218:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4a6a      	ldr	r2, [pc, #424]	; (80033e8 <HAL_I2C_Init+0x274>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d802      	bhi.n	8003248 <HAL_I2C_Init+0xd4>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3301      	adds	r3, #1
 8003246:	e009      	b.n	800325c <HAL_I2C_Init+0xe8>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	4a69      	ldr	r2, [pc, #420]	; (80033f8 <HAL_I2C_Init+0x284>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	099b      	lsrs	r3, r3, #6
 800325a:	3301      	adds	r3, #1
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	430b      	orrs	r3, r1
 8003262:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800326e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	495c      	ldr	r1, [pc, #368]	; (80033e8 <HAL_I2C_Init+0x274>)
 8003278:	428b      	cmp	r3, r1
 800327a:	d819      	bhi.n	80032b0 <HAL_I2C_Init+0x13c>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e59      	subs	r1, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	fbb1 f3f3 	udiv	r3, r1, r3
 800328a:	1c59      	adds	r1, r3, #1
 800328c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003290:	400b      	ands	r3, r1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_I2C_Init+0x138>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1e59      	subs	r1, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032aa:	e051      	b.n	8003350 <HAL_I2C_Init+0x1dc>
 80032ac:	2304      	movs	r3, #4
 80032ae:	e04f      	b.n	8003350 <HAL_I2C_Init+0x1dc>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d111      	bne.n	80032dc <HAL_I2C_Init+0x168>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e58      	subs	r0, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	440b      	add	r3, r1
 80032c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e012      	b.n	8003302 <HAL_I2C_Init+0x18e>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1e58      	subs	r0, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	0099      	lsls	r1, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Init+0x196>
 8003306:	2301      	movs	r3, #1
 8003308:	e022      	b.n	8003350 <HAL_I2C_Init+0x1dc>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10e      	bne.n	8003330 <HAL_I2C_Init+0x1bc>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1e58      	subs	r0, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	440b      	add	r3, r1
 8003320:	fbb0 f3f3 	udiv	r3, r0, r3
 8003324:	3301      	adds	r3, #1
 8003326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800332e:	e00f      	b.n	8003350 <HAL_I2C_Init+0x1dc>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1e58      	subs	r0, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	0099      	lsls	r1, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	fbb0 f3f3 	udiv	r3, r0, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	6809      	ldr	r1, [r1, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800337e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6911      	ldr	r1, [r2, #16]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68d2      	ldr	r2, [r2, #12]
 800338a:	4311      	orrs	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	430b      	orrs	r3, r1
 8003392:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	000186a0 	.word	0x000186a0
 80033ec:	001e847f 	.word	0x001e847f
 80033f0:	003d08ff 	.word	0x003d08ff
 80033f4:	431bde83 	.word	0x431bde83
 80033f8:	10624dd3 	.word	0x10624dd3

080033fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	461a      	mov	r2, r3
 8003408:	460b      	mov	r3, r1
 800340a:	817b      	strh	r3, [r7, #10]
 800340c:	4613      	mov	r3, r2
 800340e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7ff fbd6 	bl	8002bc0 <HAL_GetTick>
 8003414:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	f040 80e0 	bne.w	80035e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2319      	movs	r3, #25
 800342a:	2201      	movs	r2, #1
 800342c:	4970      	ldr	r1, [pc, #448]	; (80035f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fc58 	bl	8003ce4 <I2C_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
 800343c:	e0d3      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_I2C_Master_Transmit+0x50>
 8003448:	2302      	movs	r3, #2
 800344a:	e0cc      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d007      	beq.n	8003472 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003480:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2221      	movs	r2, #33	; 0x21
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2210      	movs	r2, #16
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	893a      	ldrh	r2, [r7, #8]
 80034a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a50      	ldr	r2, [pc, #320]	; (80035f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80034b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034b4:	8979      	ldrh	r1, [r7, #10]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	6a3a      	ldr	r2, [r7, #32]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fac2 	bl	8003a44 <I2C_MasterRequestWrite>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e08d      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034e0:	e066      	b.n	80035b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	6a39      	ldr	r1, [r7, #32]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fcd2 	bl	8003e90 <I2C_WaitOnTXEFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d107      	bne.n	800350a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003508:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e06b      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	781a      	ldrb	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b04      	cmp	r3, #4
 800354a:	d11b      	bne.n	8003584 <HAL_I2C_Master_Transmit+0x188>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	d017      	beq.n	8003584 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	6a39      	ldr	r1, [r7, #32]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fcc2 	bl	8003f12 <I2C_WaitOnBTFFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2b04      	cmp	r3, #4
 800359a:	d107      	bne.n	80035ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e01a      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d194      	bne.n	80034e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	00100002 	.word	0x00100002
 80035f4:	ffff0000 	.word	0xffff0000

080035f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08c      	sub	sp, #48	; 0x30
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	461a      	mov	r2, r3
 8003604:	460b      	mov	r3, r1
 8003606:	817b      	strh	r3, [r7, #10]
 8003608:	4613      	mov	r3, r2
 800360a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800360c:	f7ff fad8 	bl	8002bc0 <HAL_GetTick>
 8003610:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	f040 820b 	bne.w	8003a36 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2319      	movs	r3, #25
 8003626:	2201      	movs	r2, #1
 8003628:	497c      	ldr	r1, [pc, #496]	; (800381c <HAL_I2C_Master_Receive+0x224>)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fb5a 	bl	8003ce4 <I2C_WaitOnFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
 8003638:	e1fe      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_I2C_Master_Receive+0x50>
 8003644:	2302      	movs	r3, #2
 8003646:	e1f7      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d007      	beq.n	800366e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800367c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2222      	movs	r2, #34	; 0x22
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2210      	movs	r2, #16
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	893a      	ldrh	r2, [r7, #8]
 800369e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <HAL_I2C_Master_Receive+0x228>)
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036b0:	8979      	ldrh	r1, [r7, #10]
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fa46 	bl	8003b48 <I2C_MasterRequestRead>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e1b8      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d113      	bne.n	80036f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	623b      	str	r3, [r7, #32]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	623b      	str	r3, [r7, #32]
 80036e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	e18c      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d11b      	bne.n	8003736 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e16c      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	2b02      	cmp	r3, #2
 800373c:	d11b      	bne.n	8003776 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	e14c      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003784:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800379c:	e138      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	f200 80f1 	bhi.w	800398a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d123      	bne.n	80037f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fbed 	bl	8003f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e139      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037f6:	e10b      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d14e      	bne.n	800389e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	2200      	movs	r2, #0
 8003808:	4906      	ldr	r1, [pc, #24]	; (8003824 <HAL_I2C_Master_Receive+0x22c>)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fa6a 	bl	8003ce4 <I2C_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e10e      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
 800381a:	bf00      	nop
 800381c:	00100002 	.word	0x00100002
 8003820:	ffff0000 	.word	0xffff0000
 8003824:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800389c:	e0b8      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	2200      	movs	r2, #0
 80038a6:	4966      	ldr	r1, [pc, #408]	; (8003a40 <HAL_I2C_Master_Receive+0x448>)
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fa1b 	bl	8003ce4 <I2C_WaitOnFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0bf      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	2200      	movs	r2, #0
 8003902:	494f      	ldr	r1, [pc, #316]	; (8003a40 <HAL_I2C_Master_Receive+0x448>)
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f9ed 	bl	8003ce4 <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e091      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003988:	e042      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fb00 	bl	8003f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e04c      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d118      	bne.n	8003a10 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f47f aec2 	bne.w	800379e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
  }
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3728      	adds	r7, #40	; 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	00010004 	.word	0x00010004

08003a44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	460b      	mov	r3, r1
 8003a52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d006      	beq.n	8003a6e <I2C_MasterRequestWrite+0x2a>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d003      	beq.n	8003a6e <I2C_MasterRequestWrite+0x2a>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6c:	d108      	bne.n	8003a80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e00b      	b.n	8003a98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	2b12      	cmp	r3, #18
 8003a86:	d107      	bne.n	8003a98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f91d 	bl	8003ce4 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003abe:	d103      	bne.n	8003ac8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e035      	b.n	8003b38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad4:	d108      	bne.n	8003ae8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ad6:	897b      	ldrh	r3, [r7, #10]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ae4:	611a      	str	r2, [r3, #16]
 8003ae6:	e01b      	b.n	8003b20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ae8:	897b      	ldrh	r3, [r7, #10]
 8003aea:	11db      	asrs	r3, r3, #7
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 0306 	and.w	r3, r3, #6
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f063 030f 	orn	r3, r3, #15
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	490e      	ldr	r1, [pc, #56]	; (8003b40 <I2C_MasterRequestWrite+0xfc>)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f943 	bl	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e010      	b.n	8003b38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b16:	897b      	ldrh	r3, [r7, #10]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4907      	ldr	r1, [pc, #28]	; (8003b44 <I2C_MasterRequestWrite+0x100>)
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f933 	bl	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	00010008 	.word	0x00010008
 8003b44:	00010002 	.word	0x00010002

08003b48 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	607a      	str	r2, [r7, #4]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	460b      	mov	r3, r1
 8003b56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d006      	beq.n	8003b82 <I2C_MasterRequestRead+0x3a>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d003      	beq.n	8003b82 <I2C_MasterRequestRead+0x3a>
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b80:	d108      	bne.n	8003b94 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e00b      	b.n	8003bac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	2b11      	cmp	r3, #17
 8003b9a:	d107      	bne.n	8003bac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003baa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f893 	bl	8003ce4 <I2C_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd2:	d103      	bne.n	8003bdc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e079      	b.n	8003cd4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be8:	d108      	bne.n	8003bfc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bea:	897b      	ldrh	r3, [r7, #10]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	611a      	str	r2, [r3, #16]
 8003bfa:	e05f      	b.n	8003cbc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bfc:	897b      	ldrh	r3, [r7, #10]
 8003bfe:	11db      	asrs	r3, r3, #7
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f003 0306 	and.w	r3, r3, #6
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f063 030f 	orn	r3, r3, #15
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4930      	ldr	r1, [pc, #192]	; (8003cdc <I2C_MasterRequestRead+0x194>)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f8b9 	bl	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e054      	b.n	8003cd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c2a:	897b      	ldrh	r3, [r7, #10]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4929      	ldr	r1, [pc, #164]	; (8003ce0 <I2C_MasterRequestRead+0x198>)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f8a9 	bl	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e044      	b.n	8003cd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f831 	bl	8003ce4 <I2C_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c96:	d103      	bne.n	8003ca0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e017      	b.n	8003cd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ca4:	897b      	ldrh	r3, [r7, #10]
 8003ca6:	11db      	asrs	r3, r3, #7
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f003 0306 	and.w	r3, r3, #6
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f063 030e 	orn	r3, r3, #14
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	4907      	ldr	r1, [pc, #28]	; (8003ce0 <I2C_MasterRequestRead+0x198>)
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f865 	bl	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	00010008 	.word	0x00010008
 8003ce0:	00010002 	.word	0x00010002

08003ce4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cf4:	e025      	b.n	8003d42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d021      	beq.n	8003d42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfe:	f7fe ff5f 	bl	8002bc0 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d302      	bcc.n	8003d14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d116      	bne.n	8003d42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f043 0220 	orr.w	r2, r3, #32
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e023      	b.n	8003d8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d10d      	bne.n	8003d68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	43da      	mvns	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4013      	ands	r3, r2
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	2300      	movne	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	e00c      	b.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4013      	ands	r3, r2
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf0c      	ite	eq
 8003d7a:	2301      	moveq	r3, #1
 8003d7c:	2300      	movne	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d0b6      	beq.n	8003cf6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003da0:	e051      	b.n	8003e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db0:	d123      	bne.n	8003dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e046      	b.n	8003e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d021      	beq.n	8003e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e02:	f7fe fedd 	bl	8002bc0 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d302      	bcc.n	8003e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d116      	bne.n	8003e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f043 0220 	orr.w	r2, r3, #32
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e020      	b.n	8003e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d10c      	bne.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	43da      	mvns	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf14      	ite	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	2300      	moveq	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	e00b      	b.n	8003e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	43da      	mvns	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4013      	ands	r3, r2
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bf14      	ite	ne
 8003e7c:	2301      	movne	r3, #1
 8003e7e:	2300      	moveq	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d18d      	bne.n	8003da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e9c:	e02d      	b.n	8003efa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f8ce 	bl	8004040 <I2C_IsAcknowledgeFailed>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e02d      	b.n	8003f0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d021      	beq.n	8003efa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb6:	f7fe fe83 	bl	8002bc0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d302      	bcc.n	8003ecc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d116      	bne.n	8003efa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f043 0220 	orr.w	r2, r3, #32
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e007      	b.n	8003f0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d1ca      	bne.n	8003e9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f1e:	e02d      	b.n	8003f7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f88d 	bl	8004040 <I2C_IsAcknowledgeFailed>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e02d      	b.n	8003f8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f36:	d021      	beq.n	8003f7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f38:	f7fe fe42 	bl	8002bc0 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d302      	bcc.n	8003f4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d116      	bne.n	8003f7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e007      	b.n	8003f8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d1ca      	bne.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fa0:	e042      	b.n	8004028 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d119      	bne.n	8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0210 	mvn.w	r2, #16
 8003fb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e029      	b.n	8004038 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe4:	f7fe fdec 	bl	8002bc0 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d302      	bcc.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d116      	bne.n	8004028 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e007      	b.n	8004038 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b40      	cmp	r3, #64	; 0x40
 8004034:	d1b5      	bne.n	8003fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004056:	d11b      	bne.n	8004090 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004060:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	f043 0204 	orr.w	r2, r3, #4
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e267      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d075      	beq.n	80041aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040be:	4b88      	ldr	r3, [pc, #544]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d00c      	beq.n	80040e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ca:	4b85      	ldr	r3, [pc, #532]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d112      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d6:	4b82      	ldr	r3, [pc, #520]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e2:	d10b      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	4b7e      	ldr	r3, [pc, #504]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05b      	beq.n	80041a8 <HAL_RCC_OscConfig+0x108>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d157      	bne.n	80041a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e242      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d106      	bne.n	8004114 <HAL_RCC_OscConfig+0x74>
 8004106:	4b76      	ldr	r3, [pc, #472]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a75      	ldr	r2, [pc, #468]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e01d      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x98>
 800411e:	4b70      	ldr	r3, [pc, #448]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a6f      	ldr	r2, [pc, #444]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b6d      	ldr	r3, [pc, #436]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a6c      	ldr	r2, [pc, #432]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004138:	4b69      	ldr	r3, [pc, #420]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a68      	ldr	r2, [pc, #416]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a65      	ldr	r2, [pc, #404]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fe fd32 	bl	8002bc0 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004160:	f7fe fd2e 	bl	8002bc0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e207      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	4b5b      	ldr	r3, [pc, #364]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0xc0>
 800417e:	e014      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe fd1e 	bl	8002bc0 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004188:	f7fe fd1a 	bl	8002bc0 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e1f3      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419a:	4b51      	ldr	r3, [pc, #324]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0xe8>
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d063      	beq.n	800427e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041b6:	4b4a      	ldr	r3, [pc, #296]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d11c      	bne.n	8004208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ce:	4b44      	ldr	r3, [pc, #272]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d116      	bne.n	8004208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_RCC_OscConfig+0x152>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1c7      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f2:	4b3b      	ldr	r3, [pc, #236]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4937      	ldr	r1, [pc, #220]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	e03a      	b.n	800427e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d020      	beq.n	8004252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004210:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <HAL_RCC_OscConfig+0x244>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fe fcd3 	bl	8002bc0 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421e:	f7fe fccf 	bl	8002bc0 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1a8      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b28      	ldr	r3, [pc, #160]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4925      	ldr	r1, [pc, #148]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]
 8004250:	e015      	b.n	800427e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_OscConfig+0x244>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fe fcb2 	bl	8002bc0 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004260:	f7fe fcae 	bl	8002bc0 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e187      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d036      	beq.n	80042f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <HAL_RCC_OscConfig+0x248>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fe fc92 	bl	8002bc0 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fe fc8e 	bl	8002bc0 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e167      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80042b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x200>
 80042be:	e01b      	b.n	80042f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c0:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_OscConfig+0x248>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fe fc7b 	bl	8002bc0 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	e00e      	b.n	80042ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ce:	f7fe fc77 	bl	8002bc0 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d907      	bls.n	80042ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e150      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
 80042e0:	40023800 	.word	0x40023800
 80042e4:	42470000 	.word	0x42470000
 80042e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	4b88      	ldr	r3, [pc, #544]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ea      	bne.n	80042ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8097 	beq.w	8004434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430a:	4b81      	ldr	r3, [pc, #516]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10f      	bne.n	8004336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	4b7d      	ldr	r3, [pc, #500]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	4a7c      	ldr	r2, [pc, #496]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004324:	6413      	str	r3, [r2, #64]	; 0x40
 8004326:	4b7a      	ldr	r3, [pc, #488]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004336:	4b77      	ldr	r3, [pc, #476]	; (8004514 <HAL_RCC_OscConfig+0x474>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d118      	bne.n	8004374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004342:	4b74      	ldr	r3, [pc, #464]	; (8004514 <HAL_RCC_OscConfig+0x474>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a73      	ldr	r2, [pc, #460]	; (8004514 <HAL_RCC_OscConfig+0x474>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434e:	f7fe fc37 	bl	8002bc0 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004356:	f7fe fc33 	bl	8002bc0 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e10c      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004368:	4b6a      	ldr	r3, [pc, #424]	; (8004514 <HAL_RCC_OscConfig+0x474>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d106      	bne.n	800438a <HAL_RCC_OscConfig+0x2ea>
 800437c:	4b64      	ldr	r3, [pc, #400]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	4a63      	ldr	r2, [pc, #396]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6713      	str	r3, [r2, #112]	; 0x70
 8004388:	e01c      	b.n	80043c4 <HAL_RCC_OscConfig+0x324>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b05      	cmp	r3, #5
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0x30c>
 8004392:	4b5f      	ldr	r3, [pc, #380]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a5e      	ldr	r2, [pc, #376]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004398:	f043 0304 	orr.w	r3, r3, #4
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
 800439e:	4b5c      	ldr	r3, [pc, #368]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a5b      	ldr	r2, [pc, #364]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0x324>
 80043ac:	4b58      	ldr	r3, [pc, #352]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a57      	ldr	r2, [pc, #348]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	4b55      	ldr	r3, [pc, #340]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4a54      	ldr	r2, [pc, #336]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043be:	f023 0304 	bic.w	r3, r3, #4
 80043c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fe fbf8 	bl	8002bc0 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fe fbf4 	bl	8002bc0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e0cb      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ea:	4b49      	ldr	r3, [pc, #292]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0ee      	beq.n	80043d4 <HAL_RCC_OscConfig+0x334>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f8:	f7fe fbe2 	bl	8002bc0 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004400:	f7fe fbde 	bl	8002bc0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e0b5      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004416:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1ee      	bne.n	8004400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d105      	bne.n	8004434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004428:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	4a38      	ldr	r2, [pc, #224]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 800442e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004432:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80a1 	beq.w	8004580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800443e:	4b34      	ldr	r3, [pc, #208]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b08      	cmp	r3, #8
 8004448:	d05c      	beq.n	8004504 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d141      	bne.n	80044d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	4b31      	ldr	r3, [pc, #196]	; (8004518 <HAL_RCC_OscConfig+0x478>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fe fbb2 	bl	8002bc0 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004460:	f7fe fbae 	bl	8002bc0 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e087      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004472:	4b27      	ldr	r3, [pc, #156]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	019b      	lsls	r3, r3, #6
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	3b01      	subs	r3, #1
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	491b      	ldr	r1, [pc, #108]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <HAL_RCC_OscConfig+0x478>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fe fb87 	bl	8002bc0 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b6:	f7fe fb83 	bl	8002bc0 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e05c      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x416>
 80044d4:	e054      	b.n	8004580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d6:	4b10      	ldr	r3, [pc, #64]	; (8004518 <HAL_RCC_OscConfig+0x478>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fe fb70 	bl	8002bc0 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fe fb6c 	bl	8002bc0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e045      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x444>
 8004502:	e03d      	b.n	8004580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d107      	bne.n	800451c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e038      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
 8004510:	40023800 	.word	0x40023800
 8004514:	40007000 	.word	0x40007000
 8004518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800451c:	4b1b      	ldr	r3, [pc, #108]	; (800458c <HAL_RCC_OscConfig+0x4ec>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d028      	beq.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d121      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d11a      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004554:	4293      	cmp	r3, r2
 8004556:	d111      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	3b01      	subs	r3, #1
 8004566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d107      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800

08004590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0cc      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a4:	4b68      	ldr	r3, [pc, #416]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d90c      	bls.n	80045cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b65      	ldr	r3, [pc, #404]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b63      	ldr	r3, [pc, #396]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0b8      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d020      	beq.n	800461a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e4:	4b59      	ldr	r3, [pc, #356]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4a58      	ldr	r2, [pc, #352]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045fc:	4b53      	ldr	r3, [pc, #332]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4a52      	ldr	r2, [pc, #328]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004608:	4b50      	ldr	r3, [pc, #320]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	494d      	ldr	r1, [pc, #308]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d044      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d119      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e07f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d003      	beq.n	800464e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464a:	2b03      	cmp	r3, #3
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464e:	4b3f      	ldr	r3, [pc, #252]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e06f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465e:	4b3b      	ldr	r3, [pc, #236]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e067      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800466e:	4b37      	ldr	r3, [pc, #220]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f023 0203 	bic.w	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	4934      	ldr	r1, [pc, #208]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004680:	f7fe fa9e 	bl	8002bc0 <HAL_GetTick>
 8004684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	e00a      	b.n	800469e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004688:	f7fe fa9a 	bl	8002bc0 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e04f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	4b2b      	ldr	r3, [pc, #172]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 020c 	and.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d1eb      	bne.n	8004688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b0:	4b25      	ldr	r3, [pc, #148]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d20c      	bcs.n	80046d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e032      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4916      	ldr	r1, [pc, #88]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	490e      	ldr	r1, [pc, #56]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004716:	f000 f821 	bl	800475c <HAL_RCC_GetSysClockFreq>
 800471a:	4602      	mov	r2, r0
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	490a      	ldr	r1, [pc, #40]	; (8004750 <HAL_RCC_ClockConfig+0x1c0>)
 8004728:	5ccb      	ldrb	r3, [r1, r3]
 800472a:	fa22 f303 	lsr.w	r3, r2, r3
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCC_ClockConfig+0x1c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe f9fe 	bl	8002b38 <HAL_InitTick>

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40023c00 	.word	0x40023c00
 800474c:	40023800 	.word	0x40023800
 8004750:	08005428 	.word	0x08005428
 8004754:	20000040 	.word	0x20000040
 8004758:	20000048 	.word	0x20000048

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	b090      	sub	sp, #64	; 0x40
 8004762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
 8004768:	2300      	movs	r3, #0
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800476c:	2300      	movs	r3, #0
 800476e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b08      	cmp	r3, #8
 800477e:	d00d      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0x40>
 8004780:	2b08      	cmp	r3, #8
 8004782:	f200 80a1 	bhi.w	80048c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x34>
 800478a:	2b04      	cmp	r3, #4
 800478c:	d003      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0x3a>
 800478e:	e09b      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004790:	4b53      	ldr	r3, [pc, #332]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004792:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004794:	e09b      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004796:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004798:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800479a:	e098      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800479c:	4b4f      	ldr	r3, [pc, #316]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a6:	4b4d      	ldr	r3, [pc, #308]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d028      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b2:	4b4a      	ldr	r3, [pc, #296]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	2200      	movs	r2, #0
 80047ba:	623b      	str	r3, [r7, #32]
 80047bc:	627a      	str	r2, [r7, #36]	; 0x24
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047c4:	2100      	movs	r1, #0
 80047c6:	4b47      	ldr	r3, [pc, #284]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047c8:	fb03 f201 	mul.w	r2, r3, r1
 80047cc:	2300      	movs	r3, #0
 80047ce:	fb00 f303 	mul.w	r3, r0, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	4a43      	ldr	r2, [pc, #268]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047d6:	fba0 1202 	umull	r1, r2, r0, r2
 80047da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047dc:	460a      	mov	r2, r1
 80047de:	62ba      	str	r2, [r7, #40]	; 0x28
 80047e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e2:	4413      	add	r3, r2
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	2200      	movs	r2, #0
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	61fa      	str	r2, [r7, #28]
 80047ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047f6:	f7fc f8dd 	bl	80009b4 <__aeabi_uldivmod>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4613      	mov	r3, r2
 8004800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004802:	e053      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004804:	4b35      	ldr	r3, [pc, #212]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	2200      	movs	r2, #0
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	617a      	str	r2, [r7, #20]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004816:	f04f 0b00 	mov.w	fp, #0
 800481a:	4652      	mov	r2, sl
 800481c:	465b      	mov	r3, fp
 800481e:	f04f 0000 	mov.w	r0, #0
 8004822:	f04f 0100 	mov.w	r1, #0
 8004826:	0159      	lsls	r1, r3, #5
 8004828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800482c:	0150      	lsls	r0, r2, #5
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	ebb2 080a 	subs.w	r8, r2, sl
 8004836:	eb63 090b 	sbc.w	r9, r3, fp
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004846:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800484a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800484e:	ebb2 0408 	subs.w	r4, r2, r8
 8004852:	eb63 0509 	sbc.w	r5, r3, r9
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	00eb      	lsls	r3, r5, #3
 8004860:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004864:	00e2      	lsls	r2, r4, #3
 8004866:	4614      	mov	r4, r2
 8004868:	461d      	mov	r5, r3
 800486a:	eb14 030a 	adds.w	r3, r4, sl
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	eb45 030b 	adc.w	r3, r5, fp
 8004874:	607b      	str	r3, [r7, #4]
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004882:	4629      	mov	r1, r5
 8004884:	028b      	lsls	r3, r1, #10
 8004886:	4621      	mov	r1, r4
 8004888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800488c:	4621      	mov	r1, r4
 800488e:	028a      	lsls	r2, r1, #10
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004896:	2200      	movs	r2, #0
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	60fa      	str	r2, [r7, #12]
 800489c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048a0:	f7fc f888 	bl	80009b4 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4613      	mov	r3, r2
 80048aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	3301      	adds	r3, #1
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80048bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048c6:	e002      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80048ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3740      	adds	r7, #64	; 0x40
 80048d4:	46bd      	mov	sp, r7
 80048d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800
 80048e0:	00f42400 	.word	0x00f42400
 80048e4:	017d7840 	.word	0x017d7840

080048e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000040 	.word	0x20000040

08004900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004904:	f7ff fff0 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	0a9b      	lsrs	r3, r3, #10
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4903      	ldr	r1, [pc, #12]	; (8004924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40023800 	.word	0x40023800
 8004924:	08005438 	.word	0x08005438

08004928 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e041      	b.n	80049be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fc fdd8 	bl	8001504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f000 fa28 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d109      	bne.n	80049ec <HAL_TIM_PWM_Start+0x24>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	bf14      	ite	ne
 80049e4:	2301      	movne	r3, #1
 80049e6:	2300      	moveq	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e022      	b.n	8004a32 <HAL_TIM_PWM_Start+0x6a>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d109      	bne.n	8004a06 <HAL_TIM_PWM_Start+0x3e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	bf14      	ite	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	2300      	moveq	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	e015      	b.n	8004a32 <HAL_TIM_PWM_Start+0x6a>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d109      	bne.n	8004a20 <HAL_TIM_PWM_Start+0x58>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e008      	b.n	8004a32 <HAL_TIM_PWM_Start+0x6a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07c      	b.n	8004b34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d104      	bne.n	8004a4a <HAL_TIM_PWM_Start+0x82>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a48:	e013      	b.n	8004a72 <HAL_TIM_PWM_Start+0xaa>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_PWM_Start+0x92>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a58:	e00b      	b.n	8004a72 <HAL_TIM_PWM_Start+0xaa>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_PWM_Start+0xa2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a68:	e003      	b.n	8004a72 <HAL_TIM_PWM_Start+0xaa>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2201      	movs	r2, #1
 8004a78:	6839      	ldr	r1, [r7, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fbee 	bl	800525c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a2d      	ldr	r2, [pc, #180]	; (8004b3c <HAL_TIM_PWM_Start+0x174>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <HAL_TIM_PWM_Start+0xcc>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a2c      	ldr	r2, [pc, #176]	; (8004b40 <HAL_TIM_PWM_Start+0x178>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d101      	bne.n	8004a98 <HAL_TIM_PWM_Start+0xd0>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <HAL_TIM_PWM_Start+0xd2>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <HAL_TIM_PWM_Start+0x174>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d022      	beq.n	8004afe <HAL_TIM_PWM_Start+0x136>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d01d      	beq.n	8004afe <HAL_TIM_PWM_Start+0x136>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_TIM_PWM_Start+0x17c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d018      	beq.n	8004afe <HAL_TIM_PWM_Start+0x136>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <HAL_TIM_PWM_Start+0x180>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_TIM_PWM_Start+0x136>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_TIM_PWM_Start+0x184>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00e      	beq.n	8004afe <HAL_TIM_PWM_Start+0x136>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <HAL_TIM_PWM_Start+0x178>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_TIM_PWM_Start+0x136>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a18      	ldr	r2, [pc, #96]	; (8004b50 <HAL_TIM_PWM_Start+0x188>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_TIM_PWM_Start+0x136>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <HAL_TIM_PWM_Start+0x18c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b06      	cmp	r3, #6
 8004b0e:	d010      	beq.n	8004b32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b20:	e007      	b.n	8004b32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0201 	orr.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40010400 	.word	0x40010400
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40001800 	.word	0x40001800

08004b58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2200      	movs	r2, #0
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fb76 	bl	800525c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a2e      	ldr	r2, [pc, #184]	; (8004c30 <HAL_TIM_PWM_Stop+0xd8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_TIM_PWM_Stop+0x2c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2d      	ldr	r2, [pc, #180]	; (8004c34 <HAL_TIM_PWM_Stop+0xdc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d101      	bne.n	8004b88 <HAL_TIM_PWM_Stop+0x30>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <HAL_TIM_PWM_Stop+0x32>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d017      	beq.n	8004bbe <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6a1a      	ldr	r2, [r3, #32]
 8004b94:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10f      	bne.n	8004bbe <HAL_TIM_PWM_Stop+0x66>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6a1a      	ldr	r2, [r3, #32]
 8004ba4:	f240 4344 	movw	r3, #1092	; 0x444
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d107      	bne.n	8004bbe <HAL_TIM_PWM_Stop+0x66>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6a1a      	ldr	r2, [r3, #32]
 8004bc4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10f      	bne.n	8004bee <HAL_TIM_PWM_Stop+0x96>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	f240 4344 	movw	r3, #1092	; 0x444
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d107      	bne.n	8004bee <HAL_TIM_PWM_Stop+0x96>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_PWM_Stop+0xa6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bfc:	e013      	b.n	8004c26 <HAL_TIM_PWM_Stop+0xce>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Stop+0xb6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c0c:	e00b      	b.n	8004c26 <HAL_TIM_PWM_Stop+0xce>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Stop+0xc6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c1c:	e003      	b.n	8004c26 <HAL_TIM_PWM_Stop+0xce>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40010000 	.word	0x40010000
 8004c34:	40010400 	.word	0x40010400

08004c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e0ae      	b.n	8004db4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b0c      	cmp	r3, #12
 8004c62:	f200 809f 	bhi.w	8004da4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c66:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6c:	08004ca1 	.word	0x08004ca1
 8004c70:	08004da5 	.word	0x08004da5
 8004c74:	08004da5 	.word	0x08004da5
 8004c78:	08004da5 	.word	0x08004da5
 8004c7c:	08004ce1 	.word	0x08004ce1
 8004c80:	08004da5 	.word	0x08004da5
 8004c84:	08004da5 	.word	0x08004da5
 8004c88:	08004da5 	.word	0x08004da5
 8004c8c:	08004d23 	.word	0x08004d23
 8004c90:	08004da5 	.word	0x08004da5
 8004c94:	08004da5 	.word	0x08004da5
 8004c98:	08004da5 	.word	0x08004da5
 8004c9c:	08004d63 	.word	0x08004d63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 f928 	bl	8004efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0208 	orr.w	r2, r2, #8
 8004cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0204 	bic.w	r2, r2, #4
 8004cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6999      	ldr	r1, [r3, #24]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	619a      	str	r2, [r3, #24]
      break;
 8004cde:	e064      	b.n	8004daa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f978 	bl	8004fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6999      	ldr	r1, [r3, #24]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	021a      	lsls	r2, r3, #8
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	619a      	str	r2, [r3, #24]
      break;
 8004d20:	e043      	b.n	8004daa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f9cd 	bl	80050c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0208 	orr.w	r2, r2, #8
 8004d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0204 	bic.w	r2, r2, #4
 8004d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69d9      	ldr	r1, [r3, #28]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	61da      	str	r2, [r3, #28]
      break;
 8004d60:	e023      	b.n	8004daa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fa21 	bl	80051b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69d9      	ldr	r1, [r3, #28]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	021a      	lsls	r2, r3, #8
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	61da      	str	r2, [r3, #28]
      break;
 8004da2:	e002      	b.n	8004daa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	75fb      	strb	r3, [r7, #23]
      break;
 8004da8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a40      	ldr	r2, [pc, #256]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3d      	ldr	r2, [pc, #244]	; (8004ed4 <TIM_Base_SetConfig+0x118>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <TIM_Base_SetConfig+0x11c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3b      	ldr	r2, [pc, #236]	; (8004edc <TIM_Base_SetConfig+0x120>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3a      	ldr	r2, [pc, #232]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2f      	ldr	r2, [pc, #188]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d027      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	; (8004ed4 <TIM_Base_SetConfig+0x118>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d023      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2b      	ldr	r2, [pc, #172]	; (8004ed8 <TIM_Base_SetConfig+0x11c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <TIM_Base_SetConfig+0x120>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a29      	ldr	r2, [pc, #164]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d017      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a28      	ldr	r2, [pc, #160]	; (8004ee4 <TIM_Base_SetConfig+0x128>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a27      	ldr	r2, [pc, #156]	; (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a26      	ldr	r2, [pc, #152]	; (8004eec <TIM_Base_SetConfig+0x130>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a25      	ldr	r2, [pc, #148]	; (8004ef0 <TIM_Base_SetConfig+0x134>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a24      	ldr	r2, [pc, #144]	; (8004ef4 <TIM_Base_SetConfig+0x138>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a23      	ldr	r2, [pc, #140]	; (8004ef8 <TIM_Base_SetConfig+0x13c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_Base_SetConfig+0xf8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d103      	bne.n	8004ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	615a      	str	r2, [r3, #20]
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	40000c00 	.word	0x40000c00
 8004ee0:	40010400 	.word	0x40010400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800
 8004ef0:	40001800 	.word	0x40001800
 8004ef4:	40001c00 	.word	0x40001c00
 8004ef8:	40002000 	.word	0x40002000

08004efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 0302 	bic.w	r3, r3, #2
 8004f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a20      	ldr	r2, [pc, #128]	; (8004fd4 <TIM_OC1_SetConfig+0xd8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_OC1_SetConfig+0x64>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1f      	ldr	r2, [pc, #124]	; (8004fd8 <TIM_OC1_SetConfig+0xdc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10c      	bne.n	8004f7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0308 	bic.w	r3, r3, #8
 8004f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0304 	bic.w	r3, r3, #4
 8004f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <TIM_OC1_SetConfig+0xd8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_OC1_SetConfig+0x8e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a14      	ldr	r2, [pc, #80]	; (8004fd8 <TIM_OC1_SetConfig+0xdc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d111      	bne.n	8004fae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	621a      	str	r2, [r3, #32]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40010400 	.word	0x40010400

08004fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0210 	bic.w	r2, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 0320 	bic.w	r3, r3, #32
 8005026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a22      	ldr	r2, [pc, #136]	; (80050c0 <TIM_OC2_SetConfig+0xe4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_OC2_SetConfig+0x68>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a21      	ldr	r2, [pc, #132]	; (80050c4 <TIM_OC2_SetConfig+0xe8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d10d      	bne.n	8005060 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800504a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <TIM_OC2_SetConfig+0xe4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC2_SetConfig+0x94>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a16      	ldr	r2, [pc, #88]	; (80050c4 <TIM_OC2_SetConfig+0xe8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d113      	bne.n	8005098 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800507e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40010400 	.word	0x40010400

080050c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <TIM_OC3_SetConfig+0xe0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_OC3_SetConfig+0x66>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a20      	ldr	r2, [pc, #128]	; (80051ac <TIM_OC3_SetConfig+0xe4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10d      	bne.n	800514a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <TIM_OC3_SetConfig+0xe0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <TIM_OC3_SetConfig+0x92>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a15      	ldr	r2, [pc, #84]	; (80051ac <TIM_OC3_SetConfig+0xe4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d113      	bne.n	8005182 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	621a      	str	r2, [r3, #32]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40010400 	.word	0x40010400

080051b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	031b      	lsls	r3, r3, #12
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a12      	ldr	r2, [pc, #72]	; (8005254 <TIM_OC4_SetConfig+0xa4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC4_SetConfig+0x68>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a11      	ldr	r2, [pc, #68]	; (8005258 <TIM_OC4_SetConfig+0xa8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d109      	bne.n	800522c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800521e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	019b      	lsls	r3, r3, #6
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	40010400 	.word	0x40010400

0800525c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	2201      	movs	r2, #1
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1a      	ldr	r2, [r3, #32]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	43db      	mvns	r3, r3
 800527e:	401a      	ands	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1a      	ldr	r2, [r3, #32]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052bc:	2302      	movs	r3, #2
 80052be:	e05a      	b.n	8005376 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a21      	ldr	r2, [pc, #132]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d022      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530c:	d01d      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1d      	ldr	r2, [pc, #116]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1b      	ldr	r2, [pc, #108]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1a      	ldr	r2, [pc, #104]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a18      	ldr	r2, [pc, #96]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a17      	ldr	r2, [pc, #92]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a15      	ldr	r2, [pc, #84]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d10c      	bne.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4313      	orrs	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40010400 	.word	0x40010400
 8005398:	40014000 	.word	0x40014000
 800539c:	40001800 	.word	0x40001800

080053a0 <memset>:
 80053a0:	4402      	add	r2, r0
 80053a2:	4603      	mov	r3, r0
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d100      	bne.n	80053aa <memset+0xa>
 80053a8:	4770      	bx	lr
 80053aa:	f803 1b01 	strb.w	r1, [r3], #1
 80053ae:	e7f9      	b.n	80053a4 <memset+0x4>

080053b0 <__libc_init_array>:
 80053b0:	b570      	push	{r4, r5, r6, lr}
 80053b2:	4d0d      	ldr	r5, [pc, #52]	; (80053e8 <__libc_init_array+0x38>)
 80053b4:	4c0d      	ldr	r4, [pc, #52]	; (80053ec <__libc_init_array+0x3c>)
 80053b6:	1b64      	subs	r4, r4, r5
 80053b8:	10a4      	asrs	r4, r4, #2
 80053ba:	2600      	movs	r6, #0
 80053bc:	42a6      	cmp	r6, r4
 80053be:	d109      	bne.n	80053d4 <__libc_init_array+0x24>
 80053c0:	4d0b      	ldr	r5, [pc, #44]	; (80053f0 <__libc_init_array+0x40>)
 80053c2:	4c0c      	ldr	r4, [pc, #48]	; (80053f4 <__libc_init_array+0x44>)
 80053c4:	f000 f818 	bl	80053f8 <_init>
 80053c8:	1b64      	subs	r4, r4, r5
 80053ca:	10a4      	asrs	r4, r4, #2
 80053cc:	2600      	movs	r6, #0
 80053ce:	42a6      	cmp	r6, r4
 80053d0:	d105      	bne.n	80053de <__libc_init_array+0x2e>
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
 80053d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d8:	4798      	blx	r3
 80053da:	3601      	adds	r6, #1
 80053dc:	e7ee      	b.n	80053bc <__libc_init_array+0xc>
 80053de:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e2:	4798      	blx	r3
 80053e4:	3601      	adds	r6, #1
 80053e6:	e7f2      	b.n	80053ce <__libc_init_array+0x1e>
 80053e8:	080054b4 	.word	0x080054b4
 80053ec:	080054b4 	.word	0x080054b4
 80053f0:	080054b4 	.word	0x080054b4
 80053f4:	080054b8 	.word	0x080054b8

080053f8 <_init>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	bf00      	nop
 80053fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fe:	bc08      	pop	{r3}
 8005400:	469e      	mov	lr, r3
 8005402:	4770      	bx	lr

08005404 <_fini>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr
